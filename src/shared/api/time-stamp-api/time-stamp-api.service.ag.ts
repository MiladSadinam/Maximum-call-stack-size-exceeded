import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase, INITIALIZED_IN_BACKEND, NullableInDraftMode } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiSaveArgs, ApiLoadArgs, ShiftId, ShiftSelector, ApiListWrapper, SchedulingApiPosSystem, SchedulingApiBooking, SchedulingApiAccountHolderState, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { DateTime, Date, DateExclusiveEnd, LocalTime, Duration, Minutes, Hours, Days, Months, Years, Percent, Email, Search, Tel, Currency, Password, PostalCode, Integer, Url, Iban, Bic, Image } from '@plano/shared/api/base/generated-types.ag';
import { Config } from '@plano/shared/core/config';
import { AbstractControl } from '@angular/forms';
import { ApiErrorService } from '@plano/shared/api/api-error.service';

import { TimeStampApiRoot } from '@plano/shared/api';
import { TimeStampApiShifts } from '@plano/shared/api';
import { TimeStampApiShift } from '@plano/shared/api';
import { TimeStampApiShiftModels } from '@plano/shared/api';
import { TimeStampApiShiftModel } from '@plano/shared/api';
import { TimeStampApiStampedMember } from '@plano/shared/api';
import { TimeStampApiAllowedTimeStampDevices } from '@plano/shared/api';
import { TimeStampApiAllowedTimeStampDevice } from '@plano/shared/api';


/**
 * This service enables access to the api "time_stamp".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */

// constants
class Consts
{
	START = 1;
	END = 2;
	COMMENT = 3;
	COMPLETED_REGULAR_PAUSES_DURATION = 4;
	UNCOMPLETED_REGULAR_PAUSE_START = 5;
	AUTOMATIC_PAUSE_DURATION = 6;
	SELECTED_SHIFT_ID = 7;
	SELECTED_SHIFT_MODEL_ID = 8;
	SHIFTS = 9;
	SHIFT_MODELS = 10;
	STAMPED_MEMBERS = 11;
	ALLOWED_TIME_STAMP_DEVICES = 12;
	WARN_UNPLANNED_WORK = 13;
	WARN_STAMPED_NOT_CURRENT_TIME = 14;
	WARN_STAMPED_NOT_SHIFT_TIME = 15;
	WHEN_MEMBER_STAMPED_START = 16;
	SHIFT_START = 1;
	SHIFT_END = 2;
	SHIFT_MODEL_ID = 3;
	SHIFT_MODEL_COLOR = 1;
	SHIFT_MODEL_TIME = 2;
	SHIFT_MODEL_PARENT_NAME = 3;
	SHIFT_MODEL_NAME = 4;
	SHIFT_MODEL_TRASHED = 5;
	SHIFT_MODEL_ASSIGNABLE = 6;
	SHIFT_MODEL_TIME_START = 1;
	STAMPED_MEMBER_FIRST_NAME = 1;
	STAMPED_MEMBER_LAST_NAME = 2;
	STAMPED_MEMBER_PAUSING = 3;
	STAMPED_MEMBER_ACTIVITY_START = 4;
	ALLOWED_TIME_STAMP_DEVICE_NAME = 1;
	ALLOWED_TIME_STAMP_DEVICE_VISITOR_ID = 2;
	ALLOWED_TIME_STAMP_DEVICE_BROWSER_NAME = 3;
}


@Injectable({
  providedIn: 'root',
})
export class TimeStampApiServiceBase<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiBase
{
	consts = new Consts();

	constructor(h : HttpClient
			,	router : Router
			,	apiE : ApiErrorService
			,	zone : NgZone
			,	injector : Injector) {
		super(h, router, apiE, zone, injector, 'time_stamp');
	}

	protected version() : string {
		return 'd538db0d6cf899fbce80c16e599e9a4e,d6d31cf25fa1a7c748afbdec560024f6';
	}

	private dataWrapper = new TimeStampApiRoot<ValidationMode>(this);

	get data() : TimeStampApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected getRootWrapper() : TimeStampApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected recreateRootWrapper() : void {
		this.dataWrapper = new TimeStampApiRoot<ValidationMode>(this);
	}
}

		 
export class TimeStampApiRootBase<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	

	constructor(override readonly api : TimeStampApiServiceBase<ValidationMode> | null, idRaw : any = null) {
		super(api, TimeStampApiRoot as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
		this.shiftsWrapper.parent = this as any as TimeStampApiRoot<ValidationMode>;
		this.shiftModelsWrapper.parent = this as any as TimeStampApiRoot<ValidationMode>;
		this.stampedMembersWrapper.parent = this as any as TimeStampApiRoot<ValidationMode>;
		this.allowedTimeStampDevicesWrapper.parent = this as any as TimeStampApiRoot<ValidationMode>;
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<TimeStampApiRoot<ValidationMode>, TimeStampApiRoot<ValidationMode>> = new ApiAttributeInfo<TimeStampApiRoot<ValidationMode>, TimeStampApiRoot<ValidationMode>>({
			apiObjWrapper: this as any as TimeStampApiRoot<ValidationMode>,
			name: '',
			id: 'ROOT',
		});
	attributeInfoStart =  new ApiAttributeInfo<TimeStampApiRoot<ValidationMode>, DateTime>({
			apiObjWrapper: this as any as TimeStampApiRoot<ValidationMode>,
			name: 'start',
			id: 'START',
			primitiveType: PApiPrimitiveTypes.DateTime,
			validations: function(this : TimeStampApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.min(+this.api!.pMoment.daysFromNow(-7), true, PApiPrimitiveTypes.DateTime, undefined, undefined);
							return null;
					},
					() => {
		return this.api!.validators.max(+this.api!.pMoment.m().add(10, 'minutes'), true, PApiPrimitiveTypes.DateTime, undefined, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoEnd =  new ApiAttributeInfo<TimeStampApiRoot<ValidationMode>, DateTime>({
			apiObjWrapper: this as any as TimeStampApiRoot<ValidationMode>,
			name: 'end',
			id: 'END',
			primitiveType: PApiPrimitiveTypes.DateTime,
			validations: function(this : TimeStampApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.min(() => this.start, false, PApiPrimitiveTypes.DateTime, 'START', undefined);
							return null;
					},
					() => {
		return this.api!.validators.max(+this.api!.pMoment.m().add(10, 'minutes'), true, PApiPrimitiveTypes.DateTime, undefined, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoComment =  new ApiAttributeInfo<TimeStampApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as TimeStampApiRoot<ValidationMode>,
			name: 'comment',
			id: 'COMMENT',
			primitiveType: PApiPrimitiveTypes.string,
		});
	attributeInfoCompletedRegularPausesDuration =  new ApiAttributeInfo<TimeStampApiRoot<ValidationMode>, Duration>({
			apiObjWrapper: this as any as TimeStampApiRoot<ValidationMode>,
			name: 'completedRegularPausesDuration',
			id: 'COMPLETED_REGULAR_PAUSES_DURATION',
			primitiveType: PApiPrimitiveTypes.Duration,
		});
	attributeInfoUncompletedRegularPauseStart =  new ApiAttributeInfo<TimeStampApiRoot<ValidationMode>, DateTime>({
			apiObjWrapper: this as any as TimeStampApiRoot<ValidationMode>,
			name: 'uncompletedRegularPauseStart',
			id: 'UNCOMPLETED_REGULAR_PAUSE_START',
			primitiveType: PApiPrimitiveTypes.DateTime,
		});
	attributeInfoAutomaticPauseDuration =  new ApiAttributeInfo<TimeStampApiRoot<ValidationMode>, Duration>({
			apiObjWrapper: this as any as TimeStampApiRoot<ValidationMode>,
			name: 'automaticPauseDuration',
			id: 'AUTOMATIC_PAUSE_DURATION',
			primitiveType: PApiPrimitiveTypes.Duration,
		});
	attributeInfoSelectedShiftId =  new ApiAttributeInfo<TimeStampApiRoot<ValidationMode>, ShiftId>({
			apiObjWrapper: this as any as TimeStampApiRoot<ValidationMode>,
			name: 'selectedShiftId',
			id: 'SELECTED_SHIFT_ID',
			primitiveType: PApiPrimitiveTypes.ShiftId,
		});
	attributeInfoSelectedShiftModelId =  new ApiAttributeInfo<TimeStampApiRoot<ValidationMode>, Id>({
			apiObjWrapper: this as any as TimeStampApiRoot<ValidationMode>,
			name: 'selectedShiftModelId',
			id: 'SELECTED_SHIFT_MODEL_ID',
			primitiveType: PApiPrimitiveTypes.Id,
		});
	attributeInfoWarnUnplannedWork =  new ApiAttributeInfo<TimeStampApiRoot<ValidationMode>, boolean>({
			apiObjWrapper: this as any as TimeStampApiRoot<ValidationMode>,
			name: 'warnUnplannedWork',
			id: 'WARN_UNPLANNED_WORK',
			primitiveType: PApiPrimitiveTypes.boolean,
		});
	attributeInfoWarnStampedNotCurrentTime =  new ApiAttributeInfo<TimeStampApiRoot<ValidationMode>, boolean>({
			apiObjWrapper: this as any as TimeStampApiRoot<ValidationMode>,
			name: 'warnStampedNotCurrentTime',
			id: 'WARN_STAMPED_NOT_CURRENT_TIME',
			primitiveType: PApiPrimitiveTypes.boolean,
		});
	attributeInfoWarnStampedNotShiftTime =  new ApiAttributeInfo<TimeStampApiRoot<ValidationMode>, boolean>({
			apiObjWrapper: this as any as TimeStampApiRoot<ValidationMode>,
			name: 'warnStampedNotShiftTime',
			id: 'WARN_STAMPED_NOT_SHIFT_TIME',
			primitiveType: PApiPrimitiveTypes.boolean,
		});
	attributeInfoWhenMemberStampedStart =  new ApiAttributeInfo<TimeStampApiRoot<ValidationMode>, DateTime>({
			apiObjWrapper: this as any as TimeStampApiRoot<ValidationMode>,
			name: 'whenMemberStampedStart',
			id: 'WHEN_MEMBER_STAMPED_START',
			primitiveType: PApiPrimitiveTypes.DateTime,
		});

	/**
     *  Start of working time.
	 *
	 * @type {DateTime}
     */
	get start() : DateTime | null {
		return this.data[1];
	}

	set start(v : DateTime | null) {
        this.setterImpl(1, v, 'start');
	}

	/**
     *  End of working time.
	 *
	 * @type {DateTime}
     */
	get end() : DateTime | null {
		return this.data[2];
	}

	set end(v : DateTime | null) {
        this.setterImpl(2, v, 'end');
	}

	/**
     *  User comment.
	 *
	 * @type {string}
     */
	get comment() : string | null {
		return this.data[3];
	}

	set comment(v : string | null) {
        this.setterImpl(3, v, 'comment');
	}

	/**
     *  The duration of all the regular pauses (done by member) which have been completed in milliseconds.
	 *
	 * @type {Duration}
     */
	get completedRegularPausesDuration() : NullableInDraftMode<Duration, ValidationMode> {
		return this.data[4];
	}

	set completedRegularPausesDuration(v : NullableInDraftMode<Duration, ValidationMode>) {
        this.setterImpl(4, v, 'completedRegularPausesDuration');
	}

	/**
     *  If there is a regular pause (done by member) running then this value tells when it was started.
	 *
	 * @type {DateTime}
     */
	get uncompletedRegularPauseStart() : DateTime | null {
		return this.data[5];
	}

	set uncompletedRegularPauseStart(v : DateTime | null) {
        this.setterImpl(5, v, 'uncompletedRegularPauseStart');
	}

	/**
     *  Duration of automatically calculated pauses (added by Dr. Plano) in milliseconds.
	 *
	 * @type {Duration}
     */
	get automaticPauseDuration() : NullableInDraftMode<Duration, ValidationMode> {
		return this.data[6];
	}

	set automaticPauseDuration(v : NullableInDraftMode<Duration, ValidationMode>) {
        this.setterImpl(6, v, 'automaticPauseDuration');
	}

	private selectedShiftIdWrapper : ShiftId | null = null!;

	/**
     *  Id of selected shift.
	 *
	 * @type {ShiftId}
     */
	get selectedShiftId() : ShiftId | null {
		return this.selectedShiftIdWrapper;
	}

	set selectedShiftId(v : ShiftId | null) {
        this.setterImpl(7, v, 'selectedShiftId', () => {this.selectedShiftIdWrapper = v;});
	}

	private selectedShiftModelIdWrapper : Id | null = null!;

	/**
     *  Id of selected shift model.
	 *
	 * @type {Id}
     */
	get selectedShiftModelId() : Id | null {
		return this.selectedShiftModelIdWrapper;
	}

	set selectedShiftModelId(v : Id | null) {
        this.setterImpl(8, v, 'selectedShiftModelId', () => {this.selectedShiftModelIdWrapper = v;});
	}

	private shiftsWrapper : TimeStampApiShifts<ValidationMode> = new TimeStampApiShifts<ValidationMode>(this.api, false);

	/**
     *  A list of the shifts for which the user can time-stamp. If the time-stamp is running only the selected shift will be returned. If it is an unplanned work then no shifts will be returned.
     */
	get shifts() : TimeStampApiShifts<ValidationMode> {
		return this.shiftsWrapper;
	}

	set shiftsTestSetter(v : TimeStampApiShifts<ValidationMode>) {
        this.setterImpl(9, v.rawData, 'shifts', () => {this.shiftsWrapper = v;});
	}

	private shiftModelsWrapper : TimeStampApiShiftModels<ValidationMode> = new TimeStampApiShiftModels<ValidationMode>(this.api, false);

	/**
     *  A list of user's shift models.
     */
	get shiftModels() : TimeStampApiShiftModels<ValidationMode> {
		return this.shiftModelsWrapper;
	}

	set shiftModelsTestSetter(v : TimeStampApiShiftModels<ValidationMode>) {
        this.setterImpl(10, v.rawData, 'shiftModels', () => {this.shiftModelsWrapper = v;});
	}

	private stampedMembersWrapper : TimeStampApiStampedMembers<ValidationMode> = new TimeStampApiStampedMembers<ValidationMode>(this.api, false);

	/**
     *  A list of currently stamped members.
     */
	get stampedMembers() : TimeStampApiStampedMembers<ValidationMode> {
		return this.stampedMembersWrapper;
	}

	set stampedMembersTestSetter(v : TimeStampApiStampedMembers<ValidationMode>) {
        this.setterImpl(11, v.rawData, 'stampedMembers', () => {this.stampedMembersWrapper = v;});
	}

	private allowedTimeStampDevicesWrapper : TimeStampApiAllowedTimeStampDevices<ValidationMode> = new TimeStampApiAllowedTimeStampDevices<ValidationMode>(this.api, false);

	/**
     *  A list of allowed time-stamp devices. If this list is empty then all devices are allowed to time-stamp.
     */
	get allowedTimeStampDevices() : TimeStampApiAllowedTimeStampDevices<ValidationMode> {
		return this.allowedTimeStampDevicesWrapper;
	}

	set allowedTimeStampDevicesTestSetter(v : TimeStampApiAllowedTimeStampDevices<ValidationMode>) {
        this.setterImpl(12, v.rawData, 'allowedTimeStampDevices', () => {this.allowedTimeStampDevicesWrapper = v;});
	}

	/**
     *  Warning that the member is doing an unplanned work. Member should explain this in the comment.
	 *
	 * @type {boolean}
     */
	get warnUnplannedWork() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[13];
	}

	set warnUnplannedWork(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(13, v, 'warnUnplannedWork');
	}

	/**
     *  Warning that the member has not stamped the current time. Member should explain this in the comment.
	 *
	 * @type {boolean}
     */
	get warnStampedNotCurrentTime() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[14];
	}

	set warnStampedNotCurrentTime(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(14, v, 'warnStampedNotCurrentTime');
	}

	/**
     *  Warning that the member has not stamped the shift time. Member should explain this in the comment.
	 *
	 * @type {boolean}
     */
	get warnStampedNotShiftTime() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[15];
	}

	set warnStampedNotShiftTime(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(15, v, 'warnStampedNotShiftTime');
	}

	/**
     *  When was the start-time stamped (using time-stamp).
	 *
	 * @type {DateTime}
     */
	get whenMemberStampedStart() : DateTime | null {
		return this.data[16];
	}

	set whenMemberStampedStart(v : DateTime | null) {
        this.setterImpl(16, v, 'whenMemberStampedStart');
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
		this.data[7] = Meta.getReplacedId(this.data[7], _idReplacements);
		this.selectedShiftIdWrapper = ShiftId.create(this.data[7]);
		this.data[8] = Meta.getReplacedId(this.data[8], _idReplacements);
		this.selectedShiftModelIdWrapper = Id.create(this.data[8]);
		this.shiftsWrapper._fixIds(_idReplacements);
		this.shiftModelsWrapper._fixIds(_idReplacements);
		this.stampedMembersWrapper._fixIds(_idReplacements);
		this.allowedTimeStampDevicesWrapper._fixIds(_idReplacements);
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 17);

			if(data[9] === null)
				data[9] = Meta.createNewList();
			if(data[10] === null)
				data[10] = Meta.createNewList();
			if(data[11] === null)
				data[11] = Meta.createNewList();
			if(data[12] === null)
				data[12] = Meta.createNewList();
			data[13] = false;
			data[14] = false;
			data[15] = false;
		}

		// propagate new raw data to children
		if(!Meta.isSameId(data ? data[7] : null, this.selectedShiftIdWrapper))
			this.selectedShiftIdWrapper = data && data[7] ? ShiftId.create(data[7]) : null!;
		if(!Meta.isSameId(data ? data[8] : null, this.selectedShiftModelIdWrapper))
			this.selectedShiftModelIdWrapper = data && data[8] ? Id.create(data[8]) : null!;
		this.shiftsWrapper._updateRawData(data ? data[9] : null, generateMissingData);
		this.shiftModelsWrapper._updateRawData(data ? data[10] : null, generateMissingData);
		this.stampedMembersWrapper._updateRawData(data ? data[11] : null, generateMissingData);
		this.allowedTimeStampDevicesWrapper._updateRawData(data ? data[12] : null, generateMissingData);
	}

	protected get dni() : string {
		return '1';
	}

	static loadDetailed(	api : TimeStampApiServiceBase<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is TimeStampApiRoot<'validated'> {
		// TODO: PLANO-151346
	}
}

		 export class TimeStampApiShiftsBase<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	override parent : any = null;

	constructor(override readonly api : TimeStampApiServiceBase<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, 'shifts');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : TimeStampApiShift<ValidationMode> {
		const newWrapper = new TimeStampApiShift<ValidationMode>(this.api);
		newWrapper._updateRawData(item, _generateMissingData);
		return newWrapper;
	}

	protected containsPrimitives() : boolean {
		return false;
	}

	protected containsIds() : boolean {
		return false;
	}

	protected createInstance(removeDestroyedItems : boolean) : TimeStampApiShifts<ValidationMode> {
		return new TimeStampApiShifts<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '10';
	}

	override createNewItem(id : Id | null = null) : TimeStampApiShift<ValidationMode> {
		const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('shifts');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<TimeStampApiShifts<ValidationMode>, TimeStampApiShifts<ValidationMode>> = new ApiAttributeInfo<TimeStampApiShifts<ValidationMode>, TimeStampApiShifts<ValidationMode>>({
			apiObjWrapper: this as any as TimeStampApiShifts<ValidationMode>,
			name: 'shifts',
			id: 'SHIFTS',
			primitiveType: PApiPrimitiveTypes.ApiList,
		});
}

				 
export class TimeStampApiShiftBase<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	override parent : any = null;

	constructor(override readonly api : TimeStampApiServiceBase<ValidationMode> | null, idRaw : any = null) {
		super(api, TimeStampApiShift as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
	}


	private _id : ShiftId | null = null;
	get id() : ShiftId {
		return this._id !== null ? this._id : ShiftId.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<TimeStampApiShift<ValidationMode>, TimeStampApiShift<ValidationMode>> = new ApiAttributeInfo<TimeStampApiShift<ValidationMode>, TimeStampApiShift<ValidationMode>>({
			apiObjWrapper: this as any as TimeStampApiShift<ValidationMode>,
			name: 'shift',
			id: 'SHIFT',
		});
	attributeInfoStart =  new ApiAttributeInfo<TimeStampApiShift<ValidationMode>, DateTime>({
			apiObjWrapper: this as any as TimeStampApiShift<ValidationMode>,
			name: 'start',
			id: 'SHIFT_START',
			primitiveType: PApiPrimitiveTypes.DateTime,
		});
	attributeInfoEnd =  new ApiAttributeInfo<TimeStampApiShift<ValidationMode>, DateTime>({
			apiObjWrapper: this as any as TimeStampApiShift<ValidationMode>,
			name: 'end',
			id: 'SHIFT_END',
			primitiveType: PApiPrimitiveTypes.DateTime,
		});
	attributeInfoModelId =  new ApiAttributeInfo<TimeStampApiShift<ValidationMode>, Id>({
			apiObjWrapper: this as any as TimeStampApiShift<ValidationMode>,
			name: 'modelId',
			id: 'SHIFT_MODEL_ID',
			primitiveType: PApiPrimitiveTypes.Id,
		});

	/**
     *  Start time of shift.
	 *
	 * @type {DateTime}
     */
	get start() : NullableInDraftMode<DateTime, ValidationMode> {
		return this.data[1];
	}

	set start(v : NullableInDraftMode<DateTime, ValidationMode>) {
        this.setterImpl(1, v, 'start');
	}

	/**
     *  End time of shift.
	 *
	 * @type {DateTime}
     */
	get end() : NullableInDraftMode<DateTime, ValidationMode> {
		return this.data[2];
	}

	set end(v : NullableInDraftMode<DateTime, ValidationMode>) {
        this.setterImpl(2, v, 'end');
	}

	private modelIdWrapper : NullableInDraftMode<Id, ValidationMode> = null!;

	/**
     *  Id of the shift model to which this shift belongs.
	 *
	 * @type {Id}
     */
	get modelId() : NullableInDraftMode<Id, ValidationMode> {
		return this.modelIdWrapper;
	}

	set modelId(v : NullableInDraftMode<Id, ValidationMode>) {
        this.setterImpl(3, v, 'modelId', () => {this.modelIdWrapper = v;});
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
		this.data[3] = Meta.getReplacedId(this.data[3], _idReplacements);
		this.modelIdWrapper = Id.create(this.data[3]);
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : ShiftId.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 4);

		}

		// propagate new raw data to children
		if(!Meta.isSameId(data ? data[3] : null, this.modelIdWrapper))
			this.modelIdWrapper = data && data[3] ? Id.create(data[3]) : null!;
	}

	protected get dni() : string {
		return '18';
	}

	static loadDetailed(	api : TimeStampApiServiceBase<any>
						,	id : ShiftId
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '18', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is TimeStampApiShift<'validated'> {
		// TODO: PLANO-151346
	}
}

		 export class TimeStampApiShiftModelsBase<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	override parent : any = null;

	constructor(override readonly api : TimeStampApiServiceBase<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, 'shiftModels');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : TimeStampApiShiftModel<ValidationMode> {
		const newWrapper = new TimeStampApiShiftModel<ValidationMode>(this.api);
		newWrapper._updateRawData(item, _generateMissingData);
		return newWrapper;
	}

	protected containsPrimitives() : boolean {
		return false;
	}

	protected containsIds() : boolean {
		return false;
	}

	protected createInstance(removeDestroyedItems : boolean) : TimeStampApiShiftModels<ValidationMode> {
		return new TimeStampApiShiftModels<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '11';
	}

	override createNewItem(id : Id | null = null) : TimeStampApiShiftModel<ValidationMode> {
		const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('shiftModels');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<TimeStampApiShiftModels<ValidationMode>, TimeStampApiShiftModels<ValidationMode>> = new ApiAttributeInfo<TimeStampApiShiftModels<ValidationMode>, TimeStampApiShiftModels<ValidationMode>>({
			apiObjWrapper: this as any as TimeStampApiShiftModels<ValidationMode>,
			name: 'shiftModels',
			id: 'SHIFT_MODELS',
			primitiveType: PApiPrimitiveTypes.ApiList,
		});
}

				 
export class TimeStampApiShiftModelBase<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	override parent : any = null;

	constructor(override readonly api : TimeStampApiServiceBase<ValidationMode> | null, idRaw : any = null) {
		super(api, TimeStampApiShiftModel as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
		this.timeWrapper.parent = this as any as TimeStampApiShiftModel<ValidationMode>;
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<TimeStampApiShiftModel<ValidationMode>, TimeStampApiShiftModel<ValidationMode>> = new ApiAttributeInfo<TimeStampApiShiftModel<ValidationMode>, TimeStampApiShiftModel<ValidationMode>>({
			apiObjWrapper: this as any as TimeStampApiShiftModel<ValidationMode>,
			name: 'shiftModel',
			id: 'SHIFT_MODEL',
		});
	attributeInfoColor =  new ApiAttributeInfo<TimeStampApiShiftModel<ValidationMode>, string>({
			apiObjWrapper: this as any as TimeStampApiShiftModel<ValidationMode>,
			name: 'color',
			id: 'SHIFT_MODEL_COLOR',
			primitiveType: PApiPrimitiveTypes.string,
		});
	attributeInfoParentName =  new ApiAttributeInfo<TimeStampApiShiftModel<ValidationMode>, string>({
			apiObjWrapper: this as any as TimeStampApiShiftModel<ValidationMode>,
			name: 'parentName',
			id: 'SHIFT_MODEL_PARENT_NAME',
			primitiveType: PApiPrimitiveTypes.string,
		});
	attributeInfoName =  new ApiAttributeInfo<TimeStampApiShiftModel<ValidationMode>, string>({
			apiObjWrapper: this as any as TimeStampApiShiftModel<ValidationMode>,
			name: 'name',
			id: 'SHIFT_MODEL_NAME',
			primitiveType: PApiPrimitiveTypes.string,
		});
	attributeInfoTrashed =  new ApiAttributeInfo<TimeStampApiShiftModel<ValidationMode>, boolean>({
			apiObjWrapper: this as any as TimeStampApiShiftModel<ValidationMode>,
			name: 'trashed',
			id: 'SHIFT_MODEL_TRASHED',
			primitiveType: PApiPrimitiveTypes.boolean,
		});
	attributeInfoAssignable =  new ApiAttributeInfo<TimeStampApiShiftModel<ValidationMode>, boolean>({
			apiObjWrapper: this as any as TimeStampApiShiftModel<ValidationMode>,
			name: 'assignable',
			id: 'SHIFT_MODEL_ASSIGNABLE',
			primitiveType: PApiPrimitiveTypes.boolean,
		});

	/**
     *  Color of shift model in format "rrggbb".
	 *
	 * @type {string}
     */
	get color() : NullableInDraftMode<string, ValidationMode> {
		return this.data[1];
	}

	set color(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(1, v, 'color');
	}

	private timeWrapper : TimeStampApiShiftModelTime<ValidationMode> = new TimeStampApiShiftModelTime<ValidationMode>(this.api);

	/**
     *  The time when this shift-model will start (relative to current day).
     */
	get time() : TimeStampApiShiftModelTime<ValidationMode> {
		return this.timeWrapper;
	}

	set timeTestSetter(v : TimeStampApiShiftModelTime<ValidationMode>) {
        this.setterImpl(2, v.rawData, 'time', () => {this.timeWrapper = v;});
	}

	/**
     *  Name of the parent.
	 *
	 * @type {string}
     */
	get parentName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[3];
	}

	set parentName(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(3, v, 'parentName');
	}

	/**
     *  Name of the shift model.
	 *
	 * @type {string}
     */
	get name() : NullableInDraftMode<string, ValidationMode> {
		return this.data[4];
	}

	set name(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(4, v, 'name');
	}

	/**
     *  Is this shift model trashed?
	 *
	 * @type {boolean}
     */
	get trashed() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[5];
	}

	set trashed(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(5, v, 'trashed');
	}

	/**
     *  Is the requester assignable to this shift-model?
	 *
	 * @type {boolean}
     */
	get assignable() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[6];
	}

	set assignable(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(6, v, 'assignable');
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
		this.timeWrapper._fixIds(_idReplacements);
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 7);

			if(data[2] === null)
				data[2] = Meta.createNewObject(false);
			data[5] = false;
			data[6] = false;
		}

		// propagate new raw data to children
		this.timeWrapper._updateRawData(data ? data[2] : null, generateMissingData);
	}

	protected get dni() : string {
		return '22';
	}

	static loadDetailed(	api : TimeStampApiServiceBase<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '22', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is TimeStampApiShiftModel<'validated'> {
		// TODO: PLANO-151346
	}
}

		 
export class TimeStampApiShiftModelTime<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	override parent : any = null;

	constructor(override readonly api : TimeStampApiServiceBase<ValidationMode> | null, idRaw : any = null) {
		super(api, TimeStampApiShiftModelTime as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<TimeStampApiShiftModelTime<ValidationMode>, TimeStampApiShiftModelTime<ValidationMode>> = new ApiAttributeInfo<TimeStampApiShiftModelTime<ValidationMode>, TimeStampApiShiftModelTime<ValidationMode>>({
			apiObjWrapper: this as any as TimeStampApiShiftModelTime<ValidationMode>,
			name: 'time',
			id: 'SHIFT_MODEL_TIME',
		});
	attributeInfoStart =  new ApiAttributeInfo<TimeStampApiShiftModelTime<ValidationMode>, LocalTime>({
			apiObjWrapper: this as any as TimeStampApiShiftModelTime<ValidationMode>,
			name: 'start',
			id: 'SHIFT_MODEL_TIME_START',
			primitiveType: PApiPrimitiveTypes.LocalTime,
		});

	/**
     *  The time when this shift-model will start as milliseconds since the start of the day.
	 *
	 * @type {LocalTime}
     */
	get start() : NullableInDraftMode<LocalTime, ValidationMode> {
		return this.data[1];
	}

	set start(v : NullableInDraftMode<LocalTime, ValidationMode>) {
        this.setterImpl(1, v, 'start');
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 2);

		}

		// propagate new raw data to children
	}

	protected get dni() : string {
		return '24';
	}

	static loadDetailed(	api : TimeStampApiServiceBase<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '24', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is TimeStampApiShiftModelTime<'validated'> {
		// TODO: PLANO-151346
	}
}

		 export class TimeStampApiStampedMembers<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	override parent : any = null;

	constructor(override readonly api : TimeStampApiServiceBase<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, 'stampedMembers');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : TimeStampApiStampedMember<ValidationMode> {
		const newWrapper = new TimeStampApiStampedMember<ValidationMode>(this.api);
		newWrapper._updateRawData(item, _generateMissingData);
		return newWrapper;
	}

	protected containsPrimitives() : boolean {
		return false;
	}

	protected containsIds() : boolean {
		return false;
	}

	protected createInstance(removeDestroyedItems : boolean) : TimeStampApiStampedMembers<ValidationMode> {
		return new TimeStampApiStampedMembers<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '12';
	}

	override createNewItem(id : Id | null = null) : TimeStampApiStampedMember<ValidationMode> {
		const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('stampedMembers');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<TimeStampApiStampedMembers<ValidationMode>, TimeStampApiStampedMembers<ValidationMode>> = new ApiAttributeInfo<TimeStampApiStampedMembers<ValidationMode>, TimeStampApiStampedMembers<ValidationMode>>({
			apiObjWrapper: this as any as TimeStampApiStampedMembers<ValidationMode>,
			name: 'stampedMembers',
			id: 'STAMPED_MEMBERS',
			primitiveType: PApiPrimitiveTypes.ApiList,
		});
}

				 
export class TimeStampApiStampedMemberBase<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	override parent : any = null;

	constructor(override readonly api : TimeStampApiServiceBase<ValidationMode> | null, idRaw : any = null) {
		super(api, TimeStampApiStampedMember as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<TimeStampApiStampedMember<ValidationMode>, TimeStampApiStampedMember<ValidationMode>> = new ApiAttributeInfo<TimeStampApiStampedMember<ValidationMode>, TimeStampApiStampedMember<ValidationMode>>({
			apiObjWrapper: this as any as TimeStampApiStampedMember<ValidationMode>,
			name: 'stampedMember',
			id: 'STAMPED_MEMBER',
		});
	attributeInfoFirstName =  new ApiAttributeInfo<TimeStampApiStampedMember<ValidationMode>, string>({
			apiObjWrapper: this as any as TimeStampApiStampedMember<ValidationMode>,
			name: 'firstName',
			id: 'STAMPED_MEMBER_FIRST_NAME',
			primitiveType: PApiPrimitiveTypes.string,
		});
	attributeInfoLastName =  new ApiAttributeInfo<TimeStampApiStampedMember<ValidationMode>, string>({
			apiObjWrapper: this as any as TimeStampApiStampedMember<ValidationMode>,
			name: 'lastName',
			id: 'STAMPED_MEMBER_LAST_NAME',
			primitiveType: PApiPrimitiveTypes.string,
		});
	attributeInfoPausing =  new ApiAttributeInfo<TimeStampApiStampedMember<ValidationMode>, boolean>({
			apiObjWrapper: this as any as TimeStampApiStampedMember<ValidationMode>,
			name: 'pausing',
			id: 'STAMPED_MEMBER_PAUSING',
			primitiveType: PApiPrimitiveTypes.boolean,
		});
	attributeInfoActivityStart =  new ApiAttributeInfo<TimeStampApiStampedMember<ValidationMode>, DateTime>({
			apiObjWrapper: this as any as TimeStampApiStampedMember<ValidationMode>,
			name: 'activityStart',
			id: 'STAMPED_MEMBER_ACTIVITY_START',
			primitiveType: PApiPrimitiveTypes.DateTime,
		});

	/**
     *  First-name of the stamped member.
	 *
	 * @type {string}
     */
	get firstName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[1];
	}

	set firstName(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(1, v, 'firstName');
	}

	/**
     *  Last-name of the stamped member.
	 *
	 * @type {string}
     */
	get lastName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[2];
	}

	set lastName(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(2, v, 'lastName');
	}

	/**
     *  Type: Boolean. Is the member taking a pause now? If not then the member is working at the moment.
	 *
	 * @type {boolean}
     */
	get pausing() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[3];
	}

	set pausing(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(3, v, 'pausing');
	}

	/**
     *  Duration between this date-time and current time represents the duration of current activity (pause/working).
	 *
	 * @type {DateTime}
     */
	get activityStart() : NullableInDraftMode<DateTime, ValidationMode> {
		return this.data[4];
	}

	set activityStart(v : NullableInDraftMode<DateTime, ValidationMode>) {
        this.setterImpl(4, v, 'activityStart');
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 5);

			data[3] = false;
		}

		// propagate new raw data to children
	}

	protected get dni() : string {
		return '30';
	}

	static loadDetailed(	api : TimeStampApiServiceBase<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '30', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is TimeStampApiStampedMember<'validated'> {
		// TODO: PLANO-151346
	}
}

		 export class TimeStampApiAllowedTimeStampDevicesBase<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	override parent : any = null;

	constructor(override readonly api : TimeStampApiServiceBase<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, 'allowedTimeStampDevices');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : TimeStampApiAllowedTimeStampDevice<ValidationMode> {
		const newWrapper = new TimeStampApiAllowedTimeStampDevice<ValidationMode>(this.api);
		newWrapper._updateRawData(item, _generateMissingData);
		return newWrapper;
	}

	protected containsPrimitives() : boolean {
		return false;
	}

	protected containsIds() : boolean {
		return false;
	}

	protected createInstance(removeDestroyedItems : boolean) : TimeStampApiAllowedTimeStampDevices<ValidationMode> {
		return new TimeStampApiAllowedTimeStampDevices<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '13';
	}

	override createNewItem(id : Id | null = null) : TimeStampApiAllowedTimeStampDevice<ValidationMode> {
		const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('allowedTimeStampDevices');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<TimeStampApiAllowedTimeStampDevices<ValidationMode>, TimeStampApiAllowedTimeStampDevices<ValidationMode>> = new ApiAttributeInfo<TimeStampApiAllowedTimeStampDevices<ValidationMode>, TimeStampApiAllowedTimeStampDevices<ValidationMode>>({
			apiObjWrapper: this as any as TimeStampApiAllowedTimeStampDevices<ValidationMode>,
			name: 'allowedTimeStampDevices',
			id: 'ALLOWED_TIME_STAMP_DEVICES',
			primitiveType: PApiPrimitiveTypes.ApiList,
			canEdit: function(this : TimeStampApiAllowedTimeStampDevices<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : TimeStampApiAllowedTimeStampDevices<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
		});
}

				 
export class TimeStampApiAllowedTimeStampDeviceBase<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	override parent : any = null;

	constructor(override readonly api : TimeStampApiServiceBase<ValidationMode> | null, idRaw : any = null) {
		super(api, TimeStampApiAllowedTimeStampDevice as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<TimeStampApiAllowedTimeStampDevice<ValidationMode>, TimeStampApiAllowedTimeStampDevice<ValidationMode>> = new ApiAttributeInfo<TimeStampApiAllowedTimeStampDevice<ValidationMode>, TimeStampApiAllowedTimeStampDevice<ValidationMode>>({
			apiObjWrapper: this as any as TimeStampApiAllowedTimeStampDevice<ValidationMode>,
			name: 'allowedTimeStampDevice',
			id: 'ALLOWED_TIME_STAMP_DEVICE',
		});
	attributeInfoName =  new ApiAttributeInfo<TimeStampApiAllowedTimeStampDevice<ValidationMode>, string>({
			apiObjWrapper: this as any as TimeStampApiAllowedTimeStampDevice<ValidationMode>,
			name: 'name',
			id: 'ALLOWED_TIME_STAMP_DEVICE_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			canEdit: function(this : TimeStampApiAllowedTimeStampDevice<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : TimeStampApiAllowedTimeStampDevice<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
		});
	attributeInfoVisitorId =  new ApiAttributeInfo<TimeStampApiAllowedTimeStampDevice<ValidationMode>, string>({
			apiObjWrapper: this as any as TimeStampApiAllowedTimeStampDevice<ValidationMode>,
			name: 'visitorId',
			id: 'ALLOWED_TIME_STAMP_DEVICE_VISITOR_ID',
			primitiveType: PApiPrimitiveTypes.string,
		});
	attributeInfoBrowserName =  new ApiAttributeInfo<TimeStampApiAllowedTimeStampDevice<ValidationMode>, string>({
			apiObjWrapper: this as any as TimeStampApiAllowedTimeStampDevice<ValidationMode>,
			name: 'browserName',
			id: 'ALLOWED_TIME_STAMP_DEVICE_BROWSER_NAME',
			primitiveType: PApiPrimitiveTypes.string,
		});

	/**
     *  User-given name for the device.
	 *
	 * @type {string}
     */
	get name() : NullableInDraftMode<string, ValidationMode> {
		return this.data[1];
	}

	set name(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(1, v, 'name');
	}

	/**
     *  The unique device id.
	 *
	 * @type {string}
     */
	get visitorId() : NullableInDraftMode<string, ValidationMode> {
		return this.data[2];
	}

	set visitorId(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(2, v, 'visitorId');
	}

	/**
     *  Browser name.
	 *
	 * @type {string}
     */
	get browserName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[3];
	}

	set browserName(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(3, v, 'browserName');
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 4);

		}

		// propagate new raw data to children
	}

	protected get dni() : string {
		return '35';
	}

	static loadDetailed(	api : TimeStampApiServiceBase<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '35', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is TimeStampApiAllowedTimeStampDevice<'validated'> {
		// TODO: PLANO-151346
	}
}



