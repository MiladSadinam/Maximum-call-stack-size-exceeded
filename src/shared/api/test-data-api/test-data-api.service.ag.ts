import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase, INITIALIZED_IN_BACKEND, NullableInDraftMode } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiSaveArgs, ApiLoadArgs, ShiftId, ShiftSelector, ApiListWrapper, SchedulingApiPosSystem, SchedulingApiBooking, SchedulingApiAccountHolderState, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { DateTime, Date, DateExclusiveEnd, LocalTime, Duration, Minutes, Hours, Days, Months, Years, Percent, Email, Search, Tel, Currency, Password, PostalCode, Integer, Url, Iban, Bic, Image } from '@plano/shared/api/base/generated-types.ag';
import { Config } from '@plano/shared/core/config';
import { AbstractControl } from '@angular/forms';
import { ApiErrorService } from '@plano/shared/api/api-error.service';



/**
 * This service enables access to the api "admin/test_data".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */

// constants
class Consts
{
	COUNTRIES = 1;
	CREATED_CLIENT_IDS = 2;
	CREATED_CLIENT_OWNER_EMAILS = 3;
}


@Injectable({
  providedIn: 'root',
})
export class TestDataApiService<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiBase
{
	consts = new Consts();

	constructor(h : HttpClient
			,	router : Router
			,	apiE : ApiErrorService
			,	zone : NgZone
			,	injector : Injector) {
		super(h, router, apiE, zone, injector, 'admin/test_data');
	}

	protected version() : string {
		return 'ac3dca8ad0d4ce72beed2b966c969aa9,8e2e06858be0c993adca2672aee5e9bb';
	}

	private dataWrapper = new TestDataApiRoot<ValidationMode>(this);

	get data() : TestDataApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected getRootWrapper() : TestDataApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected recreateRootWrapper() : void {
		this.dataWrapper = new TestDataApiRoot<ValidationMode>(this);
	}
}

		 
export class TestDataApiRoot<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	

	constructor(override readonly api : TestDataApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, TestDataApiRoot as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
		this.countriesWrapper.parent = this as any as TestDataApiRoot<ValidationMode>;
		this.createdClientIdsWrapper.parent = this as any as TestDataApiRoot<ValidationMode>;
		this.createdClientOwnerEmailsWrapper.parent = this as any as TestDataApiRoot<ValidationMode>;
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<TestDataApiRoot<ValidationMode>, TestDataApiRoot<ValidationMode>> = new ApiAttributeInfo<TestDataApiRoot<ValidationMode>, TestDataApiRoot<ValidationMode>>({
			apiObjWrapper: this as any as TestDataApiRoot<ValidationMode>,
			name: '',
			id: 'ROOT',
			show: function(this : TestDataApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : TestDataApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : TestDataApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN)) )))
		{
			return true;
		}
				return false;
			},
		});

	private countriesWrapper : TestDataApiCountries<ValidationMode> = new TestDataApiCountries<ValidationMode>(this.api, false);

	/**
     *  For which countries should a test client be created?
     */
	get countries() : TestDataApiCountries<ValidationMode> {
		return this.countriesWrapper;
	}

	set countriesTestSetter(v : TestDataApiCountries<ValidationMode>) {
        this.setterImpl(1, v.rawData, 'countries', () => {this.countriesWrapper = v;});
	}

	private createdClientIdsWrapper : TestDataApiCreatedClientIds<ValidationMode> = new TestDataApiCreatedClientIds<ValidationMode>(this.api, false);

	/**
     *  Returns here the ids of the created clients
     */
	get createdClientIds() : TestDataApiCreatedClientIds<ValidationMode> {
		return this.createdClientIdsWrapper;
	}

	set createdClientIdsTestSetter(v : TestDataApiCreatedClientIds<ValidationMode>) {
        this.setterImpl(2, v.rawData, 'createdClientIds', () => {this.createdClientIdsWrapper = v;});
	}

	private createdClientOwnerEmailsWrapper : TestDataApiCreatedClientOwnerEmails<ValidationMode> = new TestDataApiCreatedClientOwnerEmails<ValidationMode>(this.api, false);

	/**
     *  Returns here the email addresses of the client-owners created for these clients.
     */
	get createdClientOwnerEmails() : TestDataApiCreatedClientOwnerEmails<ValidationMode> {
		return this.createdClientOwnerEmailsWrapper;
	}

	set createdClientOwnerEmailsTestSetter(v : TestDataApiCreatedClientOwnerEmails<ValidationMode>) {
        this.setterImpl(3, v.rawData, 'createdClientOwnerEmails', () => {this.createdClientOwnerEmailsWrapper = v;});
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
		this.countriesWrapper._fixIds(_idReplacements);
		this.createdClientIdsWrapper._fixIds(_idReplacements);
		this.createdClientOwnerEmailsWrapper._fixIds(_idReplacements);
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 4);

			if(data[1] === null)
				data[1] = Meta.createNewList();
			if(data[2] === null)
				data[2] = Meta.createNewList();
			if(data[3] === null)
				data[3] = Meta.createNewList();
		}

		// propagate new raw data to children
		this.countriesWrapper._updateRawData(data ? data[1] : null, generateMissingData);
		this.createdClientIdsWrapper._updateRawData(data ? data[2] : null, generateMissingData);
		this.createdClientOwnerEmailsWrapper._updateRawData(data ? data[3] : null, generateMissingData);
	}

	protected get dni() : string {
		return '1';
	}

	static loadDetailed(	api : TestDataApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is TestDataApiRoot<'validated'> {
		// TODO: PLANO-151346
	}
}

		 export class TestDataApiCountries<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	override parent : any = null;

	constructor(override readonly api : TestDataApiService<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, 'countries');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : TestDataApiCountry {
		return item;
	}

	protected containsPrimitives() : boolean {
		return true;
	}

	protected containsIds() : boolean {
		return false;
	}

	protected createInstance(removeDestroyedItems : boolean) : TestDataApiCountries<ValidationMode> {
		return new TestDataApiCountries<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '2';
	}

	override createNewItem() : TestDataApiCountry {
		const newItemRaw = null;

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('countries');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<TestDataApiCountries<ValidationMode>, TestDataApiCountries<ValidationMode>> = new ApiAttributeInfo<TestDataApiCountries<ValidationMode>, TestDataApiCountries<ValidationMode>>({
			apiObjWrapper: this as any as TestDataApiCountries<ValidationMode>,
			name: 'countries',
			id: 'COUNTRIES',
			primitiveType: PApiPrimitiveTypes.ApiList,
		});
	attributeInfoCountry =  new ApiAttributeInfo<TestDataApiCountries<ValidationMode>, TestDataApiCountry>({
			apiObjWrapper: this as any as TestDataApiCountries<ValidationMode>,
			name: 'country',
			id: 'COUNTRY',
			primitiveType: PApiPrimitiveTypes.Enum,
		});
}

		export enum TestDataApiCountry {
	GERMANY = 1,
	AUSTRIA = 2,
	SWITZERLAND = 3,
	NETHERLANDS = 4,
	BELGIUM = 5,
	UNITED_KINGDOM = 6,
	CZECH_REPUBLIC = 7,
	SWEDEN = 8,
	LUXEMBOURG = 9,
}
		 export class TestDataApiCreatedClientIds<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	override parent : any = null;

	constructor(override readonly api : TestDataApiService<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, 'createdClientIds');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : Id {
		return Id.create(item);
	}

	protected containsPrimitives() : boolean {
		return false;
	}

	protected containsIds() : boolean {
		return true;
	}

	protected createInstance(removeDestroyedItems : boolean) : TestDataApiCreatedClientIds<ValidationMode> {
		return new TestDataApiCreatedClientIds<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '3';
	}

	override createNewItem() : Id {
		const newItemRaw = null;

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('createdClientIds');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<TestDataApiCreatedClientIds<ValidationMode>, TestDataApiCreatedClientIds<ValidationMode>> = new ApiAttributeInfo<TestDataApiCreatedClientIds<ValidationMode>, TestDataApiCreatedClientIds<ValidationMode>>({
			apiObjWrapper: this as any as TestDataApiCreatedClientIds<ValidationMode>,
			name: 'createdClientIds',
			id: 'CREATED_CLIENT_IDS',
			primitiveType: PApiPrimitiveTypes.ApiList,
		});
	attributeInfoCreatedClientId =  new ApiAttributeInfo<TestDataApiCreatedClientIds<ValidationMode>, Id>({
			apiObjWrapper: this as any as TestDataApiCreatedClientIds<ValidationMode>,
			name: 'createdClientId',
			id: 'CREATED_CLIENT_ID',
			primitiveType: PApiPrimitiveTypes.Id,
		});
}

				 export class TestDataApiCreatedClientOwnerEmails<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	override parent : any = null;

	constructor(override readonly api : TestDataApiService<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, 'createdClientOwnerEmails');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : Email {
		return item;
	}

	protected containsPrimitives() : boolean {
		return true;
	}

	protected containsIds() : boolean {
		return false;
	}

	protected createInstance(removeDestroyedItems : boolean) : TestDataApiCreatedClientOwnerEmails<ValidationMode> {
		return new TestDataApiCreatedClientOwnerEmails<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '4';
	}

	override createNewItem() : Email {
		const newItemRaw = null;

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('createdClientOwnerEmails');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<TestDataApiCreatedClientOwnerEmails<ValidationMode>, TestDataApiCreatedClientOwnerEmails<ValidationMode>> = new ApiAttributeInfo<TestDataApiCreatedClientOwnerEmails<ValidationMode>, TestDataApiCreatedClientOwnerEmails<ValidationMode>>({
			apiObjWrapper: this as any as TestDataApiCreatedClientOwnerEmails<ValidationMode>,
			name: 'createdClientOwnerEmails',
			id: 'CREATED_CLIENT_OWNER_EMAILS',
			primitiveType: PApiPrimitiveTypes.ApiList,
		});
	attributeInfoCreatedClientOwnerEmail =  new ApiAttributeInfo<TestDataApiCreatedClientOwnerEmails<ValidationMode>, Email>({
			apiObjWrapper: this as any as TestDataApiCreatedClientOwnerEmails<ValidationMode>,
			name: 'createdClientOwnerEmail',
			id: 'CREATED_CLIENT_OWNER_EMAIL',
			primitiveType: PApiPrimitiveTypes.Email,
		});
}

		

