import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase, INITIALIZED_IN_BACKEND, NullableInDraftMode } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiSaveArgs, ApiLoadArgs, ShiftId, ShiftSelector, ApiListWrapper, SchedulingApiPosSystem, SchedulingApiBooking, SchedulingApiAccountHolderState, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { DateTime, Date, DateExclusiveEnd, LocalTime, Duration, Minutes, Hours, Days, Months, Years, Percent, Email, Search, Tel, Currency, Password, PostalCode, Integer, Url, Iban, Bic, Image } from '@plano/shared/api/base/generated-types.ag';
import { Config } from '@plano/shared/core/config';
import { AbstractControl } from '@angular/forms';
import { ApiErrorService } from '@plano/shared/api/api-error.service';

import { AffectedShiftsApiShifts } from '@plano/shared/api';
import { AffectedShiftsApiShift } from '@plano/shared/api';


/**
 * This service enables access to the api "affected_shifts".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */

// constants
class Consts
{
	SHIFTS = 1;
	BOOKINGS_CANCELED_COUNT = 2;
	BOOKINGS_DECLINED_COUNT = 3;
	SHIFT_START = 1;
	SHIFT_END = 2;
	SHIFT_ASSIGNED_MEMBER_IDS = 3;
	SHIFT_NEEDED_MEMBERS_COUNT = 4;
	SHIFT_IS_COURSE_CANCELED = 5;
	SHIFT_IS_COURSE_ONLINE = 6;
	SHIFT_MIN_COURSE_PARTICIPANT_COUNT = 7;
	SHIFT_MAX_COURSE_PARTICIPANT_COUNT = 8;
	SHIFT_CURRENT_COURSE_PARTICIPANT_COUNT = 9;
}


@Injectable({
  providedIn: 'root',
})
export class AffectedShiftsApiService<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiBase
{
	consts = new Consts();

	constructor(h : HttpClient
			,	router : Router
			,	apiE : ApiErrorService
			,	zone : NgZone
			,	injector : Injector) {
		super(h, router, apiE, zone, injector, 'affected_shifts');
	}

	protected version() : string {
		return 'd2cae532b6c8edea4aeadb7fd524c681,ef61221c724096ec9771da9826c58e53';
	}

	private dataWrapper = new AffectedShiftsApiRoot<ValidationMode>(this);

	get data() : AffectedShiftsApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected getRootWrapper() : AffectedShiftsApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected recreateRootWrapper() : void {
		this.dataWrapper = new AffectedShiftsApiRoot<ValidationMode>(this);
	}
}

		 
export class AffectedShiftsApiRoot<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	

	constructor(override readonly api : AffectedShiftsApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, AffectedShiftsApiRoot as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
		this.shiftsWrapper.parent = this as any as AffectedShiftsApiRoot<ValidationMode>;
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<AffectedShiftsApiRoot<ValidationMode>, AffectedShiftsApiRoot<ValidationMode>> = new ApiAttributeInfo<AffectedShiftsApiRoot<ValidationMode>, AffectedShiftsApiRoot<ValidationMode>>({
			apiObjWrapper: this as any as AffectedShiftsApiRoot<ValidationMode>,
			name: '',
			id: 'ROOT',
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoBookingsCanceledCount =  new ApiAttributeInfo<AffectedShiftsApiRoot<ValidationMode>, Integer>({
			apiObjWrapper: this as any as AffectedShiftsApiRoot<ValidationMode>,
			name: 'bookingsCanceledCount',
			id: 'BOOKINGS_CANCELED_COUNT',
			primitiveType: PApiPrimitiveTypes.Integer,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoBookingsDeclinedCount =  new ApiAttributeInfo<AffectedShiftsApiRoot<ValidationMode>, Integer>({
			apiObjWrapper: this as any as AffectedShiftsApiRoot<ValidationMode>,
			name: 'bookingsDeclinedCount',
			id: 'BOOKINGS_DECLINED_COUNT',
			primitiveType: PApiPrimitiveTypes.Integer,
			canEdit: () => false,
			readMode: () => true,
		});

	private shiftsWrapper : AffectedShiftsApiShifts<ValidationMode> = new AffectedShiftsApiShifts<ValidationMode>(this.api, false);

	/**
     *  List of affected shifts. This list only returns the shifts which are in the interval defined by the query-parameters "start" and "end".
     */
	get shifts() : AffectedShiftsApiShifts<ValidationMode> {
		return this.shiftsWrapper;
	}

	set shiftsTestSetter(v : AffectedShiftsApiShifts<ValidationMode>) {
        this.setterImpl(1, v.rawData, 'shifts', () => {this.shiftsWrapper = v;});
	}

	/**
     *  How many bookings will be canceled? Those will have the previous state "BOOKED". Always sends 0 when "action" query-parameter is "other". This value is not affected by the query parameters "start" and "end".
	 *
	 * @type {Integer}
     */
	get bookingsCanceledCount() : NullableInDraftMode<Integer, ValidationMode> {
		return this.data[2];
	}

	set bookingsCanceledCountTestSetter(v : NullableInDraftMode<Integer, ValidationMode>) {
        this.setterImpl(2, v, 'bookingsCanceledCount');
	}

	/**
     *  How many bookings will be declined? Those will have the previous state "INQUIRY". Always sends 0 when "action" query-parameter is "other". This value is not affected by the query parameters "start" and "end".
	 *
	 * @type {Integer}
     */
	get bookingsDeclinedCount() : NullableInDraftMode<Integer, ValidationMode> {
		return this.data[3];
	}

	set bookingsDeclinedCountTestSetter(v : NullableInDraftMode<Integer, ValidationMode>) {
        this.setterImpl(3, v, 'bookingsDeclinedCount');
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
		this.shiftsWrapper._fixIds(_idReplacements);
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 4);

			if(data[1] === null)
				data[1] = Meta.createNewList();
		}

		// propagate new raw data to children
		this.shiftsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
	}

	protected get dni() : string {
		return '1';
	}

	static loadDetailed(	api : AffectedShiftsApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is AffectedShiftsApiRoot<'validated'> {
		// TODO: PLANO-151346
	}
}

		 export class AffectedShiftsApiShiftsBase<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	override parent : any = null;

	constructor(override readonly api : AffectedShiftsApiService<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, 'shifts');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : AffectedShiftsApiShift<ValidationMode> {
		const newWrapper = new AffectedShiftsApiShift<ValidationMode>(this.api);
		newWrapper._updateRawData(item, _generateMissingData);
		return newWrapper;
	}

	protected containsPrimitives() : boolean {
		return false;
	}

	protected containsIds() : boolean {
		return false;
	}

	protected createInstance(removeDestroyedItems : boolean) : AffectedShiftsApiShifts<ValidationMode> {
		return new AffectedShiftsApiShifts<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '2';
	}

	override createNewItem(id : Id | null = null) : AffectedShiftsApiShift<ValidationMode> {
		const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('shifts');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<AffectedShiftsApiShifts<ValidationMode>, AffectedShiftsApiShifts<ValidationMode>> = new ApiAttributeInfo<AffectedShiftsApiShifts<ValidationMode>, AffectedShiftsApiShifts<ValidationMode>>({
			apiObjWrapper: this as any as AffectedShiftsApiShifts<ValidationMode>,
			name: 'shifts',
			id: 'SHIFTS',
			primitiveType: PApiPrimitiveTypes.ApiList,
			canEdit: () => false,
			readMode: () => true,
		});
}

				 
export class AffectedShiftsApiShiftBase<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	override parent : any = null;

	constructor(override readonly api : AffectedShiftsApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, AffectedShiftsApiShift as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
		this.assignedMemberIdsWrapper.parent = this as any as AffectedShiftsApiShift<ValidationMode>;
	}


	private _id : ShiftId | null = null;
	get id() : ShiftId {
		return this._id !== null ? this._id : ShiftId.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<AffectedShiftsApiShift<ValidationMode>, AffectedShiftsApiShift<ValidationMode>> = new ApiAttributeInfo<AffectedShiftsApiShift<ValidationMode>, AffectedShiftsApiShift<ValidationMode>>({
			apiObjWrapper: this as any as AffectedShiftsApiShift<ValidationMode>,
			name: 'shift',
			id: 'SHIFT',
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoStart =  new ApiAttributeInfo<AffectedShiftsApiShift<ValidationMode>, DateTime>({
			apiObjWrapper: this as any as AffectedShiftsApiShift<ValidationMode>,
			name: 'start',
			id: 'SHIFT_START',
			primitiveType: PApiPrimitiveTypes.DateTime,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoEnd =  new ApiAttributeInfo<AffectedShiftsApiShift<ValidationMode>, DateTime>({
			apiObjWrapper: this as any as AffectedShiftsApiShift<ValidationMode>,
			name: 'end',
			id: 'SHIFT_END',
			primitiveType: PApiPrimitiveTypes.DateTime,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoNeededMembersCount =  new ApiAttributeInfo<AffectedShiftsApiShift<ValidationMode>, Integer>({
			apiObjWrapper: this as any as AffectedShiftsApiShift<ValidationMode>,
			name: 'neededMembersCount',
			id: 'SHIFT_NEEDED_MEMBERS_COUNT',
			primitiveType: PApiPrimitiveTypes.Integer,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoIsCourseCanceled =  new ApiAttributeInfo<AffectedShiftsApiShift<ValidationMode>, boolean>({
			apiObjWrapper: this as any as AffectedShiftsApiShift<ValidationMode>,
			name: 'isCourseCanceled',
			id: 'SHIFT_IS_COURSE_CANCELED',
			primitiveType: PApiPrimitiveTypes.boolean,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoIsCourseOnline =  new ApiAttributeInfo<AffectedShiftsApiShift<ValidationMode>, boolean>({
			apiObjWrapper: this as any as AffectedShiftsApiShift<ValidationMode>,
			name: 'isCourseOnline',
			id: 'SHIFT_IS_COURSE_ONLINE',
			primitiveType: PApiPrimitiveTypes.boolean,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoMinCourseParticipantCount =  new ApiAttributeInfo<AffectedShiftsApiShift<ValidationMode>, Integer>({
			apiObjWrapper: this as any as AffectedShiftsApiShift<ValidationMode>,
			name: 'minCourseParticipantCount',
			id: 'SHIFT_MIN_COURSE_PARTICIPANT_COUNT',
			primitiveType: PApiPrimitiveTypes.Integer,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoMaxCourseParticipantCount =  new ApiAttributeInfo<AffectedShiftsApiShift<ValidationMode>, Integer>({
			apiObjWrapper: this as any as AffectedShiftsApiShift<ValidationMode>,
			name: 'maxCourseParticipantCount',
			id: 'SHIFT_MAX_COURSE_PARTICIPANT_COUNT',
			primitiveType: PApiPrimitiveTypes.Integer,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoCurrentCourseParticipantCount =  new ApiAttributeInfo<AffectedShiftsApiShift<ValidationMode>, Integer>({
			apiObjWrapper: this as any as AffectedShiftsApiShift<ValidationMode>,
			name: 'currentCourseParticipantCount',
			id: 'SHIFT_CURRENT_COURSE_PARTICIPANT_COUNT',
			primitiveType: PApiPrimitiveTypes.Integer,
			canEdit: () => false,
			readMode: () => true,
		});

	/**
     *  Start of shift (inclusive).
	 *
	 * @type {DateTime}
     */
	get start() : NullableInDraftMode<DateTime, ValidationMode> {
		return this.data[1];
	}

	set startTestSetter(v : NullableInDraftMode<DateTime, ValidationMode>) {
        this.setterImpl(1, v, 'start');
	}

	/**
     *  End of shift (exclusive).
	 *
	 * @type {DateTime}
     */
	get end() : NullableInDraftMode<DateTime, ValidationMode> {
		return this.data[2];
	}

	set endTestSetter(v : NullableInDraftMode<DateTime, ValidationMode>) {
        this.setterImpl(2, v, 'end');
	}

	private assignedMemberIdsWrapper : AffectedShiftsApiShiftAssignedMemberIds<ValidationMode> = new AffectedShiftsApiShiftAssignedMemberIds<ValidationMode>(this.api, false);

	/**
     *  A list of the assigned members' ids.
     */
	get assignedMemberIds() : AffectedShiftsApiShiftAssignedMemberIds<ValidationMode> {
		return this.assignedMemberIdsWrapper;
	}

	set assignedMemberIdsTestSetter(v : AffectedShiftsApiShiftAssignedMemberIds<ValidationMode>) {
        this.setterImpl(3, v.rawData, 'assignedMemberIds', () => {this.assignedMemberIdsWrapper = v;});
	}

	/**
     *  How many members should be assigned to this shift?
	 *
	 * @type {Integer}
     */
	get neededMembersCount() : NullableInDraftMode<Integer, ValidationMode> {
		return this.data[4];
	}

	set neededMembersCountTestSetter(v : NullableInDraftMode<Integer, ValidationMode>) {
        this.setterImpl(4, v, 'neededMembersCount');
	}

	/**
     *  Is the course canceled?
	 *
	 * @type {boolean}
     */
	get isCourseCanceled() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[5];
	}

	set isCourseCanceledTestSetter(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(5, v, 'isCourseCanceled');
	}

	/**
     *  Is the course online?
	 *
	 * @type {boolean}
     */
	get isCourseOnline() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[6];
	}

	set isCourseOnlineTestSetter(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(6, v, 'isCourseOnline');
	}

	/**
     *  Minimal course participant count.
	 *
	 * @type {Integer}
     */
	get minCourseParticipantCount() : NullableInDraftMode<Integer, ValidationMode> {
		return this.data[7];
	}

	set minCourseParticipantCountTestSetter(v : NullableInDraftMode<Integer, ValidationMode>) {
        this.setterImpl(7, v, 'minCourseParticipantCount');
	}

	/**
     *  Maximal course participant count.
	 *
	 * @type {Integer}
     */
	get maxCourseParticipantCount() : Integer | null {
		return this.data[8];
	}

	set maxCourseParticipantCountTestSetter(v : Integer | null) {
        this.setterImpl(8, v, 'maxCourseParticipantCount');
	}

	/**
     *  Current course participant count? Being determined by bookings.
	 *
	 * @type {Integer}
     */
	get currentCourseParticipantCount() : NullableInDraftMode<Integer, ValidationMode> {
		return this.data[9];
	}

	set currentCourseParticipantCountTestSetter(v : NullableInDraftMode<Integer, ValidationMode>) {
        this.setterImpl(9, v, 'currentCourseParticipantCount');
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
		this.assignedMemberIdsWrapper._fixIds(_idReplacements);
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : ShiftId.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 10);

			if(data[3] === null)
				data[3] = Meta.createNewList();
			data[5] = false;
			data[6] = false;
		}

		// propagate new raw data to children
		this.assignedMemberIdsWrapper._updateRawData(data ? data[3] : null, generateMissingData);
	}

	protected get dni() : string {
		return '5';
	}

	static loadDetailed(	api : AffectedShiftsApiService<any>
						,	id : ShiftId
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '5', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is AffectedShiftsApiShift<'validated'> {
		// TODO: PLANO-151346
	}
}

		 export class AffectedShiftsApiShiftAssignedMemberIds<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	override parent : any = null;

	constructor(override readonly api : AffectedShiftsApiService<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, 'assignedMemberIds');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : Id {
		return Id.create(item);
	}

	protected containsPrimitives() : boolean {
		return false;
	}

	protected containsIds() : boolean {
		return true;
	}

	protected createInstance(removeDestroyedItems : boolean) : AffectedShiftsApiShiftAssignedMemberIds<ValidationMode> {
		return new AffectedShiftsApiShiftAssignedMemberIds<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '8';
	}

	override createNewItem() : Id {
		const newItemRaw = null;

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('assignedMemberIds');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<AffectedShiftsApiShiftAssignedMemberIds<ValidationMode>, AffectedShiftsApiShiftAssignedMemberIds<ValidationMode>> = new ApiAttributeInfo<AffectedShiftsApiShiftAssignedMemberIds<ValidationMode>, AffectedShiftsApiShiftAssignedMemberIds<ValidationMode>>({
			apiObjWrapper: this as any as AffectedShiftsApiShiftAssignedMemberIds<ValidationMode>,
			name: 'assignedMemberIds',
			id: 'SHIFT_ASSIGNED_MEMBER_IDS',
			primitiveType: PApiPrimitiveTypes.ApiList,
			show: function(this : AffectedShiftsApiShiftAssignedMemberIds<ValidationMode>) {
			console.error('AttributeInfo for /affected_shifts -> SHIFT_ASSIGNED_MEMBER_IDS is not implemented yet. Please create a Jira issue in the current Sprint: https://drplano.atlassian.net/secure/CreateIssueDetails!init.jspa?pid=10003&issuetype=10101&summary=' + encodeURI('AttributeInfo for /affected_shifts -> SHIFT_ASSIGNED_MEMBER_IDS is not implemented yet') + '&assignee=557058%3Ae58fd015-3e1d-44b8-9131-aef274b1c571');
				return true;
			},
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoShiftAssignedMemberId =  new ApiAttributeInfo<AffectedShiftsApiShiftAssignedMemberIds<ValidationMode>, Id>({
			apiObjWrapper: this as any as AffectedShiftsApiShiftAssignedMemberIds<ValidationMode>,
			name: 'shiftAssignedMemberId',
			id: 'SHIFT_ASSIGNED_MEMBER_ID',
			primitiveType: PApiPrimitiveTypes.Id,
			canEdit: () => false,
			readMode: () => true,
		});
}

		

