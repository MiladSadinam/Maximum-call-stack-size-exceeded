import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase, INITIALIZED_IN_BACKEND, NullableInDraftMode } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiSaveArgs, ApiLoadArgs, ShiftId, ShiftSelector, ApiListWrapper, SchedulingApiPosSystem, SchedulingApiBooking, SchedulingApiAccountHolderState, ApiObjectWrapper } from '@plano/shared/api';
import { DateTime, Date, DateExclusiveEnd, LocalTime, Duration, Minutes, Hours, Days, Months, Years, Percent, Email, Search, Tel, Currency, Password, PostalCode, Integer, Url, Iban, Bic, Image } from '@plano/shared/api/base/generated-types.ag';
import { Config } from '@plano/shared/core/config';
import { AbstractControl } from '@angular/forms';
import { ApiErrorService } from '@plano/shared/api/api-error.service';

import { AuthenticatedApiRoot } from '@plano/shared/api';


/**
 * This service enables access to the api "authenticated".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */

// constants
class Consts
{
	LOCALE = 1;
	ROLE = 2;
	PHONE = 3;
	EMAIL = 4;
	FIRST_NAME = 5;
	LAST_NAME = 6;
	GENDER = 7;
	LOCATION_NAME = 8;
	COMPANY_NAME = 9;
	CLIENT_ID = 10;
	SECURE_TOKEN = 11;
	TEST_ACCOUNT_DEADLINE = 12;
	TAWK_HMAC = 13;
	CLIENT_TYPE = 14;
	LOGGED_IN_WITH_MASTER_PASSWORD = 15;
}


@Injectable({
  providedIn: 'root',
})
export class AuthenticatedApiService<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiBase
{
	consts = new Consts();

	constructor(h : HttpClient
			,	router : Router
			,	apiE : ApiErrorService
			,	zone : NgZone
			,	injector : Injector) {
		super(h, router, apiE, zone, injector, 'authenticated');
	}

	protected version() : string {
		return 'fcb0820dd6dee7a00bb15db69f2755eb,c6852a4d7ae7da600f407e43b5eb1246';
	}

	private dataWrapper = new AuthenticatedApiRoot<ValidationMode>(this);

	get data() : AuthenticatedApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected getRootWrapper() : AuthenticatedApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected recreateRootWrapper() : void {
		this.dataWrapper = new AuthenticatedApiRoot<ValidationMode>(this);
	}
}

		 
export class AuthenticatedApiRootBase<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	

	constructor(override readonly api : AuthenticatedApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, AuthenticatedApiRoot as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<AuthenticatedApiRoot<ValidationMode>, AuthenticatedApiRoot<ValidationMode>> = new ApiAttributeInfo<AuthenticatedApiRoot<ValidationMode>, AuthenticatedApiRoot<ValidationMode>>({
			apiObjWrapper: this as any as AuthenticatedApiRoot<ValidationMode>,
			name: '',
			id: 'ROOT',
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoLocale =  new ApiAttributeInfo<AuthenticatedApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AuthenticatedApiRoot<ValidationMode>,
			name: 'locale',
			id: 'LOCALE',
			primitiveType: PApiPrimitiveTypes.string,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoRole =  new ApiAttributeInfo<AuthenticatedApiRoot<ValidationMode>, AuthenticatedApiRole>({
			apiObjWrapper: this as any as AuthenticatedApiRoot<ValidationMode>,
			name: 'role',
			id: 'ROLE',
			primitiveType: PApiPrimitiveTypes.Enum,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoPhone =  new ApiAttributeInfo<AuthenticatedApiRoot<ValidationMode>, Tel>({
			apiObjWrapper: this as any as AuthenticatedApiRoot<ValidationMode>,
			name: 'phone',
			id: 'PHONE',
			primitiveType: PApiPrimitiveTypes.Tel,
			show: function(this : AuthenticatedApiRoot<ValidationMode>) {
 
		
				return true;
			},
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoEmail =  new ApiAttributeInfo<AuthenticatedApiRoot<ValidationMode>, Email>({
			apiObjWrapper: this as any as AuthenticatedApiRoot<ValidationMode>,
			name: 'email',
			id: 'EMAIL',
			primitiveType: PApiPrimitiveTypes.Email,
			show: function(this : AuthenticatedApiRoot<ValidationMode>) {
 
		
				return true;
			},
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoFirstName =  new ApiAttributeInfo<AuthenticatedApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AuthenticatedApiRoot<ValidationMode>,
			name: 'firstName',
			id: 'FIRST_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			show: function(this : AuthenticatedApiRoot<ValidationMode>) {
 
		
				return true;
			},
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoLastName =  new ApiAttributeInfo<AuthenticatedApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AuthenticatedApiRoot<ValidationMode>,
			name: 'lastName',
			id: 'LAST_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			show: function(this : AuthenticatedApiRoot<ValidationMode>) {
 
		
				return true;
			},
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoGender =  new ApiAttributeInfo<AuthenticatedApiRoot<ValidationMode>, AuthenticatedApiGender>({
			apiObjWrapper: this as any as AuthenticatedApiRoot<ValidationMode>,
			name: 'gender',
			id: 'GENDER',
			primitiveType: PApiPrimitiveTypes.Enum,
			show: function(this : AuthenticatedApiRoot<ValidationMode>) {
 
		
				return true;
			},
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoLocationName =  new ApiAttributeInfo<AuthenticatedApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AuthenticatedApiRoot<ValidationMode>,
			name: 'locationName',
			id: 'LOCATION_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			show: function(this : AuthenticatedApiRoot<ValidationMode>) {
 
		
				return true;
			},
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoCompanyName =  new ApiAttributeInfo<AuthenticatedApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AuthenticatedApiRoot<ValidationMode>,
			name: 'companyName',
			id: 'COMPANY_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			show: function(this : AuthenticatedApiRoot<ValidationMode>) {
 
		
				return true;
			},
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoClientId =  new ApiAttributeInfo<AuthenticatedApiRoot<ValidationMode>, Id>({
			apiObjWrapper: this as any as AuthenticatedApiRoot<ValidationMode>,
			name: 'clientId',
			id: 'CLIENT_ID',
			primitiveType: PApiPrimitiveTypes.Id,
			show: function(this : AuthenticatedApiRoot<ValidationMode>) {
 
		
				return true;
			},
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoSecureToken =  new ApiAttributeInfo<AuthenticatedApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AuthenticatedApiRoot<ValidationMode>,
			name: 'secureToken',
			id: 'SECURE_TOKEN',
			primitiveType: PApiPrimitiveTypes.string,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoTestAccountDeadline =  new ApiAttributeInfo<AuthenticatedApiRoot<ValidationMode>, DateTime>({
			apiObjWrapper: this as any as AuthenticatedApiRoot<ValidationMode>,
			name: 'testAccountDeadline',
			id: 'TEST_ACCOUNT_DEADLINE',
			primitiveType: PApiPrimitiveTypes.DateTime,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoTawkHmac =  new ApiAttributeInfo<AuthenticatedApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AuthenticatedApiRoot<ValidationMode>,
			name: 'tawkHmac',
			id: 'TAWK_HMAC',
			primitiveType: PApiPrimitiveTypes.string,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoClientType =  new ApiAttributeInfo<AuthenticatedApiRoot<ValidationMode>, AuthenticatedApiClientType>({
			apiObjWrapper: this as any as AuthenticatedApiRoot<ValidationMode>,
			name: 'clientType',
			id: 'CLIENT_TYPE',
			primitiveType: PApiPrimitiveTypes.Enum,
			show: function(this : AuthenticatedApiRoot<ValidationMode>) {
 
		
				return true;
			},
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoLoggedInWithMasterPassword =  new ApiAttributeInfo<AuthenticatedApiRoot<ValidationMode>, boolean>({
			apiObjWrapper: this as any as AuthenticatedApiRoot<ValidationMode>,
			name: 'loggedInWithMasterPassword',
			id: 'LOGGED_IN_WITH_MASTER_PASSWORD',
			primitiveType: PApiPrimitiveTypes.boolean,
			canEdit: () => false,
			readMode: () => true,
		});

	/**
     *  The locale of the user.
	 *
	 * @type {string}
     */
	get locale() : NullableInDraftMode<string, ValidationMode> {
		return this.data[1];
	}

	set localeTestSetter(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(1, v, 'locale');
	}

	/**
     *  Role of authenticated entity.
	 *
	 * @type {AuthenticatedApiRole}
     */
	get role() : NullableInDraftMode<AuthenticatedApiRole, ValidationMode> {
		return this.data[2];
	}

	set roleTestSetter(v : NullableInDraftMode<AuthenticatedApiRole, ValidationMode>) {
        this.setterImpl(2, v, 'role');
	}

	/**
     *  Phone number of the user.
	 *
	 * @type {Tel}
     */
	get phone() : Tel | null {
		return this.data[3];
	}

	set phoneTestSetter(v : Tel | null) {
        this.setterImpl(3, v, 'phone');
	}

	/**
     *  Email address of the user.
	 *
	 * @type {Email}
     */
	get email() : NullableInDraftMode<Email, ValidationMode> {
		return this.data[4];
	}

	set emailTestSetter(v : NullableInDraftMode<Email, ValidationMode>) {
        this.setterImpl(4, v, 'email');
	}

	/**
     *  First name of the user.
	 *
	 * @type {string}
     */
	get firstName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[5];
	}

	set firstNameTestSetter(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(5, v, 'firstName');
	}

	/**
     *  Last name of the user.
	 *
	 * @type {string}
     */
	get lastName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[6];
	}

	set lastNameTestSetter(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(6, v, 'lastName');
	}

	/**
     *  The gender of the user.
	 *
	 * @type {AuthenticatedApiGender}
     */
	get gender() : NullableInDraftMode<AuthenticatedApiGender, ValidationMode> {
		return this.data[7];
	}

	set genderTestSetter(v : NullableInDraftMode<AuthenticatedApiGender, ValidationMode>) {
        this.setterImpl(7, v, 'gender');
	}

	/**
     *  Public location name. Read-only.
	 *
	 * @type {string}
     */
	get locationName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[8];
	}

	set locationNameTestSetter(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(8, v, 'locationName');
	}

	/**
     *  Public location name. Read-only.
	 *
	 * @type {string}
     */
	get companyName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[9];
	}

	set companyNameTestSetter(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(9, v, 'companyName');
	}

	private clientIdWrapper : NullableInDraftMode<Id, ValidationMode> = null!;

	/**
     *  The client id of this authenticated. Read-only. "null" is returned if this authenticated is not associated with a client.
	 *
	 * @type {Id}
     */
	get clientId() : NullableInDraftMode<Id, ValidationMode> {
		return this.clientIdWrapper;
	}

	set clientIdTestSetter(v : NullableInDraftMode<Id, ValidationMode>) {
        this.setterImpl(10, v, 'clientId', () => {this.clientIdWrapper = v;});
	}

	/**
     *  The secure token of this user. Read-only.
	 *
	 * @type {string}
     */
	get secureToken() : NullableInDraftMode<string, ValidationMode> {
		return this.data[11];
	}

	set secureTokenTestSetter(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(11, v, 'secureToken');
	}

	/**
     *  Deadline of the test account. "null" is returned if this is a paid account. Read-only.
	 *
	 * @type {DateTime}
     */
	get testAccountDeadline() : DateTime | null {
		return this.data[12];
	}

	set testAccountDeadlineTestSetter(v : DateTime | null) {
        this.setterImpl(12, v, 'testAccountDeadline');
	}

	/**
     *  Hmac value being needed to use the tawk javascript api.
	 *
	 * @type {string}
     */
	get tawkHmac() : NullableInDraftMode<string, ValidationMode> {
		return this.data[13];
	}

	set tawkHmacTestSetter(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(13, v, 'tawkHmac');
	}

	/**
     *  The type of this client. Read-only.
	 *
	 * @type {AuthenticatedApiClientType}
     */
	get clientType() : NullableInDraftMode<AuthenticatedApiClientType, ValidationMode> {
		return this.data[14];
	}

	set clientTypeTestSetter(v : NullableInDraftMode<AuthenticatedApiClientType, ValidationMode>) {
        this.setterImpl(14, v, 'clientType');
	}

	/**
     *  Is the user logged in with our master password?
	 *
	 * @type {boolean}
     */
	get loggedInWithMasterPassword() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[15];
	}

	set loggedInWithMasterPasswordTestSetter(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(15, v, 'loggedInWithMasterPassword');
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
		this.data[10] = Meta.getReplacedId(this.data[10], _idReplacements);
		this.clientIdWrapper = Id.create(this.data[10]);
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 16);

			data[15] = false;
		}

		// propagate new raw data to children
		if(!Meta.isSameId(data ? data[10] : null, this.clientIdWrapper))
			this.clientIdWrapper = data && data[10] ? Id.create(data[10]) : null!;
	}

	protected get dni() : string {
		return '1';
	}

	static loadDetailed(	api : AuthenticatedApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is AuthenticatedApiRoot<'validated'> {
		// TODO: PLANO-151346
	}
}

export enum AuthenticatedApiRole {
	CLIENT_DEFAULT = 1,
	CLIENT_OWNER = 2,
	ADMIN = 3,
	SUPER_ADMIN = 4,
}
export enum AuthenticatedApiGender {
	MALE = 1,
	FEMALE = 2,
	DIVERSE = 3,
}
export enum AuthenticatedApiClientType {
	TEST_NEED_VERIFICATION = 1,
	TEST = 2,
	TEST_EXPIRED = 3,
	PAID = 4,
	TERMINATED = 5,
}


