import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase, INITIALIZED_IN_BACKEND, NullableInDraftMode } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiSaveArgs, ApiLoadArgs, ShiftId, ShiftSelector, ApiListWrapper, SchedulingApiPosSystem, SchedulingApiBooking, SchedulingApiAccountHolderState, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { DateTime, Date, DateExclusiveEnd, LocalTime, Duration, Minutes, Hours, Days, Months, Years, Percent, Email, Search, Tel, Currency, Password, PostalCode, Integer, Url, Iban, Bic, Image } from '@plano/shared/api/base/generated-types.ag';
import { Config } from '@plano/shared/core/config';
import { AbstractControl } from '@angular/forms';
import { ApiErrorService } from '@plano/shared/api/api-error.service';



/**
 * This service enables access to the api "admin/failed_adyen_events".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */

// constants
class Consts
{
	FAILED_ADYEN_EVENT_TRIGGER_PROCESSING = 1;
	FAILED_ADYEN_EVENT_IS_PLATFORM_EVENT = 2;
	FAILED_ADYEN_EVENT_EVENT_JSON = 3;
	FAILED_ADYEN_EVENT_AUTO_RETRY_ENABLED = 4;
	FAILED_ADYEN_EVENT_DATE_TIME = 5;
	FAILED_ADYEN_EVENT_ERROR = 6;
}


@Injectable({
  providedIn: 'root',
})
export class FailedAdyenEventsApiService<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiBase
{
	consts = new Consts();

	constructor(h : HttpClient
			,	router : Router
			,	apiE : ApiErrorService
			,	zone : NgZone
			,	injector : Injector) {
		super(h, router, apiE, zone, injector, 'admin/failed_adyen_events');
	}

	protected version() : string {
		return 'c81a86888ea1a6c1c1b20040f9924ef9,bc85bf1cc45416e6bec76b761599fa7c';
	}

	private dataWrapper = new FailedAdyenEventsApiRoot<ValidationMode>(this, false);

	get data() : FailedAdyenEventsApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected getRootWrapper() : FailedAdyenEventsApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected recreateRootWrapper() : void {
		this.dataWrapper = new FailedAdyenEventsApiRoot<ValidationMode>(this, false);
	}
}

		 export class FailedAdyenEventsApiRoot<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	

	constructor(override readonly api : FailedAdyenEventsApiService<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, '');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : FailedAdyenEventsApiFailedAdyenEvent<ValidationMode> {
		const newWrapper = new FailedAdyenEventsApiFailedAdyenEvent<ValidationMode>(this.api);
		newWrapper._updateRawData(item, _generateMissingData);
		return newWrapper;
	}

	protected containsPrimitives() : boolean {
		return false;
	}

	protected containsIds() : boolean {
		return false;
	}

	protected createInstance(removeDestroyedItems : boolean) : FailedAdyenEventsApiRoot<ValidationMode> {
		return new FailedAdyenEventsApiRoot<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '1';
	}

	override createNewItem(id : Id | null = null) : FailedAdyenEventsApiFailedAdyenEvent<ValidationMode> {
		const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<FailedAdyenEventsApiRoot<ValidationMode>, FailedAdyenEventsApiRoot<ValidationMode>> = new ApiAttributeInfo<FailedAdyenEventsApiRoot<ValidationMode>, FailedAdyenEventsApiRoot<ValidationMode>>({
			apiObjWrapper: this as any as FailedAdyenEventsApiRoot<ValidationMode>,
			name: '',
			id: 'ROOT',
			primitiveType: PApiPrimitiveTypes.ApiList,
			show: function(this : FailedAdyenEventsApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : FailedAdyenEventsApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : FailedAdyenEventsApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN)) )))
		{
			return true;
		}
				return false;
			},
		});
}

				 
export class FailedAdyenEventsApiFailedAdyenEvent<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	override parent : any = null;

	constructor(override readonly api : FailedAdyenEventsApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, FailedAdyenEventsApiFailedAdyenEvent as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<FailedAdyenEventsApiFailedAdyenEvent<ValidationMode>, FailedAdyenEventsApiFailedAdyenEvent<ValidationMode>> = new ApiAttributeInfo<FailedAdyenEventsApiFailedAdyenEvent<ValidationMode>, FailedAdyenEventsApiFailedAdyenEvent<ValidationMode>>({
			apiObjWrapper: this as any as FailedAdyenEventsApiFailedAdyenEvent<ValidationMode>,
			name: 'failedAdyenEvent',
			id: 'FAILED_ADYEN_EVENT',
		});
	attributeInfoTriggerProcessing =  new ApiAttributeInfo<FailedAdyenEventsApiFailedAdyenEvent<ValidationMode>, boolean>({
			apiObjWrapper: this as any as FailedAdyenEventsApiFailedAdyenEvent<ValidationMode>,
			name: 'triggerProcessing',
			id: 'FAILED_ADYEN_EVENT_TRIGGER_PROCESSING',
			primitiveType: PApiPrimitiveTypes.boolean,
		});
	attributeInfoIsPlatformEvent =  new ApiAttributeInfo<FailedAdyenEventsApiFailedAdyenEvent<ValidationMode>, boolean>({
			apiObjWrapper: this as any as FailedAdyenEventsApiFailedAdyenEvent<ValidationMode>,
			name: 'isPlatformEvent',
			id: 'FAILED_ADYEN_EVENT_IS_PLATFORM_EVENT',
			primitiveType: PApiPrimitiveTypes.boolean,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoEventJson =  new ApiAttributeInfo<FailedAdyenEventsApiFailedAdyenEvent<ValidationMode>, string>({
			apiObjWrapper: this as any as FailedAdyenEventsApiFailedAdyenEvent<ValidationMode>,
			name: 'eventJson',
			id: 'FAILED_ADYEN_EVENT_EVENT_JSON',
			primitiveType: PApiPrimitiveTypes.string,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoAutoRetryEnabled =  new ApiAttributeInfo<FailedAdyenEventsApiFailedAdyenEvent<ValidationMode>, boolean>({
			apiObjWrapper: this as any as FailedAdyenEventsApiFailedAdyenEvent<ValidationMode>,
			name: 'autoRetryEnabled',
			id: 'FAILED_ADYEN_EVENT_AUTO_RETRY_ENABLED',
			primitiveType: PApiPrimitiveTypes.boolean,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoDateTime =  new ApiAttributeInfo<FailedAdyenEventsApiFailedAdyenEvent<ValidationMode>, DateTime>({
			apiObjWrapper: this as any as FailedAdyenEventsApiFailedAdyenEvent<ValidationMode>,
			name: 'dateTime',
			id: 'FAILED_ADYEN_EVENT_DATE_TIME',
			primitiveType: PApiPrimitiveTypes.DateTime,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoError =  new ApiAttributeInfo<FailedAdyenEventsApiFailedAdyenEvent<ValidationMode>, string>({
			apiObjWrapper: this as any as FailedAdyenEventsApiFailedAdyenEvent<ValidationMode>,
			name: 'error',
			id: 'FAILED_ADYEN_EVENT_ERROR',
			primitiveType: PApiPrimitiveTypes.string,
			canEdit: () => false,
			readMode: () => true,
		});

	/**
     *  Set this to "true" to process the event now. In case the event could be handled without problems then it will automatically be deleted.
	 *
	 * @type {boolean}
     */
	get triggerProcessing() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[1];
	}

	set triggerProcessing(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(1, v, 'triggerProcessing');
	}

	/**
     *  The type of the failed event.
	 *
	 * @type {boolean}
     */
	get isPlatformEvent() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[2];
	}

	set isPlatformEventTestSetter(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(2, v, 'isPlatformEvent');
	}

	/**
     *  The body of the webhook event.
	 *
	 * @type {string}
     */
	get eventJson() : NullableInDraftMode<string, ValidationMode> {
		return this.data[3];
	}

	set eventJsonTestSetter(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(3, v, 'eventJson');
	}

	/**
     *  Should this event automatically be processed again?
	 *
	 * @type {boolean}
     */
	get autoRetryEnabled() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[4];
	}

	set autoRetryEnabledTestSetter(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(4, v, 'autoRetryEnabled');
	}

	/**
     *  When was this event received?
	 *
	 * @type {DateTime}
     */
	get dateTime() : NullableInDraftMode<DateTime, ValidationMode> {
		return this.data[5];
	}

	set dateTimeTestSetter(v : NullableInDraftMode<DateTime, ValidationMode>) {
        this.setterImpl(5, v, 'dateTime');
	}

	/**
     *  The error which happened during processing of this event.
	 *
	 * @type {string}
     */
	get error() : NullableInDraftMode<string, ValidationMode> {
		return this.data[6];
	}

	set errorTestSetter(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(6, v, 'error');
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 7);

			data[1] = false;
			data[2] = false;
			data[4] = false;
		}

		// propagate new raw data to children
	}

	protected get dni() : string {
		return '2';
	}

	static loadDetailed(	api : FailedAdyenEventsApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '2', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is FailedAdyenEventsApiFailedAdyenEvent<'validated'> {
		// TODO: PLANO-151346
	}
}



