import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase, INITIALIZED_IN_BACKEND, NullableInDraftMode } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiSaveArgs, ApiLoadArgs, ShiftId, ShiftSelector, ApiListWrapper, SchedulingApiPosSystem, SchedulingApiBooking, SchedulingApiAccountHolderState, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { DateTime, Date, DateExclusiveEnd, LocalTime, Duration, Minutes, Hours, Days, Months, Years, Percent, Email, Search, Tel, Currency, Password, PostalCode, Integer, Url, Iban, Bic, Image } from '@plano/shared/api/base/generated-types.ag';
import { Config } from '@plano/shared/core/config';
import { AbstractControl } from '@angular/forms';
import { ApiErrorService } from '@plano/shared/api/api-error.service';



/**
 * This service enables access to the api "admin/server_timer".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */

// constants
class Consts
{
	PAUSED = 1;
	SPEED = 2;
	CURRENT_TIME = 3;
}


@Injectable({
  providedIn: 'root',
})
export class ServerTimerApiService<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiBase
{
	consts = new Consts();

	constructor(h : HttpClient
			,	router : Router
			,	apiE : ApiErrorService
			,	zone : NgZone
			,	injector : Injector) {
		super(h, router, apiE, zone, injector, 'admin/server_timer');
	}

	protected version() : string {
		return 'f5c37c6a0ffb9e955640c9c72562a3fe,1fd0334975ef58264316dc28377fb354';
	}

	private dataWrapper = new ServerTimerApiRoot<ValidationMode>(this);

	get data() : ServerTimerApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected getRootWrapper() : ServerTimerApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected recreateRootWrapper() : void {
		this.dataWrapper = new ServerTimerApiRoot<ValidationMode>(this);
	}
}

		 
export class ServerTimerApiRoot<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	

	constructor(override readonly api : ServerTimerApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, ServerTimerApiRoot as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<ServerTimerApiRoot<ValidationMode>, ServerTimerApiRoot<ValidationMode>> = new ApiAttributeInfo<ServerTimerApiRoot<ValidationMode>, ServerTimerApiRoot<ValidationMode>>({
			apiObjWrapper: this as any as ServerTimerApiRoot<ValidationMode>,
			name: '',
			id: 'ROOT',
			show: function(this : ServerTimerApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : ServerTimerApiRoot<ValidationMode>) {
		if(!((Config.DEBUG) &&( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : ServerTimerApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN)) )))
		{
			return true;
		}
				return false;
			},
		});
	attributeInfoPaused =  new ApiAttributeInfo<ServerTimerApiRoot<ValidationMode>, boolean>({
			apiObjWrapper: this as any as ServerTimerApiRoot<ValidationMode>,
			name: 'paused',
			id: 'PAUSED',
			primitiveType: PApiPrimitiveTypes.boolean,
			vars: {
				cannotEditHint: 'Im Produktivmodus kann die Serverzeit nicht verändert werden.',
			}
		});
	attributeInfoSpeed =  new ApiAttributeInfo<ServerTimerApiRoot<ValidationMode>, number>({
			apiObjWrapper: this as any as ServerTimerApiRoot<ValidationMode>,
			name: 'speed',
			id: 'SPEED',
			primitiveType: PApiPrimitiveTypes.number,
			validations: function(this : ServerTimerApiRoot<ValidationMode>) {
				return [
					() => {
						return this.api!.validators.maxDecimalPlacesCount(10, PApiPrimitiveTypes.number, undefined);
					},
				];
			},
			vars: {
				cannotEditHint: 'Im Produktivmodus kann die Serverzeit nicht verändert werden.',
			}
		});
	attributeInfoCurrentTime =  new ApiAttributeInfo<ServerTimerApiRoot<ValidationMode>, DateTime>({
			apiObjWrapper: this as any as ServerTimerApiRoot<ValidationMode>,
			name: 'currentTime',
			id: 'CURRENT_TIME',
			primitiveType: PApiPrimitiveTypes.DateTime,
			vars: {
				cannotEditHint: 'Im Produktivmodus kann die Serverzeit nicht verändert werden.',
			}
		});

	/**
     *  Is the server paused?
	 *
	 * @type {boolean}
     */
	get paused() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[1];
	}

	set paused(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(1, v, 'paused');
	}

	/**
     *  Server timer speed. Default is "1".
	 *
	 * @type {number}
     */
	get speed() : NullableInDraftMode<number, ValidationMode> {
		return this.data[2];
	}

	set speed(v : NullableInDraftMode<number, ValidationMode>) {
        this.setterImpl(2, v, 'speed');
	}

	/**
     *  Current server time.
	 *
	 * @type {DateTime}
     */
	get currentTime() : NullableInDraftMode<DateTime, ValidationMode> {
		return this.data[3];
	}

	set currentTime(v : NullableInDraftMode<DateTime, ValidationMode>) {
        this.setterImpl(3, v, 'currentTime');
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 4);

			data[1] = false;
		}

		// propagate new raw data to children
	}

	protected get dni() : string {
		return '1';
	}

	static loadDetailed(	api : ServerTimerApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is ServerTimerApiRoot<'validated'> {
		// TODO: PLANO-151346
	}
}



