import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase, INITIALIZED_IN_BACKEND, NullableInDraftMode } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiSaveArgs, ApiLoadArgs, ShiftId, ShiftSelector, ApiListWrapper, SchedulingApiPosSystem, SchedulingApiBooking, SchedulingApiAccountHolderState, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { DateTime, Date, DateExclusiveEnd, LocalTime, Duration, Minutes, Hours, Days, Months, Years, Percent, Email, Search, Tel, Currency, Password, PostalCode, Integer, Url, Iban, Bic, Image } from '@plano/shared/api/base/generated-types.ag';
import { Config } from '@plano/shared/core/config';
import { AbstractControl } from '@angular/forms';
import { ApiErrorService } from '@plano/shared/api/api-error.service';

import { AccountApiRoot } from '@plano/shared/api';


/**
 * This service enables access to the api "account".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */

// constants
class Consts
{
	COMPANY_NAME = 1;
	LOCATION_NAME = 2;
	LOCATION_STREET_AND_HOUSE_NUMBER = 3;
	LOCATION_POSTAL_CODE = 4;
	LOCATION_CITY = 5;
	LOCATION_COUNTRY = 6;
	LOCATION_HOMEPAGE = 7;
	CEO_FIRST_NAME = 8;
	CEO_LAST_NAME = 9;
	BILLING = 10;
	HRM_CONTACT_FIRST_NAME = 11;
	HRM_CONTACT_LAST_NAME = 12;
	HRM_CONTACT_EMAIL = 13;
	HRM_CONTACT_PHONE = 14;
	BOOKING_SYSTEM_CONTACT_FIRST_NAME = 15;
	BOOKING_SYSTEM_CONTACT_LAST_NAME = 16;
	BOOKING_SYSTEM_CONTACT_EMAIL = 17;
	BOOKING_SYSTEM_CONTACT_PHONE = 18;
	ACCOUNTING_PERIOD_START_DAY = 19;
	TERMS_URL = 20;
	DATA_PROTECTION_URL = 21;
	TERMS_OF_PARTICIPATION_URL = 22;
	CANCELLATION_POLICY_URL = 23;
	BOOKABLE_MAILS_SENDER_NAME = 24;
	AUTOMATIC_BOOKABLE_ANONYMIZATION_AFTER_PERIOD = 25;
	NEXT_AUTOMATIC_BOOKABLE_ANONYMIZATION = 26;
	AUTOMATIC_BOOKABLE_ANONYMIZATION_EXPORT_PASSWORD = 27;
	PAYOUT_NOTIFICATION_EXPORT_PASSWORD = 28;
	TYPE = 29;
	CUSTOMER_ID = 30;
	POS_SYSTEM_PASSWORD = 31;
	IS_PAYPAL_PLUS = 32;
	PAYPAL_ACCOUNT_EMAIL = 33;
	REQUEST_PAYPAL_AUTHORIZATION = 34;
	PAYPAL_AUTHORIZATION_URL = 35;
	PAYPAL_AUTHORIZATION_CODE = 36;
	DISCOUNT_CODE = 37;
	BILLING_BANK_ACCOUNT_OWNER = 1;
	BILLING_BANK_ACCOUNT_IBAN = 2;
	BILLING_BANK_ACCOUNT_BIC = 3;
	BILLING_VAT_NUMBER = 4;
	BILLING_CONTACT_FIRST_NAME = 5;
	BILLING_CONTACT_LAST_NAME = 6;
	BILLING_BILL_ADDRESS_IS_LOCATION_ADDRESS = 7;
	BILLING_CONTACT_EMAIL = 8;
	BILLING_CONTACT_PHONE = 9;
	BILLING_STREET_AND_HOUSE_NUMBER = 10;
	BILLING_POSTAL_CODE = 11;
	BILLING_CITY = 12;
	BILLING_COUNTRY = 13;
	BILLING_ACTIVE_MEMBERS_COUNT_FOR_NEXT_PRICING = 14;
	BILLING_BILLOMAT_CUSTOMER_PORTAL_URL = 15;
}


@Injectable({
  providedIn: 'root',
})
export class AccountApiService<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiBase
{
	consts = new Consts();

	constructor(h : HttpClient
			,	router : Router
			,	apiE : ApiErrorService
			,	zone : NgZone
			,	injector : Injector) {
		super(h, router, apiE, zone, injector, 'account');
	}

	protected version() : string {
		return '4174ec7266376425d0be7af47ad0577c,3f1808163bf84a93ae8a080e46031e6c';
	}

	private dataWrapper = new AccountApiRoot<ValidationMode>(this);

	get data() : AccountApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected getRootWrapper() : AccountApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected recreateRootWrapper() : void {
		this.dataWrapper = new AccountApiRoot<ValidationMode>(this);
	}
}

		 
export class AccountApiRootBase<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	

	constructor(override readonly api : AccountApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, AccountApiRoot as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
		this.billingWrapper.parent = this as any as AccountApiRoot<ValidationMode>;
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<AccountApiRoot<ValidationMode>, AccountApiRoot<ValidationMode>> = new ApiAttributeInfo<AccountApiRoot<ValidationMode>, AccountApiRoot<ValidationMode>>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: '',
			id: 'ROOT',
		});
	attributeInfoCompanyName =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'companyName',
			id: 'COMPANY_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
			validations: function(this : AccountApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoLocationName =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'locationName',
			id: 'LOCATION_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return true;
		}
				return false;
			},
			validations: function(this : AccountApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoLocationStreetAndHouseNumber =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'locationStreetAndHouseNumber',
			id: 'LOCATION_STREET_AND_HOUSE_NUMBER',
			primitiveType: PApiPrimitiveTypes.string,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
			validations: function(this : AccountApiRoot<ValidationMode>) {
				return [
					() => {
		if(((this.type === AccountApiType.PAID || this.type === AccountApiType.TERMINATED || this.transformingToPaidAccount)))
		{
			return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
		}
						return null;
					},
				];
			},
		});
	attributeInfoLocationPostalCode =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, PostalCode>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'locationPostalCode',
			id: 'LOCATION_POSTAL_CODE',
			primitiveType: PApiPrimitiveTypes.PostalCode,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
			validations: function(this : AccountApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.PostalCode, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoLocationCity =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'locationCity',
			id: 'LOCATION_CITY',
			primitiveType: PApiPrimitiveTypes.string,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
			validations: function(this : AccountApiRoot<ValidationMode>) {
				return [
					() => {
		if(((this.type === AccountApiType.PAID || this.type === AccountApiType.TERMINATED || this.transformingToPaidAccount)))
		{
			return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
		}
						return null;
					},
				];
			},
		});
	attributeInfoLocationCountry =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, AccountApiCountry>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'locationCountry',
			id: 'LOCATION_COUNTRY',
			primitiveType: PApiPrimitiveTypes.Enum,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoLocationHomepage =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, Url>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'locationHomepage',
			id: 'LOCATION_HOMEPAGE',
			primitiveType: PApiPrimitiveTypes.Url,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return true;
		}
				return false;
			},
		});
	attributeInfoCeoFirstName =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'ceoFirstName',
			id: 'CEO_FIRST_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
			validations: function(this : AccountApiRoot<ValidationMode>) {
				return [
					() => {
		if(((this.type === AccountApiType.PAID || this.type === AccountApiType.TERMINATED || this.transformingToPaidAccount)))
		{
			return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
		}
						return null;
					},
				];
			},
		});
	attributeInfoCeoLastName =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'ceoLastName',
			id: 'CEO_LAST_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
			validations: function(this : AccountApiRoot<ValidationMode>) {
				return [
					() => {
		if(((this.type === AccountApiType.PAID || this.type === AccountApiType.TERMINATED || this.transformingToPaidAccount)))
		{
			return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
		}
						return null;
					},
				];
			},
		});
	attributeInfoHrmContactFirstName =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'hrmContactFirstName',
			id: 'HRM_CONTACT_FIRST_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
			validations: function(this : AccountApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoHrmContactLastName =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'hrmContactLastName',
			id: 'HRM_CONTACT_LAST_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
			validations: function(this : AccountApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoHrmContactEmail =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, Email>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'hrmContactEmail',
			id: 'HRM_CONTACT_EMAIL',
			primitiveType: PApiPrimitiveTypes.Email,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
			validations: function(this : AccountApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.Email, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoHrmContactPhone =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, Tel>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'hrmContactPhone',
			id: 'HRM_CONTACT_PHONE',
			primitiveType: PApiPrimitiveTypes.Tel,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
		});
	attributeInfoBookingSystemContactFirstName =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'bookingSystemContactFirstName',
			id: 'BOOKING_SYSTEM_CONTACT_FIRST_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
			validations: function(this : AccountApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoBookingSystemContactLastName =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'bookingSystemContactLastName',
			id: 'BOOKING_SYSTEM_CONTACT_LAST_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
			validations: function(this : AccountApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoBookingSystemContactEmail =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, Email>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'bookingSystemContactEmail',
			id: 'BOOKING_SYSTEM_CONTACT_EMAIL',
			primitiveType: PApiPrimitiveTypes.Email,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
			validations: function(this : AccountApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.Email, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoBookingSystemContactPhone =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, Tel>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'bookingSystemContactPhone',
			id: 'BOOKING_SYSTEM_CONTACT_PHONE',
			primitiveType: PApiPrimitiveTypes.Tel,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
		});
	attributeInfoAccountingPeriodStartDay =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, Days>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'accountingPeriodStartDay',
			id: 'ACCOUNTING_PERIOD_START_DAY',
			primitiveType: PApiPrimitiveTypes.Days,
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
			validations: function(this : AccountApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.Days, undefined);
							return null;
					},
					() => {
		return this.api!.validators.min(1, true, PApiPrimitiveTypes.Days, undefined, undefined);
							return null;
					},
					() => {
		return this.api!.validators.max(28, true, PApiPrimitiveTypes.Days, undefined, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoTermsUrl =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, Url>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'termsUrl',
			id: 'TERMS_URL',
			primitiveType: PApiPrimitiveTypes.Url,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return true;
		}
				return false;
			},
		});
	attributeInfoDataProtectionUrl =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, Url>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'dataProtectionUrl',
			id: 'DATA_PROTECTION_URL',
			primitiveType: PApiPrimitiveTypes.Url,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return true;
		}
				return false;
			},
		});
	attributeInfoTermsOfParticipationUrl =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, Url>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'termsOfParticipationUrl',
			id: 'TERMS_OF_PARTICIPATION_URL',
			primitiveType: PApiPrimitiveTypes.Url,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return true;
		}
				return false;
			},
		});
	attributeInfoCancellationPolicyUrl =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, Url>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'cancellationPolicyUrl',
			id: 'CANCELLATION_POLICY_URL',
			primitiveType: PApiPrimitiveTypes.Url,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return true;
		}
				return false;
			},
		});
	attributeInfoBookableMailsSenderName =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'bookableMailsSenderName',
			id: 'BOOKABLE_MAILS_SENDER_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return true;
		}
				return false;
			},
			validations: function(this : AccountApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoAutomaticBookableAnonymizationAfterPeriod =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, Months>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'automaticBookableAnonymizationAfterPeriod',
			id: 'AUTOMATIC_BOOKABLE_ANONYMIZATION_AFTER_PERIOD',
			primitiveType: PApiPrimitiveTypes.Months,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return true;
		}
				return false;
			},
			validations: function(this : AccountApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.min(2, true, PApiPrimitiveTypes.Months, undefined, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoNextAutomaticBookableAnonymization =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, DateTime>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'nextAutomaticBookableAnonymization',
			id: 'NEXT_AUTOMATIC_BOOKABLE_ANONYMIZATION',
			primitiveType: PApiPrimitiveTypes.DateTime,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoAutomaticBookableAnonymizationExportPassword =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, Password>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'automaticBookableAnonymizationExportPassword',
			id: 'AUTOMATIC_BOOKABLE_ANONYMIZATION_EXPORT_PASSWORD',
			primitiveType: PApiPrimitiveTypes.Password,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoPayoutNotificationExportPassword =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, Password>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'payoutNotificationExportPassword',
			id: 'PAYOUT_NOTIFICATION_EXPORT_PASSWORD',
			primitiveType: PApiPrimitiveTypes.Password,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!((this.api!.schedulingApi.data.adyenAccount.accountHolderState !== SchedulingApiAccountHolderState.NOT_INITIALIZED) && (this.api!.schedulingApi.data.adyenAccount.accountHolderState !== SchedulingApiAccountHolderState.INITIAL_ONBOARDING) &&( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoType =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, AccountApiType>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'type',
			id: 'TYPE',
			primitiveType: PApiPrimitiveTypes.Enum,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
		});
	attributeInfoCustomerId =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, Integer>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'customerId',
			id: 'CUSTOMER_ID',
			primitiveType: PApiPrimitiveTypes.Integer,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoPosSystemPassword =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, Password>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'posSystemPassword',
			id: 'POS_SYSTEM_PASSWORD',
			primitiveType: PApiPrimitiveTypes.Password,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoIsPaypalPlus =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, boolean>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'isPaypalPlus',
			id: 'IS_PAYPAL_PLUS',
			primitiveType: PApiPrimitiveTypes.boolean,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return true;
		}
				return false;
			},
		});
	attributeInfoPaypalAccountEmail =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, Email>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'paypalAccountEmail',
			id: 'PAYPAL_ACCOUNT_EMAIL',
			primitiveType: PApiPrimitiveTypes.Email,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoRequestPaypalAuthorization =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, boolean>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'requestPaypalAuthorization',
			id: 'REQUEST_PAYPAL_AUTHORIZATION',
			primitiveType: PApiPrimitiveTypes.boolean,
		});
	attributeInfoPaypalAuthorizationUrl =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, Url>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'paypalAuthorizationUrl',
			id: 'PAYPAL_AUTHORIZATION_URL',
			primitiveType: PApiPrimitiveTypes.Url,
			show: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoPaypalAuthorizationCode =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'paypalAuthorizationCode',
			id: 'PAYPAL_AUTHORIZATION_CODE',
			primitiveType: PApiPrimitiveTypes.string,
			canEdit: function(this : AccountApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.canReadAndWriteBookingSystemSettings) )))
		{
			return true;
		}
				return false;
			},
		});
	attributeInfoDiscountCode =  new ApiAttributeInfo<AccountApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiRoot<ValidationMode>,
			name: 'discountCode',
			id: 'DISCOUNT_CODE',
			primitiveType: PApiPrimitiveTypes.string,
		});

	/**
     *  Name of the company
	 *
	 * @type {string}
     */
	get companyName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[1];
	}

	set companyName(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(1, v, 'companyName');
	}

	/**
     *  Name of the location
	 *
	 * @type {string}
     */
	get locationName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[2];
	}

	set locationName(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(2, v, 'locationName');
	}

	/**
     *  Street and house number of the location
	 *
	 * @type {string}
     */
	get locationStreetAndHouseNumber() : string | null {
		return this.data[3];
	}

	set locationStreetAndHouseNumber(v : string | null) {
        this.setterImpl(3, v, 'locationStreetAndHouseNumber', () => {if((this as any as AccountApiRoot).transformingToPaidAccount && this.billing.billAddressIsLocationAddress) this.billing.streetAndHouseNumber = this.locationStreetAndHouseNumber;});
	}

	/**
     *  Postal code of the location
	 *
	 * @type {PostalCode}
     */
	get locationPostalCode() : NullableInDraftMode<PostalCode, ValidationMode> {
		return this.data[4];
	}

	set locationPostalCode(v : NullableInDraftMode<PostalCode, ValidationMode>) {
        this.setterImpl(4, v, 'locationPostalCode', () => {if((this as any as AccountApiRoot).transformingToPaidAccount && this.billing.billAddressIsLocationAddress) this.billing.postalCode = this.locationPostalCode;});
	}

	/**
     *  City of the location
	 *
	 * @type {string}
     */
	get locationCity() : string | null {
		return this.data[5];
	}

	set locationCity(v : string | null) {
        this.setterImpl(5, v, 'locationCity', () => {if((this as any as AccountApiRoot).transformingToPaidAccount && this.billing.billAddressIsLocationAddress) this.billing.city = this.locationCity;});
	}

	/**
     *  location country
	 *
	 * @type {AccountApiCountry}
     */
	get locationCountry() : NullableInDraftMode<AccountApiCountry, ValidationMode> {
		return this.data[6];
	}

	set locationCountryTestSetter(v : NullableInDraftMode<AccountApiCountry, ValidationMode>) {
        this.setterImpl(6, v, 'locationCountry');
	}

	/**
     *  Homepage-URL of the location/company
	 *
	 * @type {Url}
     */
	get locationHomepage() : Url | null {
		return this.data[7];
	}

	set locationHomepage(v : Url | null) {
        this.setterImpl(7, v, 'locationHomepage');
	}

	/**
     *  First name of the CEO (Name being printed on the bill).
	 *
	 * @type {string}
     */
	get ceoFirstName() : string | null {
		return this.data[8];
	}

	set ceoFirstName(v : string | null) {
        this.setterImpl(8, v, 'ceoFirstName');
	}

	/**
     *  Last name of the CEO (Name being printed on the bill).
	 *
	 * @type {string}
     */
	get ceoLastName() : string | null {
		return this.data[9];
	}

	set ceoLastName(v : string | null) {
        this.setterImpl(9, v, 'ceoLastName');
	}

	private billingWrapper : AccountApiBilling<ValidationMode> = new AccountApiBilling<ValidationMode>(this.api);

	/**
     *  Object containing billing information.
     */
	get billing() : AccountApiBilling<ValidationMode> {
		return this.billingWrapper;
	}

	set billingTestSetter(v : AccountApiBilling<ValidationMode>) {
        this.setterImpl(10, v.rawData, 'billing', () => {this.billingWrapper = v;});
	}

	/**
     *  First name of the person we can contact concerning staff scheduling.
	 *
	 * @type {string}
     */
	get hrmContactFirstName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[11];
	}

	set hrmContactFirstName(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(11, v, 'hrmContactFirstName');
	}

	/**
     *  Last name of the person we can contact concerning staff scheduling.
	 *
	 * @type {string}
     */
	get hrmContactLastName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[12];
	}

	set hrmContactLastName(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(12, v, 'hrmContactLastName');
	}

	/**
     *  Email of the person we can contact concerning staff scheduling.
	 *
	 * @type {Email}
     */
	get hrmContactEmail() : NullableInDraftMode<Email, ValidationMode> {
		return this.data[13];
	}

	set hrmContactEmail(v : NullableInDraftMode<Email, ValidationMode>) {
        this.setterImpl(13, v, 'hrmContactEmail');
	}

	/**
     *  Phone of the person we can contact concerning staff scheduling.
	 *
	 * @type {Tel}
     */
	get hrmContactPhone() : Tel | null {
		return this.data[14];
	}

	set hrmContactPhone(v : Tel | null) {
        this.setterImpl(14, v, 'hrmContactPhone');
	}

	/**
     *  First name of the person we can contact concerning the booking system.
	 *
	 * @type {string}
     */
	get bookingSystemContactFirstName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[15];
	}

	set bookingSystemContactFirstName(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(15, v, 'bookingSystemContactFirstName');
	}

	/**
     *  Last name of the person we can contact concerning the booking system.
	 *
	 * @type {string}
     */
	get bookingSystemContactLastName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[16];
	}

	set bookingSystemContactLastName(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(16, v, 'bookingSystemContactLastName');
	}

	/**
     *  Email of the person we can contact concerning the booking system.
	 *
	 * @type {Email}
     */
	get bookingSystemContactEmail() : NullableInDraftMode<Email, ValidationMode> {
		return this.data[17];
	}

	set bookingSystemContactEmail(v : NullableInDraftMode<Email, ValidationMode>) {
        this.setterImpl(17, v, 'bookingSystemContactEmail');
	}

	/**
     *  Phone of the person we can contact concerning the booking system.
	 *
	 * @type {Tel}
     */
	get bookingSystemContactPhone() : Tel | null {
		return this.data[18];
	}

	set bookingSystemContactPhone(v : Tel | null) {
        this.setterImpl(18, v, 'bookingSystemContactPhone');
	}

	/**
     *  The start day of the accounting period. Should be a value in range [1, 28].
	 *
	 * @type {Days}
     */
	get accountingPeriodStartDay() : NullableInDraftMode<Days, ValidationMode> {
		return this.data[19];
	}

	set accountingPeriodStartDay(v : NullableInDraftMode<Days, ValidationMode>) {
        this.setterImpl(19, v, 'accountingPeriodStartDay');
	}

	/**
     *  Client's terms page url.
	 *
	 * @type {Url}
     */
	get termsUrl() : Url | null {
		return this.data[20];
	}

	set termsUrl(v : Url | null) {
        this.setterImpl(20, v, 'termsUrl');
	}

	/**
     *  Client's data protection page url.
	 *
	 * @type {Url}
     */
	get dataProtectionUrl() : Url | null {
		return this.data[21];
	}

	set dataProtectionUrl(v : Url | null) {
        this.setterImpl(21, v, 'dataProtectionUrl');
	}

	/**
     *  Client's terms of participation page url.
	 *
	 * @type {Url}
     */
	get termsOfParticipationUrl() : Url | null {
		return this.data[22];
	}

	set termsOfParticipationUrl(v : Url | null) {
        this.setterImpl(22, v, 'termsOfParticipationUrl');
	}

	/**
     *  Client's cancellation policy page url.
	 *
	 * @type {Url}
     */
	get cancellationPolicyUrl() : Url | null {
		return this.data[23];
	}

	set cancellationPolicyUrl(v : Url | null) {
        this.setterImpl(23, v, 'cancellationPolicyUrl');
	}

	/**
     *  Sender name to be set for bookable emails.
	 *
	 * @type {string}
     */
	get bookableMailsSenderName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[24];
	}

	set bookableMailsSenderName(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(24, v, 'bookableMailsSenderName');
	}

	/**
     *  After which period should a bookable be anonymized? The relevant date is for bookings the last shift of a course or for vouchers the expiration date (if one exists).
	 *
	 * @type {Months}
     */
	get automaticBookableAnonymizationAfterPeriod() : Months | null {
		return this.data[25];
	}

	set automaticBookableAnonymizationAfterPeriod(v : Months | null) {
        this.setterImpl(25, v, 'automaticBookableAnonymizationAfterPeriod');
	}

	/**
     *  When will automatic bookable anonymization be executed next time?
	 *
	 * @type {DateTime}
     */
	get nextAutomaticBookableAnonymization() : DateTime | null {
		return this.data[26];
	}

	set nextAutomaticBookableAnonymizationTestSetter(v : DateTime | null) {
        this.setterImpl(26, v, 'nextAutomaticBookableAnonymization');
	}

	/**
     *  Password for opening the automatic bookable anonymization exports.
	 *
	 * @type {Password}
     */
	get automaticBookableAnonymizationExportPassword() : NullableInDraftMode<Password, ValidationMode> {
		return this.data[27];
	}

	set automaticBookableAnonymizationExportPasswordTestSetter(v : NullableInDraftMode<Password, ValidationMode>) {
        this.setterImpl(27, v, 'automaticBookableAnonymizationExportPassword');
	}

	/**
     *  Password for opening the payout-export in an payout-success-mail.
	 *
	 * @type {Password}
     */
	get payoutNotificationExportPassword() : NullableInDraftMode<Password, ValidationMode> {
		return this.data[28];
	}

	set payoutNotificationExportPasswordTestSetter(v : NullableInDraftMode<Password, ValidationMode>) {
        this.setterImpl(28, v, 'payoutNotificationExportPassword');
	}

	/**
     *  The type of this client. You can also use this to transform a test into a paid account.
	 *
	 * @type {AccountApiType}
     */
	get type() : NullableInDraftMode<AccountApiType, ValidationMode> {
		return this.data[29];
	}

	set type(v : NullableInDraftMode<AccountApiType, ValidationMode>) {
        this.setterImpl(29, v, 'type');
	}

	/**
     *  The unique customer id. Read-only value.
	 *
	 * @type {Integer}
     */
	get customerId() : NullableInDraftMode<Integer, ValidationMode> {
		return this.data[30];
	}

	set customerIdTestSetter(v : NullableInDraftMode<Integer, ValidationMode>) {
        this.setterImpl(30, v, 'customerId');
	}

	/**
     *  Password to be used by the POS system for the Dr. Plano POS api. Read-only.
	 *
	 * @type {Password}
     */
	get posSystemPassword() : NullableInDraftMode<Password, ValidationMode> {
		return this.data[31];
	}

	set posSystemPasswordTestSetter(v : NullableInDraftMode<Password, ValidationMode>) {
        this.setterImpl(31, v, 'posSystemPassword');
	}

	/**
     *  Is the given paypal account a paypal plus account?
	 *
	 * @type {boolean}
     */
	get isPaypalPlus() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[32];
	}

	set isPaypalPlus(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(32, v, 'isPaypalPlus');
	}

	/**
     *  User's paypal account email for which we have authorization. Read only.
	 *
	 * @type {Email}
     */
	get paypalAccountEmail() : Email | null {
		return this.data[33];
	}

	set paypalAccountEmailTestSetter(v : Email | null) {
        this.setterImpl(33, v, 'paypalAccountEmail');
	}

	/**
     *  Set this value to "true" to generate a authorization url. That url will be returned at value "paypalAuthorizationUrl".
	 *
	 * @type {boolean}
     */
	get requestPaypalAuthorization() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[34];
	}

	set requestPaypalAuthorization(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(34, v, 'requestPaypalAuthorization');
	}

	/**
     *  Forward user to this url to let him give us authorization for his paypal account. Read only.
	 *
	 * @type {Url}
     */
	get paypalAuthorizationUrl() : Url | null {
		return this.data[35];
	}

	set paypalAuthorizationUrlTestSetter(v : Url | null) {
        this.setterImpl(35, v, 'paypalAuthorizationUrl');
	}


	set paypalAuthorizationCode(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(36, v, 'paypalAuthorizationCode');
	}

	/**
     *  Discount code which can only be set when transforming account to a paid account.
	 *
	 * @type {string}
     */
	get discountCode() : string | null {
		return this.data[37];
	}

	set discountCode(v : string | null) {
        this.setterImpl(37, v, 'discountCode');
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
		this.billingWrapper._fixIds(_idReplacements);
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 38);

			if(data[10] === null)
				data[10] = Meta.createNewObject(false);
			data[32] = false;
			data[34] = false;
		}

		// propagate new raw data to children
		this.billingWrapper._updateRawData(data ? data[10] : null, generateMissingData);
	}

	protected get dni() : string {
		return '1';
	}

	static loadDetailed(	api : AccountApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is AccountApiRoot<'validated'> {
		// TODO: PLANO-151346
	}
}

export enum AccountApiCountry {
	GERMANY = 1,
	AUSTRIA = 2,
	SWITZERLAND = 3,
	NETHERLANDS = 4,
	BELGIUM = 5,
	UNITED_KINGDOM = 6,
	CZECH_REPUBLIC = 7,
	SWEDEN = 8,
	LUXEMBOURG = 9,
}
		 
export class AccountApiBilling<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	override parent : any = null;

	constructor(override readonly api : AccountApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, AccountApiBilling as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<AccountApiBilling<ValidationMode>, AccountApiBilling<ValidationMode>> = new ApiAttributeInfo<AccountApiBilling<ValidationMode>, AccountApiBilling<ValidationMode>>({
			apiObjWrapper: this as any as AccountApiBilling<ValidationMode>,
			name: 'billing',
			id: 'BILLING',
			show: function(this : AccountApiBilling<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : AccountApiBilling<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiBilling<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
		});
	attributeInfoBankAccountOwner =  new ApiAttributeInfo<AccountApiBilling<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiBilling<ValidationMode>,
			name: 'bankAccountOwner',
			id: 'BILLING_BANK_ACCOUNT_OWNER',
			primitiveType: PApiPrimitiveTypes.string,
			validations: function(this : AccountApiBilling<ValidationMode>) {
				return [
					() => {
		if(((this.parent!.type === AccountApiType.PAID || this.parent!.type === AccountApiType.TERMINATED || this.parent!.transformingToPaidAccount)))
		{
			return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
		}
						return null;
					},
				];
			},
		});
	attributeInfoBankAccountIban =  new ApiAttributeInfo<AccountApiBilling<ValidationMode>, Iban>({
			apiObjWrapper: this as any as AccountApiBilling<ValidationMode>,
			name: 'bankAccountIban',
			id: 'BILLING_BANK_ACCOUNT_IBAN',
			primitiveType: PApiPrimitiveTypes.Iban,
			validations: function(this : AccountApiBilling<ValidationMode>) {
				return [
					() => {
		if(((this.parent!.type === AccountApiType.PAID || this.parent!.type === AccountApiType.TERMINATED || this.parent!.transformingToPaidAccount)))
		{
			return this.api!.validators.required(PApiPrimitiveTypes.Iban, undefined);
		}
						return null;
					},
				];
			},
		});
	attributeInfoBankAccountBic =  new ApiAttributeInfo<AccountApiBilling<ValidationMode>, Bic>({
			apiObjWrapper: this as any as AccountApiBilling<ValidationMode>,
			name: 'bankAccountBic',
			id: 'BILLING_BANK_ACCOUNT_BIC',
			primitiveType: PApiPrimitiveTypes.Bic,
			validations: function(this : AccountApiBilling<ValidationMode>) {
				return [
					() => {
		if(((this.parent!.type === AccountApiType.PAID || this.parent!.type === AccountApiType.TERMINATED || this.parent!.transformingToPaidAccount)))
		{
			return this.api!.validators.required(PApiPrimitiveTypes.Bic, undefined);
		}
						return null;
					},
				];
			},
		});
	attributeInfoVatNumber =  new ApiAttributeInfo<AccountApiBilling<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiBilling<ValidationMode>,
			name: 'vatNumber',
			id: 'BILLING_VAT_NUMBER',
			primitiveType: PApiPrimitiveTypes.string,
			show: function(this : AccountApiBilling<ValidationMode>) {
		if(!((this.country !== AccountApiCountry.GERMANY)))
		{
			return false;
		}
				return true;
			},
			validations: function(this : AccountApiBilling<ValidationMode>) {
				return [
					() => {
		if(((this.country !== AccountApiCountry.GERMANY) && (this.parent!.type === AccountApiType.PAID || this.parent!.type === AccountApiType.TERMINATED || this.parent!.transformingToPaidAccount)))
		{
			return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
		}
						return null;
					},
				];
			},
		});
	attributeInfoContactFirstName =  new ApiAttributeInfo<AccountApiBilling<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiBilling<ValidationMode>,
			name: 'contactFirstName',
			id: 'BILLING_CONTACT_FIRST_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			validations: function(this : AccountApiBilling<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoContactLastName =  new ApiAttributeInfo<AccountApiBilling<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiBilling<ValidationMode>,
			name: 'contactLastName',
			id: 'BILLING_CONTACT_LAST_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			validations: function(this : AccountApiBilling<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoBillAddressIsLocationAddress =  new ApiAttributeInfo<AccountApiBilling<ValidationMode>, boolean>({
			apiObjWrapper: this as any as AccountApiBilling<ValidationMode>,
			name: 'billAddressIsLocationAddress',
			id: 'BILLING_BILL_ADDRESS_IS_LOCATION_ADDRESS',
			primitiveType: PApiPrimitiveTypes.boolean,
		});
	attributeInfoContactEmail =  new ApiAttributeInfo<AccountApiBilling<ValidationMode>, Email>({
			apiObjWrapper: this as any as AccountApiBilling<ValidationMode>,
			name: 'contactEmail',
			id: 'BILLING_CONTACT_EMAIL',
			primitiveType: PApiPrimitiveTypes.Email,
			validations: function(this : AccountApiBilling<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.Email, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoContactPhone =  new ApiAttributeInfo<AccountApiBilling<ValidationMode>, Tel>({
			apiObjWrapper: this as any as AccountApiBilling<ValidationMode>,
			name: 'contactPhone',
			id: 'BILLING_CONTACT_PHONE',
			primitiveType: PApiPrimitiveTypes.Tel,
		});
	attributeInfoStreetAndHouseNumber =  new ApiAttributeInfo<AccountApiBilling<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiBilling<ValidationMode>,
			name: 'streetAndHouseNumber',
			id: 'BILLING_STREET_AND_HOUSE_NUMBER',
			primitiveType: PApiPrimitiveTypes.string,
			canEdit: function(this : AccountApiBilling<ValidationMode>) {
		if(!((!this.billAddressIsLocationAddress)))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiBilling<ValidationMode>) {
				 
		
				return false;
			},
			validations: function(this : AccountApiBilling<ValidationMode>) {
				return [
					() => {
		if(((this.parent!.type === AccountApiType.PAID || this.parent!.type === AccountApiType.TERMINATED || this.parent!.transformingToPaidAccount)))
		{
			return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
		}
						return null;
					},
				];
			},
		});
	attributeInfoPostalCode =  new ApiAttributeInfo<AccountApiBilling<ValidationMode>, PostalCode>({
			apiObjWrapper: this as any as AccountApiBilling<ValidationMode>,
			name: 'postalCode',
			id: 'BILLING_POSTAL_CODE',
			primitiveType: PApiPrimitiveTypes.PostalCode,
			canEdit: function(this : AccountApiBilling<ValidationMode>) {
		if(!((!this.billAddressIsLocationAddress)))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiBilling<ValidationMode>) {
				 
		
				return false;
			},
			validations: function(this : AccountApiBilling<ValidationMode>) {
				return [
					() => {
		if(((this.parent!.type === AccountApiType.PAID || this.parent!.type === AccountApiType.TERMINATED || this.parent!.transformingToPaidAccount)))
		{
			return this.api!.validators.required(PApiPrimitiveTypes.PostalCode, undefined);
		}
						return null;
					},
				];
			},
		});
	attributeInfoCity =  new ApiAttributeInfo<AccountApiBilling<ValidationMode>, string>({
			apiObjWrapper: this as any as AccountApiBilling<ValidationMode>,
			name: 'city',
			id: 'BILLING_CITY',
			primitiveType: PApiPrimitiveTypes.string,
			canEdit: function(this : AccountApiBilling<ValidationMode>) {
		if(!((!this.billAddressIsLocationAddress)))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiBilling<ValidationMode>) {
				 
		
				return false;
			},
			validations: function(this : AccountApiBilling<ValidationMode>) {
				return [
					() => {
		if(((this.parent!.type === AccountApiType.PAID || this.parent!.type === AccountApiType.TERMINATED || this.parent!.transformingToPaidAccount)))
		{
			return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
		}
						return null;
					},
				];
			},
		});
	attributeInfoCountry =  new ApiAttributeInfo<AccountApiBilling<ValidationMode>, AccountApiCountry>({
			apiObjWrapper: this as any as AccountApiBilling<ValidationMode>,
			name: 'country',
			id: 'BILLING_COUNTRY',
			primitiveType: PApiPrimitiveTypes.Enum,
			canEdit: function(this : AccountApiBilling<ValidationMode>) {
		if(!((!this.billAddressIsLocationAddress)))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : AccountApiBilling<ValidationMode>) {
				 
		
				return false;
			},
			validations: function(this : AccountApiBilling<ValidationMode>) {
				return [
					() => {
		if(((this.parent!.type === AccountApiType.PAID || this.parent!.type === AccountApiType.TERMINATED || this.parent!.transformingToPaidAccount)))
		{
			return this.api!.validators.required(PApiPrimitiveTypes.Enum, undefined);
		}
						return null;
					},
				];
			},
		});
	attributeInfoActiveMembersCountForNextPricing =  new ApiAttributeInfo<AccountApiBilling<ValidationMode>, Integer>({
			apiObjWrapper: this as any as AccountApiBilling<ValidationMode>,
			name: 'activeMembersCountForNextPricing',
			id: 'BILLING_ACTIVE_MEMBERS_COUNT_FOR_NEXT_PRICING',
			primitiveType: PApiPrimitiveTypes.Integer,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoBillomatCustomerPortalUrl =  new ApiAttributeInfo<AccountApiBilling<ValidationMode>, Url>({
			apiObjWrapper: this as any as AccountApiBilling<ValidationMode>,
			name: 'billomatCustomerPortalUrl',
			id: 'BILLING_BILLOMAT_CUSTOMER_PORTAL_URL',
			primitiveType: PApiPrimitiveTypes.Url,
			canEdit: () => false,
			readMode: () => true,
		});

	/**
     *  Owner name of the bank account
	 *
	 * @type {string}
     */
	get bankAccountOwner() : string | null {
		return this.data[1];
	}

	set bankAccountOwner(v : string | null) {
        this.setterImpl(1, v, 'bankAccountOwner');
	}

	/**
     *  IBAN of the Bank account
	 *
	 * @type {Iban}
     */
	get bankAccountIban() : Iban | null {
		return this.data[2];
	}

	set bankAccountIban(v : Iban | null) {
        this.setterImpl(2, v, 'bankAccountIban');
	}

	/**
     *  BIC of the Bank account
	 *
	 * @type {Bic}
     */
	get bankAccountBic() : Bic | null {
		return this.data[3];
	}

	set bankAccountBic(v : Bic | null) {
        this.setterImpl(3, v, 'bankAccountBic');
	}

	/**
     *  VAT Number of the company
	 *
	 * @type {string}
     */
	get vatNumber() : string | null {
		return this.data[4];
	}

	set vatNumber(v : string | null) {
        this.setterImpl(4, v, 'vatNumber');
	}

	/**
     *  First name of the person we can contact concerning bills.
	 *
	 * @type {string}
     */
	get contactFirstName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[5];
	}

	set contactFirstName(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(5, v, 'contactFirstName');
	}

	/**
     *  Last name of the person we can contact concerning bills.
	 *
	 * @type {string}
     */
	get contactLastName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[6];
	}

	set contactLastName(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(6, v, 'contactLastName');
	}

	/**
     *  true if the bill address is equal the location address.
	 *
	 * @type {boolean}
     */
	get billAddressIsLocationAddress() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[7];
	}

	set billAddressIsLocationAddress(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(7, v, 'billAddressIsLocationAddress', () => {if((this as any as AccountApiBilling).parent!.transformingToPaidAccount && this.billAddressIsLocationAddress)
				{
					this.streetAndHouseNumber = this.parent!.locationStreetAndHouseNumber;
					this.postalCode = this.parent!.locationPostalCode;
					this.city = this.parent!.locationCity;
					this.country = this.parent!.locationCountry;
				}});
	}

	/**
     *  Email of the person we can contact concerning bills.
	 *
	 * @type {Email}
     */
	get contactEmail() : NullableInDraftMode<Email, ValidationMode> {
		return this.data[8];
	}

	set contactEmail(v : NullableInDraftMode<Email, ValidationMode>) {
        this.setterImpl(8, v, 'contactEmail');
	}

	/**
     *  Phone of the person we can contact concerning bills.
	 *
	 * @type {Tel}
     */
	get contactPhone() : Tel | null {
		return this.data[9];
	}

	set contactPhone(v : Tel | null) {
        this.setterImpl(9, v, 'contactPhone');
	}

	/**
     *  Street and house number of the bill recipient
	 *
	 * @type {string}
     */
	get streetAndHouseNumber() : string | null {
		return this.data[10];
	}

	set streetAndHouseNumber(v : string | null) {
        this.setterImpl(10, v, 'streetAndHouseNumber');
	}

	/**
     *  Postal code of the bill recipient
	 *
	 * @type {PostalCode}
     */
	get postalCode() : PostalCode | null {
		return this.data[11];
	}

	set postalCode(v : PostalCode | null) {
        this.setterImpl(11, v, 'postalCode');
	}

	/**
     *  City of the bill recipient
	 *
	 * @type {string}
     */
	get city() : string | null {
		return this.data[12];
	}

	set city(v : string | null) {
        this.setterImpl(12, v, 'city');
	}

	/**
     *  bill recipient country
	 *
	 * @type {AccountApiCountry}
     */
	get country() : AccountApiCountry | null {
		return this.data[13];
	}

	set country(v : AccountApiCountry | null) {
        this.setterImpl(13, v, 'country');
	}

	/**
     *  The next count of non-trashed members to reach the next pricing-level. "null" is returned when the billed members-count is capped and thus increasing the members would not result in higher pricing. Read-only.
	 *
	 * @type {Integer}
     */
	get activeMembersCountForNextPricing() : Integer | null {
		return this.data[14];
	}

	set activeMembersCountForNextPricingTestSetter(v : Integer | null) {
        this.setterImpl(14, v, 'activeMembersCountForNextPricing');
	}

	/**
     *  Url for Billomat's customer portal to access all invoices. Read-only.
	 *
	 * @type {Url}
     */
	get billomatCustomerPortalUrl() : Url | null {
		return this.data[15];
	}

	set billomatCustomerPortalUrlTestSetter(v : Url | null) {
        this.setterImpl(15, v, 'billomatCustomerPortalUrl');
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 16);

			data[7] = false;
		}

		// propagate new raw data to children
	}

	protected get dni() : string {
		return '11';
	}

	static loadDetailed(	api : AccountApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '11', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is AccountApiBilling<'validated'> {
		// TODO: PLANO-151346
	}
}

export enum AccountApiType {
	TEST_NEED_VERIFICATION = 1,
	TEST = 2,
	TEST_EXPIRED = 3,
	PAID = 4,
	TERMINATED = 5,
}


