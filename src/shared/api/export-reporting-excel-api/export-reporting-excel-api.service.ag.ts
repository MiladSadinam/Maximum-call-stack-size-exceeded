import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase, INITIALIZED_IN_BACKEND, NullableInDraftMode } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiSaveArgs, ApiLoadArgs, ShiftId, ShiftSelector, ApiListWrapper, SchedulingApiPosSystem, SchedulingApiBooking, SchedulingApiAccountHolderState, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { DateTime, Date, DateExclusiveEnd, LocalTime, Duration, Minutes, Hours, Days, Months, Years, Percent, Email, Search, Tel, Currency, Password, PostalCode, Integer, Url, Iban, Bic, Image } from '@plano/shared/api/base/generated-types.ag';
import { Config } from '@plano/shared/core/config';
import { AbstractControl } from '@angular/forms';
import { ApiErrorService } from '@plano/shared/api/api-error.service';



/**
 * This service enables access to the api "export_reporting_excel".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */

// constants
class Consts
{
	WORKING_TIME_IDS = 1;
	ABSENCE_IDS = 2;
	MEMBER_IDS = 3;
	SHIFT_MODEL_IDS = 4;
}


@Injectable({
  providedIn: 'root',
})
export class ExportReportingExcelApiService<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiBase
{
	consts = new Consts();

	constructor(h : HttpClient
			,	router : Router
			,	apiE : ApiErrorService
			,	zone : NgZone
			,	injector : Injector) {
		super(h, router, apiE, zone, injector, 'export_reporting_excel');
	}

	protected version() : string {
		return 'a745a6329a3160050a6f45f7f26be98d,d35c3110c1c64b6400f702f64ac173e4';
	}

	private dataWrapper = new ExportReportingExcelApiRoot<ValidationMode>(this);

	get data() : ExportReportingExcelApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected getRootWrapper() : ExportReportingExcelApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected recreateRootWrapper() : void {
		this.dataWrapper = new ExportReportingExcelApiRoot<ValidationMode>(this);
	}
}

		 
export class ExportReportingExcelApiRoot<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	

	constructor(override readonly api : ExportReportingExcelApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, ExportReportingExcelApiRoot as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
		this.workingTimeIdsWrapper.parent = this as any as ExportReportingExcelApiRoot<ValidationMode>;
		this.absenceIdsWrapper.parent = this as any as ExportReportingExcelApiRoot<ValidationMode>;
		this.memberIdsWrapper.parent = this as any as ExportReportingExcelApiRoot<ValidationMode>;
		this.shiftModelIdsWrapper.parent = this as any as ExportReportingExcelApiRoot<ValidationMode>;
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<ExportReportingExcelApiRoot<ValidationMode>, ExportReportingExcelApiRoot<ValidationMode>> = new ApiAttributeInfo<ExportReportingExcelApiRoot<ValidationMode>, ExportReportingExcelApiRoot<ValidationMode>>({
			apiObjWrapper: this as any as ExportReportingExcelApiRoot<ValidationMode>,
			name: '',
			id: 'ROOT',
		});

	private workingTimeIdsWrapper : ExportReportingExcelApiWorkingTimeIds<ValidationMode> = new ExportReportingExcelApiWorkingTimeIds<ValidationMode>(this.api, false);

	/**
     *  Id list of the working-times to be exported.
     */
	get workingTimeIds() : ExportReportingExcelApiWorkingTimeIds<ValidationMode> {
		return this.workingTimeIdsWrapper;
	}

	set workingTimeIdsTestSetter(v : ExportReportingExcelApiWorkingTimeIds<ValidationMode>) {
        this.setterImpl(1, v.rawData, 'workingTimeIds', () => {this.workingTimeIdsWrapper = v;});
	}

	private absenceIdsWrapper : ExportReportingExcelApiAbsenceIds<ValidationMode> = new ExportReportingExcelApiAbsenceIds<ValidationMode>(this.api, false);

	/**
     *  Id list of the absences to be exported.
     */
	get absenceIds() : ExportReportingExcelApiAbsenceIds<ValidationMode> {
		return this.absenceIdsWrapper;
	}

	set absenceIdsTestSetter(v : ExportReportingExcelApiAbsenceIds<ValidationMode>) {
        this.setterImpl(2, v.rawData, 'absenceIds', () => {this.absenceIdsWrapper = v;});
	}

	private memberIdsWrapper : ExportReportingExcelApiMemberIds<ValidationMode> = new ExportReportingExcelApiMemberIds<ValidationMode>(this.api, false);

	/**
     *  Id list of the members to be exported.
     */
	get memberIds() : ExportReportingExcelApiMemberIds<ValidationMode> {
		return this.memberIdsWrapper;
	}

	set memberIdsTestSetter(v : ExportReportingExcelApiMemberIds<ValidationMode>) {
        this.setterImpl(3, v.rawData, 'memberIds', () => {this.memberIdsWrapper = v;});
	}

	private shiftModelIdsWrapper : ExportReportingExcelApiShiftModelIds<ValidationMode> = new ExportReportingExcelApiShiftModelIds<ValidationMode>(this.api, false);

	/**
     *  Id list of the shift model to be exported.
     */
	get shiftModelIds() : ExportReportingExcelApiShiftModelIds<ValidationMode> {
		return this.shiftModelIdsWrapper;
	}

	set shiftModelIdsTestSetter(v : ExportReportingExcelApiShiftModelIds<ValidationMode>) {
        this.setterImpl(4, v.rawData, 'shiftModelIds', () => {this.shiftModelIdsWrapper = v;});
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
		this.workingTimeIdsWrapper._fixIds(_idReplacements);
		this.absenceIdsWrapper._fixIds(_idReplacements);
		this.memberIdsWrapper._fixIds(_idReplacements);
		this.shiftModelIdsWrapper._fixIds(_idReplacements);
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 5);

			if(data[1] === null)
				data[1] = Meta.createNewList();
			if(data[2] === null)
				data[2] = Meta.createNewList();
			if(data[3] === null)
				data[3] = Meta.createNewList();
			if(data[4] === null)
				data[4] = Meta.createNewList();
		}

		// propagate new raw data to children
		this.workingTimeIdsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
		this.absenceIdsWrapper._updateRawData(data ? data[2] : null, generateMissingData);
		this.memberIdsWrapper._updateRawData(data ? data[3] : null, generateMissingData);
		this.shiftModelIdsWrapper._updateRawData(data ? data[4] : null, generateMissingData);
	}

	protected get dni() : string {
		return '1';
	}

	static loadDetailed(	api : ExportReportingExcelApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is ExportReportingExcelApiRoot<'validated'> {
		// TODO: PLANO-151346
	}
}

		 export class ExportReportingExcelApiWorkingTimeIds<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	override parent : any = null;

	constructor(override readonly api : ExportReportingExcelApiService<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, 'workingTimeIds');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : ExportReportingExcelApiWorkingTimeId<ValidationMode> {
		const newWrapper = new ExportReportingExcelApiWorkingTimeId<ValidationMode>(this.api);
		newWrapper._updateRawData(item, _generateMissingData);
		return newWrapper;
	}

	protected containsPrimitives() : boolean {
		return false;
	}

	protected containsIds() : boolean {
		return false;
	}

	protected createInstance(removeDestroyedItems : boolean) : ExportReportingExcelApiWorkingTimeIds<ValidationMode> {
		return new ExportReportingExcelApiWorkingTimeIds<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '2';
	}

	override createNewItem(id : Id | null = null) : ExportReportingExcelApiWorkingTimeId<ValidationMode> {
		const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('workingTimeIds');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<ExportReportingExcelApiWorkingTimeIds<ValidationMode>, ExportReportingExcelApiWorkingTimeIds<ValidationMode>> = new ApiAttributeInfo<ExportReportingExcelApiWorkingTimeIds<ValidationMode>, ExportReportingExcelApiWorkingTimeIds<ValidationMode>>({
			apiObjWrapper: this as any as ExportReportingExcelApiWorkingTimeIds<ValidationMode>,
			name: 'workingTimeIds',
			id: 'WORKING_TIME_IDS',
			primitiveType: PApiPrimitiveTypes.ApiList,
		});
	attributeInfoWorkingTimeId =  new ApiAttributeInfo<ExportReportingExcelApiWorkingTimeIds<ValidationMode>, ExportReportingExcelApiWorkingTimeId<ValidationMode>>({
			apiObjWrapper: this as any as ExportReportingExcelApiWorkingTimeIds<ValidationMode>,
			name: 'workingTimeId',
			id: 'WORKING_TIME_ID',
		});
}

				 
export class ExportReportingExcelApiWorkingTimeId<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	override parent : any = null;

	constructor(override readonly api : ExportReportingExcelApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, ExportReportingExcelApiWorkingTimeId as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<ExportReportingExcelApiWorkingTimeId<ValidationMode>, ExportReportingExcelApiWorkingTimeId<ValidationMode>> = new ApiAttributeInfo<ExportReportingExcelApiWorkingTimeId<ValidationMode>, ExportReportingExcelApiWorkingTimeId<ValidationMode>>({
			apiObjWrapper: this as any as ExportReportingExcelApiWorkingTimeId<ValidationMode>,
			name: 'workingTimeId',
			id: 'WORKING_TIME_ID',
		});


	_fixIds(_idReplacements : Map<any, number>) : void {
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 1);

		}

		// propagate new raw data to children
	}

	protected get dni() : string {
		return '6';
	}

	static loadDetailed(	api : ExportReportingExcelApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '6', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is ExportReportingExcelApiWorkingTimeId<'validated'> {
		// TODO: PLANO-151346
	}
}

		 export class ExportReportingExcelApiAbsenceIds<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	override parent : any = null;

	constructor(override readonly api : ExportReportingExcelApiService<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, 'absenceIds');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : ExportReportingExcelApiAbsenceId<ValidationMode> {
		const newWrapper = new ExportReportingExcelApiAbsenceId<ValidationMode>(this.api);
		newWrapper._updateRawData(item, _generateMissingData);
		return newWrapper;
	}

	protected containsPrimitives() : boolean {
		return false;
	}

	protected containsIds() : boolean {
		return false;
	}

	protected createInstance(removeDestroyedItems : boolean) : ExportReportingExcelApiAbsenceIds<ValidationMode> {
		return new ExportReportingExcelApiAbsenceIds<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '3';
	}

	override createNewItem(id : Id | null = null) : ExportReportingExcelApiAbsenceId<ValidationMode> {
		const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('absenceIds');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<ExportReportingExcelApiAbsenceIds<ValidationMode>, ExportReportingExcelApiAbsenceIds<ValidationMode>> = new ApiAttributeInfo<ExportReportingExcelApiAbsenceIds<ValidationMode>, ExportReportingExcelApiAbsenceIds<ValidationMode>>({
			apiObjWrapper: this as any as ExportReportingExcelApiAbsenceIds<ValidationMode>,
			name: 'absenceIds',
			id: 'ABSENCE_IDS',
			primitiveType: PApiPrimitiveTypes.ApiList,
		});
	attributeInfoAbsenceId =  new ApiAttributeInfo<ExportReportingExcelApiAbsenceIds<ValidationMode>, ExportReportingExcelApiAbsenceId<ValidationMode>>({
			apiObjWrapper: this as any as ExportReportingExcelApiAbsenceIds<ValidationMode>,
			name: 'absenceId',
			id: 'ABSENCE_ID',
		});
}

				 
export class ExportReportingExcelApiAbsenceId<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	override parent : any = null;

	constructor(override readonly api : ExportReportingExcelApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, ExportReportingExcelApiAbsenceId as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<ExportReportingExcelApiAbsenceId<ValidationMode>, ExportReportingExcelApiAbsenceId<ValidationMode>> = new ApiAttributeInfo<ExportReportingExcelApiAbsenceId<ValidationMode>, ExportReportingExcelApiAbsenceId<ValidationMode>>({
			apiObjWrapper: this as any as ExportReportingExcelApiAbsenceId<ValidationMode>,
			name: 'absenceId',
			id: 'ABSENCE_ID',
		});


	_fixIds(_idReplacements : Map<any, number>) : void {
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 1);

		}

		// propagate new raw data to children
	}

	protected get dni() : string {
		return '7';
	}

	static loadDetailed(	api : ExportReportingExcelApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '7', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is ExportReportingExcelApiAbsenceId<'validated'> {
		// TODO: PLANO-151346
	}
}

		 export class ExportReportingExcelApiMemberIds<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	override parent : any = null;

	constructor(override readonly api : ExportReportingExcelApiService<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, 'memberIds');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : Id {
		return Id.create(item);
	}

	protected containsPrimitives() : boolean {
		return false;
	}

	protected containsIds() : boolean {
		return true;
	}

	protected createInstance(removeDestroyedItems : boolean) : ExportReportingExcelApiMemberIds<ValidationMode> {
		return new ExportReportingExcelApiMemberIds<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '4';
	}

	override createNewItem() : Id {
		const newItemRaw = null;

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('memberIds');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<ExportReportingExcelApiMemberIds<ValidationMode>, ExportReportingExcelApiMemberIds<ValidationMode>> = new ApiAttributeInfo<ExportReportingExcelApiMemberIds<ValidationMode>, ExportReportingExcelApiMemberIds<ValidationMode>>({
			apiObjWrapper: this as any as ExportReportingExcelApiMemberIds<ValidationMode>,
			name: 'memberIds',
			id: 'MEMBER_IDS',
			primitiveType: PApiPrimitiveTypes.ApiList,
		});
	attributeInfoMemberId =  new ApiAttributeInfo<ExportReportingExcelApiMemberIds<ValidationMode>, Id>({
			apiObjWrapper: this as any as ExportReportingExcelApiMemberIds<ValidationMode>,
			name: 'memberId',
			id: 'MEMBER_ID',
			primitiveType: PApiPrimitiveTypes.Id,
		});
}

				 export class ExportReportingExcelApiShiftModelIds<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	override parent : any = null;

	constructor(override readonly api : ExportReportingExcelApiService<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, 'shiftModelIds');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : Id {
		return Id.create(item);
	}

	protected containsPrimitives() : boolean {
		return false;
	}

	protected containsIds() : boolean {
		return true;
	}

	protected createInstance(removeDestroyedItems : boolean) : ExportReportingExcelApiShiftModelIds<ValidationMode> {
		return new ExportReportingExcelApiShiftModelIds<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '5';
	}

	override createNewItem() : Id {
		const newItemRaw = null;

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('shiftModelIds');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<ExportReportingExcelApiShiftModelIds<ValidationMode>, ExportReportingExcelApiShiftModelIds<ValidationMode>> = new ApiAttributeInfo<ExportReportingExcelApiShiftModelIds<ValidationMode>, ExportReportingExcelApiShiftModelIds<ValidationMode>>({
			apiObjWrapper: this as any as ExportReportingExcelApiShiftModelIds<ValidationMode>,
			name: 'shiftModelIds',
			id: 'SHIFT_MODEL_IDS',
			primitiveType: PApiPrimitiveTypes.ApiList,
		});
	attributeInfoShiftModelId =  new ApiAttributeInfo<ExportReportingExcelApiShiftModelIds<ValidationMode>, Id>({
			apiObjWrapper: this as any as ExportReportingExcelApiShiftModelIds<ValidationMode>,
			name: 'shiftModelId',
			id: 'SHIFT_MODEL_ID',
			primitiveType: PApiPrimitiveTypes.Id,
		});
}

		

