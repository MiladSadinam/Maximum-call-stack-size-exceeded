import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase, INITIALIZED_IN_BACKEND, NullableInDraftMode } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiSaveArgs, ApiLoadArgs, ShiftId, ShiftSelector, ApiListWrapper, SchedulingApiPosSystem, SchedulingApiBooking, SchedulingApiAccountHolderState, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { DateTime, Date, DateExclusiveEnd, LocalTime, Duration, Minutes, Hours, Days, Months, Years, Percent, Email, Search, Tel, Currency, Password, PostalCode, Integer, Url, Iban, Bic, Image } from '@plano/shared/api/base/generated-types.ag';
import { Config } from '@plano/shared/core/config';
import { AbstractControl } from '@angular/forms';
import { ApiErrorService } from '@plano/shared/api/api-error.service';



/**
 * This service enables access to the api "export_shifts_excel".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */

// constants
class Consts
{
	SHIFT_IDS = 1;
	MEMBER_IDS = 2;
	SHIFT_MODEL_IDS = 3;
}


@Injectable({
  providedIn: 'root',
})
export class ExportShiftsExcelApiService<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiBase
{
	consts = new Consts();

	constructor(h : HttpClient
			,	router : Router
			,	apiE : ApiErrorService
			,	zone : NgZone
			,	injector : Injector) {
		super(h, router, apiE, zone, injector, 'export_shifts_excel');
	}

	protected version() : string {
		return 'b855cb1de99587840a62ae769d1db6cb,5bfb388cfca5d37bace562a5b3f4fe6f';
	}

	private dataWrapper = new ExportShiftsExcelApiRoot<ValidationMode>(this);

	get data() : ExportShiftsExcelApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected getRootWrapper() : ExportShiftsExcelApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected recreateRootWrapper() : void {
		this.dataWrapper = new ExportShiftsExcelApiRoot<ValidationMode>(this);
	}
}

		 
export class ExportShiftsExcelApiRoot<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	

	constructor(override readonly api : ExportShiftsExcelApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, ExportShiftsExcelApiRoot as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
		this.shiftIdsWrapper.parent = this as any as ExportShiftsExcelApiRoot<ValidationMode>;
		this.memberIdsWrapper.parent = this as any as ExportShiftsExcelApiRoot<ValidationMode>;
		this.shiftModelIdsWrapper.parent = this as any as ExportShiftsExcelApiRoot<ValidationMode>;
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<ExportShiftsExcelApiRoot<ValidationMode>, ExportShiftsExcelApiRoot<ValidationMode>> = new ApiAttributeInfo<ExportShiftsExcelApiRoot<ValidationMode>, ExportShiftsExcelApiRoot<ValidationMode>>({
			apiObjWrapper: this as any as ExportShiftsExcelApiRoot<ValidationMode>,
			name: '',
			id: 'ROOT',
		});

	private shiftIdsWrapper : ExportShiftsExcelApiShiftIds<ValidationMode> = new ExportShiftsExcelApiShiftIds<ValidationMode>(this.api, false);

	/**
     *  Id list of the shifts to be exported.
     */
	get shiftIds() : ExportShiftsExcelApiShiftIds<ValidationMode> {
		return this.shiftIdsWrapper;
	}

	set shiftIdsTestSetter(v : ExportShiftsExcelApiShiftIds<ValidationMode>) {
        this.setterImpl(1, v.rawData, 'shiftIds', () => {this.shiftIdsWrapper = v;});
	}

	private memberIdsWrapper : ExportShiftsExcelApiMemberIds<ValidationMode> = new ExportShiftsExcelApiMemberIds<ValidationMode>(this.api, false);

	/**
     *  Id list of the members to be exported.
     */
	get memberIds() : ExportShiftsExcelApiMemberIds<ValidationMode> {
		return this.memberIdsWrapper;
	}

	set memberIdsTestSetter(v : ExportShiftsExcelApiMemberIds<ValidationMode>) {
        this.setterImpl(2, v.rawData, 'memberIds', () => {this.memberIdsWrapper = v;});
	}

	private shiftModelIdsWrapper : ExportShiftsExcelApiShiftModelIds<ValidationMode> = new ExportShiftsExcelApiShiftModelIds<ValidationMode>(this.api, false);

	/**
     *  Id list of the shift model to be exported.
     */
	get shiftModelIds() : ExportShiftsExcelApiShiftModelIds<ValidationMode> {
		return this.shiftModelIdsWrapper;
	}

	set shiftModelIdsTestSetter(v : ExportShiftsExcelApiShiftModelIds<ValidationMode>) {
        this.setterImpl(3, v.rawData, 'shiftModelIds', () => {this.shiftModelIdsWrapper = v;});
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
		this.shiftIdsWrapper._fixIds(_idReplacements);
		this.memberIdsWrapper._fixIds(_idReplacements);
		this.shiftModelIdsWrapper._fixIds(_idReplacements);
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 4);

			if(data[1] === null)
				data[1] = Meta.createNewList();
			if(data[2] === null)
				data[2] = Meta.createNewList();
			if(data[3] === null)
				data[3] = Meta.createNewList();
		}

		// propagate new raw data to children
		this.shiftIdsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
		this.memberIdsWrapper._updateRawData(data ? data[2] : null, generateMissingData);
		this.shiftModelIdsWrapper._updateRawData(data ? data[3] : null, generateMissingData);
	}

	protected get dni() : string {
		return '1';
	}

	static loadDetailed(	api : ExportShiftsExcelApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is ExportShiftsExcelApiRoot<'validated'> {
		// TODO: PLANO-151346
	}
}

		 export class ExportShiftsExcelApiShiftIds<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	override parent : any = null;

	constructor(override readonly api : ExportShiftsExcelApiService<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, 'shiftIds');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : ExportShiftsExcelApiShiftId<ValidationMode> {
		const newWrapper = new ExportShiftsExcelApiShiftId<ValidationMode>(this.api);
		newWrapper._updateRawData(item, _generateMissingData);
		return newWrapper;
	}

	protected containsPrimitives() : boolean {
		return false;
	}

	protected containsIds() : boolean {
		return false;
	}

	protected createInstance(removeDestroyedItems : boolean) : ExportShiftsExcelApiShiftIds<ValidationMode> {
		return new ExportShiftsExcelApiShiftIds<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '2';
	}

	override createNewItem(id : Id | null = null) : ExportShiftsExcelApiShiftId<ValidationMode> {
		const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('shiftIds');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<ExportShiftsExcelApiShiftIds<ValidationMode>, ExportShiftsExcelApiShiftIds<ValidationMode>> = new ApiAttributeInfo<ExportShiftsExcelApiShiftIds<ValidationMode>, ExportShiftsExcelApiShiftIds<ValidationMode>>({
			apiObjWrapper: this as any as ExportShiftsExcelApiShiftIds<ValidationMode>,
			name: 'shiftIds',
			id: 'SHIFT_IDS',
			primitiveType: PApiPrimitiveTypes.ApiList,
		});
	attributeInfoShiftId =  new ApiAttributeInfo<ExportShiftsExcelApiShiftIds<ValidationMode>, ExportShiftsExcelApiShiftId<ValidationMode>>({
			apiObjWrapper: this as any as ExportShiftsExcelApiShiftIds<ValidationMode>,
			name: 'shiftId',
			id: 'SHIFT_ID',
		});
}

				 
export class ExportShiftsExcelApiShiftId<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	override parent : any = null;

	constructor(override readonly api : ExportShiftsExcelApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, ExportShiftsExcelApiShiftId as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
	}


	private _id : ShiftId | null = null;
	get id() : ShiftId {
		return this._id !== null ? this._id : ShiftId.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<ExportShiftsExcelApiShiftId<ValidationMode>, ExportShiftsExcelApiShiftId<ValidationMode>> = new ApiAttributeInfo<ExportShiftsExcelApiShiftId<ValidationMode>, ExportShiftsExcelApiShiftId<ValidationMode>>({
			apiObjWrapper: this as any as ExportShiftsExcelApiShiftId<ValidationMode>,
			name: 'shiftId',
			id: 'SHIFT_ID',
		});


	_fixIds(_idReplacements : Map<any, number>) : void {
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : ShiftId.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 1);

		}

		// propagate new raw data to children
	}

	protected get dni() : string {
		return '5';
	}

	static loadDetailed(	api : ExportShiftsExcelApiService<any>
						,	id : ShiftId
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '5', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is ExportShiftsExcelApiShiftId<'validated'> {
		// TODO: PLANO-151346
	}
}

		 export class ExportShiftsExcelApiMemberIds<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	override parent : any = null;

	constructor(override readonly api : ExportShiftsExcelApiService<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, 'memberIds');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : Id {
		return Id.create(item);
	}

	protected containsPrimitives() : boolean {
		return false;
	}

	protected containsIds() : boolean {
		return true;
	}

	protected createInstance(removeDestroyedItems : boolean) : ExportShiftsExcelApiMemberIds<ValidationMode> {
		return new ExportShiftsExcelApiMemberIds<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '3';
	}

	override createNewItem() : Id {
		const newItemRaw = null;

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('memberIds');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<ExportShiftsExcelApiMemberIds<ValidationMode>, ExportShiftsExcelApiMemberIds<ValidationMode>> = new ApiAttributeInfo<ExportShiftsExcelApiMemberIds<ValidationMode>, ExportShiftsExcelApiMemberIds<ValidationMode>>({
			apiObjWrapper: this as any as ExportShiftsExcelApiMemberIds<ValidationMode>,
			name: 'memberIds',
			id: 'MEMBER_IDS',
			primitiveType: PApiPrimitiveTypes.ApiList,
		});
	attributeInfoMemberId =  new ApiAttributeInfo<ExportShiftsExcelApiMemberIds<ValidationMode>, Id>({
			apiObjWrapper: this as any as ExportShiftsExcelApiMemberIds<ValidationMode>,
			name: 'memberId',
			id: 'MEMBER_ID',
			primitiveType: PApiPrimitiveTypes.Id,
		});
}

				 export class ExportShiftsExcelApiShiftModelIds<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	override parent : any = null;

	constructor(override readonly api : ExportShiftsExcelApiService<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, 'shiftModelIds');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : Id {
		return Id.create(item);
	}

	protected containsPrimitives() : boolean {
		return false;
	}

	protected containsIds() : boolean {
		return true;
	}

	protected createInstance(removeDestroyedItems : boolean) : ExportShiftsExcelApiShiftModelIds<ValidationMode> {
		return new ExportShiftsExcelApiShiftModelIds<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '4';
	}

	override createNewItem() : Id {
		const newItemRaw = null;

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('shiftModelIds');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<ExportShiftsExcelApiShiftModelIds<ValidationMode>, ExportShiftsExcelApiShiftModelIds<ValidationMode>> = new ApiAttributeInfo<ExportShiftsExcelApiShiftModelIds<ValidationMode>, ExportShiftsExcelApiShiftModelIds<ValidationMode>>({
			apiObjWrapper: this as any as ExportShiftsExcelApiShiftModelIds<ValidationMode>,
			name: 'shiftModelIds',
			id: 'SHIFT_MODEL_IDS',
			primitiveType: PApiPrimitiveTypes.ApiList,
		});
	attributeInfoShiftModelId =  new ApiAttributeInfo<ExportShiftsExcelApiShiftModelIds<ValidationMode>, Id>({
			apiObjWrapper: this as any as ExportShiftsExcelApiShiftModelIds<ValidationMode>,
			name: 'shiftModelId',
			id: 'SHIFT_MODEL_ID',
			primitiveType: PApiPrimitiveTypes.Id,
		});
}

		

