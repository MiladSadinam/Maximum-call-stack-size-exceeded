import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase, INITIALIZED_IN_BACKEND, NullableInDraftMode } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiSaveArgs, ApiLoadArgs, ShiftId, ShiftSelector, ApiListWrapper, SchedulingApiPosSystem, SchedulingApiBooking, SchedulingApiAccountHolderState, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { DateTime, Date, DateExclusiveEnd, LocalTime, Duration, Minutes, Hours, Days, Months, Years, Percent, Email, Search, Tel, Currency, Password, PostalCode, Integer, Url, Iban, Bic, Image } from '@plano/shared/api/base/generated-types.ag';
import { Config } from '@plano/shared/core/config';
import { AbstractControl } from '@angular/forms';
import { ApiErrorService } from '@plano/shared/api/api-error.service';



/**
 * This service enables access to the api "export_transactions_excel".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */

// constants
class Consts
{
	TRANSACTION_IDS = 1;
	SHIFT_MODEL_IDS = 2;
}


@Injectable({
  providedIn: 'root',
})
export class ExportTransactionsExcelApiService<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiBase
{
	consts = new Consts();

	constructor(h : HttpClient
			,	router : Router
			,	apiE : ApiErrorService
			,	zone : NgZone
			,	injector : Injector) {
		super(h, router, apiE, zone, injector, 'export_transactions_excel');
	}

	protected version() : string {
		return '0b02ddbb4b4a8325235624409473ab0d,6f1e237e3f3ce845c3fc1b14ac2d93a9';
	}

	private dataWrapper = new ExportTransactionsExcelApiRoot<ValidationMode>(this);

	get data() : ExportTransactionsExcelApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected getRootWrapper() : ExportTransactionsExcelApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected recreateRootWrapper() : void {
		this.dataWrapper = new ExportTransactionsExcelApiRoot<ValidationMode>(this);
	}
}

		 
export class ExportTransactionsExcelApiRoot<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	

	constructor(override readonly api : ExportTransactionsExcelApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, ExportTransactionsExcelApiRoot as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
		this.transactionIdsWrapper.parent = this as any as ExportTransactionsExcelApiRoot<ValidationMode>;
		this.shiftModelIdsWrapper.parent = this as any as ExportTransactionsExcelApiRoot<ValidationMode>;
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<ExportTransactionsExcelApiRoot<ValidationMode>, ExportTransactionsExcelApiRoot<ValidationMode>> = new ApiAttributeInfo<ExportTransactionsExcelApiRoot<ValidationMode>, ExportTransactionsExcelApiRoot<ValidationMode>>({
			apiObjWrapper: this as any as ExportTransactionsExcelApiRoot<ValidationMode>,
			name: '',
			id: 'ROOT',
			show: function(this : ExportTransactionsExcelApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))  || (
						this.api!.schedulingApi.currentlyDetailedLoaded instanceof SchedulingApiBooking &&
						this.api!.rightsService.hasManagerRightsForShiftModel(this.api!.schedulingApi.currentlyDetailedLoaded.shiftModelId)
					) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : ExportTransactionsExcelApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER))  || (
						this.api!.schedulingApi.currentlyDetailedLoaded instanceof SchedulingApiBooking &&
						this.api!.rightsService.hasManagerRightsForShiftModel(this.api!.schedulingApi.currentlyDetailedLoaded.shiftModelId)
					) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : ExportTransactionsExcelApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.CLIENT_OWNER)) )))
		{
			return true;
		}
				return false;
			},
		});

	private transactionIdsWrapper : ExportTransactionsExcelApiTransactionIds<ValidationMode> = new ExportTransactionsExcelApiTransactionIds<ValidationMode>(this.api, false);

	/**
     *  Id list of the transactions to be exported.
     */
	get transactionIds() : ExportTransactionsExcelApiTransactionIds<ValidationMode> {
		return this.transactionIdsWrapper;
	}

	set transactionIdsTestSetter(v : ExportTransactionsExcelApiTransactionIds<ValidationMode>) {
        this.setterImpl(1, v.rawData, 'transactionIds', () => {this.transactionIdsWrapper = v;});
	}

	private shiftModelIdsWrapper : ExportTransactionsExcelApiShiftModelIds<ValidationMode> = new ExportTransactionsExcelApiShiftModelIds<ValidationMode>(this.api, false);

	/**
     *  Id list of the shift model to be exported.
     */
	get shiftModelIds() : ExportTransactionsExcelApiShiftModelIds<ValidationMode> {
		return this.shiftModelIdsWrapper;
	}

	set shiftModelIdsTestSetter(v : ExportTransactionsExcelApiShiftModelIds<ValidationMode>) {
        this.setterImpl(2, v.rawData, 'shiftModelIds', () => {this.shiftModelIdsWrapper = v;});
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
		this.transactionIdsWrapper._fixIds(_idReplacements);
		this.shiftModelIdsWrapper._fixIds(_idReplacements);
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 3);

			if(data[1] === null)
				data[1] = Meta.createNewList();
			if(data[2] === null)
				data[2] = Meta.createNewList();
		}

		// propagate new raw data to children
		this.transactionIdsWrapper._updateRawData(data ? data[1] : null, generateMissingData);
		this.shiftModelIdsWrapper._updateRawData(data ? data[2] : null, generateMissingData);
	}

	protected get dni() : string {
		return '1';
	}

	static loadDetailed(	api : ExportTransactionsExcelApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is ExportTransactionsExcelApiRoot<'validated'> {
		// TODO: PLANO-151346
	}
}

		 export class ExportTransactionsExcelApiTransactionIds<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	override parent : any = null;

	constructor(override readonly api : ExportTransactionsExcelApiService<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, 'transactionIds');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : ExportTransactionsExcelApiTransactionId<ValidationMode> {
		const newWrapper = new ExportTransactionsExcelApiTransactionId<ValidationMode>(this.api);
		newWrapper._updateRawData(item, _generateMissingData);
		return newWrapper;
	}

	protected containsPrimitives() : boolean {
		return false;
	}

	protected containsIds() : boolean {
		return false;
	}

	protected createInstance(removeDestroyedItems : boolean) : ExportTransactionsExcelApiTransactionIds<ValidationMode> {
		return new ExportTransactionsExcelApiTransactionIds<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '2';
	}

	override createNewItem(id : Id | null = null) : ExportTransactionsExcelApiTransactionId<ValidationMode> {
		const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('transactionIds');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<ExportTransactionsExcelApiTransactionIds<ValidationMode>, ExportTransactionsExcelApiTransactionIds<ValidationMode>> = new ApiAttributeInfo<ExportTransactionsExcelApiTransactionIds<ValidationMode>, ExportTransactionsExcelApiTransactionIds<ValidationMode>>({
			apiObjWrapper: this as any as ExportTransactionsExcelApiTransactionIds<ValidationMode>,
			name: 'transactionIds',
			id: 'TRANSACTION_IDS',
			primitiveType: PApiPrimitiveTypes.ApiList,
		});
	attributeInfoTransactionId =  new ApiAttributeInfo<ExportTransactionsExcelApiTransactionIds<ValidationMode>, ExportTransactionsExcelApiTransactionId<ValidationMode>>({
			apiObjWrapper: this as any as ExportTransactionsExcelApiTransactionIds<ValidationMode>,
			name: 'transactionId',
			id: 'TRANSACTION_ID',
		});
}

				 
export class ExportTransactionsExcelApiTransactionId<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	override parent : any = null;

	constructor(override readonly api : ExportTransactionsExcelApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, ExportTransactionsExcelApiTransactionId as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<ExportTransactionsExcelApiTransactionId<ValidationMode>, ExportTransactionsExcelApiTransactionId<ValidationMode>> = new ApiAttributeInfo<ExportTransactionsExcelApiTransactionId<ValidationMode>, ExportTransactionsExcelApiTransactionId<ValidationMode>>({
			apiObjWrapper: this as any as ExportTransactionsExcelApiTransactionId<ValidationMode>,
			name: 'transactionId',
			id: 'TRANSACTION_ID',
		});


	_fixIds(_idReplacements : Map<any, number>) : void {
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 1);

		}

		// propagate new raw data to children
	}

	protected get dni() : string {
		return '4';
	}

	static loadDetailed(	api : ExportTransactionsExcelApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '4', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is ExportTransactionsExcelApiTransactionId<'validated'> {
		// TODO: PLANO-151346
	}
}

		 export class ExportTransactionsExcelApiShiftModelIds<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	override parent : any = null;

	constructor(override readonly api : ExportTransactionsExcelApiService<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, 'shiftModelIds');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : Id {
		return Id.create(item);
	}

	protected containsPrimitives() : boolean {
		return false;
	}

	protected containsIds() : boolean {
		return true;
	}

	protected createInstance(removeDestroyedItems : boolean) : ExportTransactionsExcelApiShiftModelIds<ValidationMode> {
		return new ExportTransactionsExcelApiShiftModelIds<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '3';
	}

	override createNewItem() : Id {
		const newItemRaw = null;

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('shiftModelIds');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<ExportTransactionsExcelApiShiftModelIds<ValidationMode>, ExportTransactionsExcelApiShiftModelIds<ValidationMode>> = new ApiAttributeInfo<ExportTransactionsExcelApiShiftModelIds<ValidationMode>, ExportTransactionsExcelApiShiftModelIds<ValidationMode>>({
			apiObjWrapper: this as any as ExportTransactionsExcelApiShiftModelIds<ValidationMode>,
			name: 'shiftModelIds',
			id: 'SHIFT_MODEL_IDS',
			primitiveType: PApiPrimitiveTypes.ApiList,
		});
	attributeInfoShiftModelId =  new ApiAttributeInfo<ExportTransactionsExcelApiShiftModelIds<ValidationMode>, Id>({
			apiObjWrapper: this as any as ExportTransactionsExcelApiShiftModelIds<ValidationMode>,
			name: 'shiftModelId',
			id: 'SHIFT_MODEL_ID',
			primitiveType: PApiPrimitiveTypes.Id,
		});
}

		

