import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase, INITIALIZED_IN_BACKEND, NullableInDraftMode } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiSaveArgs, ApiLoadArgs, ShiftId, ShiftSelector, ApiListWrapper, SchedulingApiPosSystem, SchedulingApiBooking, SchedulingApiAccountHolderState, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { DateTime, Date, DateExclusiveEnd, LocalTime, Duration, Minutes, Hours, Days, Months, Years, Percent, Email, Search, Tel, Currency, Password, PostalCode, Integer, Url, Iban, Bic, Image } from '@plano/shared/api/base/generated-types.ag';
import { Config } from '@plano/shared/core/config';
import { AbstractControl } from '@angular/forms';
import { ApiErrorService } from '@plano/shared/api/api-error.service';



/**
 * This service enables access to the api "booking_system_data".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */

// constants
class Consts
{
	LOCALE = 1;
	LOCATION_NAME = 2;
	BOOKING_PAGE_COVER = 3;
	COMPANY_LOGO = 4;
	LOCATION_HOMEPAGE = 5;
	TERMS_URL = 6;
	DATA_PROTECTION_URL = 7;
	TERMS_OF_PARTICIPATION_URL = 8;
	CANCELLATION_POLICY_URL = 9;
	CONTACT_MAIL_TO = 10;
}


@Injectable({
  providedIn: 'root',
})
export class BookingSystemDataApiService<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiBase
{
	consts = new Consts();

	constructor(h : HttpClient
			,	router : Router
			,	apiE : ApiErrorService
			,	zone : NgZone
			,	injector : Injector) {
		super(h, router, apiE, zone, injector, 'booking_system_data');
	}

	protected version() : string {
		return '5d8f81ac7c83e2fa19ebddd22502db2c,0fce361f8b9180a1c708acae47a72e48';
	}

	private dataWrapper = new BookingSystemDataApiRoot<ValidationMode>(this);

	get data() : BookingSystemDataApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected getRootWrapper() : BookingSystemDataApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected recreateRootWrapper() : void {
		this.dataWrapper = new BookingSystemDataApiRoot<ValidationMode>(this);
	}
}

		 
export class BookingSystemDataApiRoot<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	

	constructor(override readonly api : BookingSystemDataApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, BookingSystemDataApiRoot as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<BookingSystemDataApiRoot<ValidationMode>, BookingSystemDataApiRoot<ValidationMode>> = new ApiAttributeInfo<BookingSystemDataApiRoot<ValidationMode>, BookingSystemDataApiRoot<ValidationMode>>({
			apiObjWrapper: this as any as BookingSystemDataApiRoot<ValidationMode>,
			name: '',
			id: 'ROOT',
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoLocale =  new ApiAttributeInfo<BookingSystemDataApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as BookingSystemDataApiRoot<ValidationMode>,
			name: 'locale',
			id: 'LOCALE',
			primitiveType: PApiPrimitiveTypes.string,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoLocationName =  new ApiAttributeInfo<BookingSystemDataApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as BookingSystemDataApiRoot<ValidationMode>,
			name: 'locationName',
			id: 'LOCATION_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoBookingPageCover =  new ApiAttributeInfo<BookingSystemDataApiRoot<ValidationMode>, Image>({
			apiObjWrapper: this as any as BookingSystemDataApiRoot<ValidationMode>,
			name: 'bookingPageCover',
			id: 'BOOKING_PAGE_COVER',
			primitiveType: PApiPrimitiveTypes.Image,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoCompanyLogo =  new ApiAttributeInfo<BookingSystemDataApiRoot<ValidationMode>, Image>({
			apiObjWrapper: this as any as BookingSystemDataApiRoot<ValidationMode>,
			name: 'companyLogo',
			id: 'COMPANY_LOGO',
			primitiveType: PApiPrimitiveTypes.Image,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoLocationHomepage =  new ApiAttributeInfo<BookingSystemDataApiRoot<ValidationMode>, Url>({
			apiObjWrapper: this as any as BookingSystemDataApiRoot<ValidationMode>,
			name: 'locationHomepage',
			id: 'LOCATION_HOMEPAGE',
			primitiveType: PApiPrimitiveTypes.Url,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoTermsUrl =  new ApiAttributeInfo<BookingSystemDataApiRoot<ValidationMode>, Url>({
			apiObjWrapper: this as any as BookingSystemDataApiRoot<ValidationMode>,
			name: 'termsUrl',
			id: 'TERMS_URL',
			primitiveType: PApiPrimitiveTypes.Url,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoDataProtectionUrl =  new ApiAttributeInfo<BookingSystemDataApiRoot<ValidationMode>, Url>({
			apiObjWrapper: this as any as BookingSystemDataApiRoot<ValidationMode>,
			name: 'dataProtectionUrl',
			id: 'DATA_PROTECTION_URL',
			primitiveType: PApiPrimitiveTypes.Url,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoTermsOfParticipationUrl =  new ApiAttributeInfo<BookingSystemDataApiRoot<ValidationMode>, Url>({
			apiObjWrapper: this as any as BookingSystemDataApiRoot<ValidationMode>,
			name: 'termsOfParticipationUrl',
			id: 'TERMS_OF_PARTICIPATION_URL',
			primitiveType: PApiPrimitiveTypes.Url,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoCancellationPolicyUrl =  new ApiAttributeInfo<BookingSystemDataApiRoot<ValidationMode>, Url>({
			apiObjWrapper: this as any as BookingSystemDataApiRoot<ValidationMode>,
			name: 'cancellationPolicyUrl',
			id: 'CANCELLATION_POLICY_URL',
			primitiveType: PApiPrimitiveTypes.Url,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoContactMailTo =  new ApiAttributeInfo<BookingSystemDataApiRoot<ValidationMode>, Email>({
			apiObjWrapper: this as any as BookingSystemDataApiRoot<ValidationMode>,
			name: 'contactMailTo',
			id: 'CONTACT_MAIL_TO',
			primitiveType: PApiPrimitiveTypes.Email,
			canEdit: () => false,
			readMode: () => true,
		});

	/**
     *  The locale of the client.
	 *
	 * @type {string}
     */
	get locale() : NullableInDraftMode<string, ValidationMode> {
		return this.data[1];
	}

	set localeTestSetter(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(1, v, 'locale');
	}

	/**
     *  The client location name.
	 *
	 * @type {string}
     */
	get locationName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[2];
	}

	set locationNameTestSetter(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(2, v, 'locationName');
	}

	/**
     *  Cover image of the booking page.
	 *
	 * @type {Image}
     */
	get bookingPageCover() : Image | null {
		const path = this.data[3] as string;
		return path ? Config.API_IMAGE_BASE_URL + path : path;
	}

	set bookingPageCoverTestSetter(v : Image | null) {
        this.setterImpl(3, v, 'bookingPageCover');
	}

	/**
     *  Logo of the client.
	 *
	 * @type {Image}
     */
	get companyLogo() : Image | null {
		const path = this.data[4] as string;
		return path ? Config.API_IMAGE_BASE_URL + path : path;
	}

	set companyLogoTestSetter(v : Image | null) {
        this.setterImpl(4, v, 'companyLogo');
	}

	/**
     *  Homepage of the client.
	 *
	 * @type {Url}
     */
	get locationHomepage() : Url | null {
		return this.data[5];
	}

	set locationHomepageTestSetter(v : Url | null) {
        this.setterImpl(5, v, 'locationHomepage');
	}

	/**
     *  Client's terms page url.
	 *
	 * @type {Url}
     */
	get termsUrl() : Url | null {
		return this.data[6];
	}

	set termsUrlTestSetter(v : Url | null) {
        this.setterImpl(6, v, 'termsUrl');
	}

	/**
     *  Client's data protection page url.
	 *
	 * @type {Url}
     */
	get dataProtectionUrl() : Url | null {
		return this.data[7];
	}

	set dataProtectionUrlTestSetter(v : Url | null) {
        this.setterImpl(7, v, 'dataProtectionUrl');
	}

	/**
     *  Client's terms of participation page url.
	 *
	 * @type {Url}
     */
	get termsOfParticipationUrl() : Url | null {
		return this.data[8];
	}

	set termsOfParticipationUrlTestSetter(v : Url | null) {
        this.setterImpl(8, v, 'termsOfParticipationUrl');
	}

	/**
     *  Client's cancellation policy page url.
	 *
	 * @type {Url}
     */
	get cancellationPolicyUrl() : Url | null {
		return this.data[9];
	}

	set cancellationPolicyUrlTestSetter(v : Url | null) {
        this.setterImpl(9, v, 'cancellationPolicyUrl');
	}

	/**
     *  Contact email for current booking process.
	 *
	 * @type {Email}
     */
	get contactMailTo() : NullableInDraftMode<Email, ValidationMode> {
		return this.data[10];
	}

	set contactMailToTestSetter(v : NullableInDraftMode<Email, ValidationMode>) {
        this.setterImpl(10, v, 'contactMailTo');
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 11);

		}

		// propagate new raw data to children
	}

	protected get dni() : string {
		return '1';
	}

	static loadDetailed(	api : BookingSystemDataApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is BookingSystemDataApiRoot<'validated'> {
		// TODO: PLANO-151346
	}
}



