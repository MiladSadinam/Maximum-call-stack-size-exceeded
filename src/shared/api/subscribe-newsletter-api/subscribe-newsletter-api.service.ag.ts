import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase, INITIALIZED_IN_BACKEND, NullableInDraftMode } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiSaveArgs, ApiLoadArgs, ShiftId, ShiftSelector, ApiListWrapper, SchedulingApiPosSystem, SchedulingApiBooking, SchedulingApiAccountHolderState, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { DateTime, Date, DateExclusiveEnd, LocalTime, Duration, Minutes, Hours, Days, Months, Years, Percent, Email, Search, Tel, Currency, Password, PostalCode, Integer, Url, Iban, Bic, Image } from '@plano/shared/api/base/generated-types.ag';
import { Config } from '@plano/shared/core/config';
import { AbstractControl } from '@angular/forms';
import { ApiErrorService } from '@plano/shared/api/api-error.service';



/**
 * This service enables access to the api "subscribe_newsletter".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */

// constants
class Consts
{
	EMAIL = 1;
	FIRST_NAME = 2;
	LAST_NAME = 3;
	COMPANY = 4;
	LOCALE_ID = 5;
}


@Injectable({
  providedIn: 'root',
})
export class SubscribeNewsletterApiService<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiBase
{
	consts = new Consts();

	constructor(h : HttpClient
			,	router : Router
			,	apiE : ApiErrorService
			,	zone : NgZone
			,	injector : Injector) {
		super(h, router, apiE, zone, injector, 'subscribe_newsletter');
	}

	protected version() : string {
		return '0154a4a7a2852dae6f8c1bd6c7c6d8a4,6b518b408f955064cfd095fa252545aa';
	}

	private dataWrapper = new SubscribeNewsletterApiRoot<ValidationMode>(this);

	get data() : SubscribeNewsletterApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected getRootWrapper() : SubscribeNewsletterApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected recreateRootWrapper() : void {
		this.dataWrapper = new SubscribeNewsletterApiRoot<ValidationMode>(this);
	}
}

		 
export class SubscribeNewsletterApiRoot<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	

	constructor(override readonly api : SubscribeNewsletterApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, SubscribeNewsletterApiRoot as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<SubscribeNewsletterApiRoot<ValidationMode>, SubscribeNewsletterApiRoot<ValidationMode>> = new ApiAttributeInfo<SubscribeNewsletterApiRoot<ValidationMode>, SubscribeNewsletterApiRoot<ValidationMode>>({
			apiObjWrapper: this as any as SubscribeNewsletterApiRoot<ValidationMode>,
			name: '',
			id: 'ROOT',
		});
	attributeInfoEmail =  new ApiAttributeInfo<SubscribeNewsletterApiRoot<ValidationMode>, Email>({
			apiObjWrapper: this as any as SubscribeNewsletterApiRoot<ValidationMode>,
			name: 'email',
			id: 'EMAIL',
			primitiveType: PApiPrimitiveTypes.Email,
			validations: function(this : SubscribeNewsletterApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.Email, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoFirstName =  new ApiAttributeInfo<SubscribeNewsletterApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as SubscribeNewsletterApiRoot<ValidationMode>,
			name: 'firstName',
			id: 'FIRST_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			validations: function(this : SubscribeNewsletterApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoLastName =  new ApiAttributeInfo<SubscribeNewsletterApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as SubscribeNewsletterApiRoot<ValidationMode>,
			name: 'lastName',
			id: 'LAST_NAME',
			primitiveType: PApiPrimitiveTypes.string,
			validations: function(this : SubscribeNewsletterApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoCompany =  new ApiAttributeInfo<SubscribeNewsletterApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as SubscribeNewsletterApiRoot<ValidationMode>,
			name: 'company',
			id: 'COMPANY',
			primitiveType: PApiPrimitiveTypes.string,
			validations: function(this : SubscribeNewsletterApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoLocaleId =  new ApiAttributeInfo<SubscribeNewsletterApiRoot<ValidationMode>, string>({
			apiObjWrapper: this as any as SubscribeNewsletterApiRoot<ValidationMode>,
			name: 'localeId',
			id: 'LOCALE_ID',
			primitiveType: PApiPrimitiveTypes.string,
			validations: function(this : SubscribeNewsletterApiRoot<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.string, undefined);
							return null;
					},
				];
			},
		});


	set email(v : NullableInDraftMode<Email, ValidationMode>) {
        this.setterImpl(1, v, 'email');
	}


	set firstName(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(2, v, 'firstName');
	}


	set lastName(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(3, v, 'lastName');
	}


	set company(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(4, v, 'company');
	}


	set localeId(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(5, v, 'localeId');
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 6);

		}

		// propagate new raw data to children
	}

	protected get dni() : string {
		return '1';
	}

	static loadDetailed(	api : SubscribeNewsletterApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '1', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is SubscribeNewsletterApiRoot<'validated'> {
		// TODO: PLANO-151346
	}
}



