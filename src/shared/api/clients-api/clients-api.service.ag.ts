import { Injectable, NgZone, Injector } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { Router } from '@angular/router';
import { ApiBase, INITIALIZED_IN_BACKEND, NullableInDraftMode } from '@plano/shared/api/base/api-base';
import { Id } from '@plano/shared/api/base/id';
import { Meta } from '@plano/shared/api/base/meta';
import { ApiAttributeInfo } from '@plano/shared/api/base/api-attribute-info';
import { PApiPrimitiveTypes } from '@plano/shared/api/base/generated-types.ag';
import { ApiSaveArgs, ApiLoadArgs, ShiftId, ShiftSelector, ApiListWrapper, SchedulingApiPosSystem, SchedulingApiBooking, SchedulingApiAccountHolderState, ApiObjectWrapper, AuthenticatedApiRole } from '@plano/shared/api';
import { DateTime, Date, DateExclusiveEnd, LocalTime, Duration, Minutes, Hours, Days, Months, Years, Percent, Email, Search, Tel, Currency, Password, PostalCode, Integer, Url, Iban, Bic, Image } from '@plano/shared/api/base/generated-types.ag';
import { Config } from '@plano/shared/core/config';
import { AbstractControl } from '@angular/forms';
import { ApiErrorService } from '@plano/shared/api/api-error.service';

import { ClientsApiClient } from '@plano/shared/api';


/**
 * This service enables access to the api "admin/clients".
 * This file is auto generated by de.sage.scheduler.api_generator.ApiGenerator.
 */

// constants
class Consts
{
	CLIENT_COMPANY_NAME = 1;
	CLIENT_LOCATION_NAME = 2;
	CLIENT_TYPE = 3;
	CLIENT_TEST_ACCOUNT_DEADLINE = 4;
	CLIENT_TERMINATION_DATE = 5;
	CLIENT_LOCATION_COUNTRY = 6;
	CLIENT_ADYEN_ACCOUNT = 7;
	CLIENT_BILLING = 8;
	CLIENT_TEST_ACCOUNT_DURATION = 9;
	CLIENT_BILLING_COUNTRY = 1;
	CLIENT_BILLING_HAS_TO_PAY_VAT = 2;
	CLIENT_BILLING_DISABLE_INVOICE_CREATION = 3;
	CLIENT_BILLING_VAT_NUMBER = 4;
	CLIENT_BILLING_DISCOUNT_VALUE = 5;
	CLIENT_BILLING_DISCOUNT_TYPE = 6;
	CLIENT_BILLING_DISCOUNT_START = 7;
	CLIENT_BILLING_DISCOUNT_END = 8;
	CLIENT_BILLING_BILLED_MEMBERS_COUNT_MAX = 9;
	CLIENT_BILLING_BILLED_MEMBERS_COUNT_SUBTRACT = 10;
	CLIENT_BILLING_DISCOUNT_COMMENT = 11;
	CLIENT_BILLING_CREDIT = 12;
	CLIENT_ADYEN_ACCOUNT_AUTO_DEBIT_ENABLED = 1;
	CLIENT_ADYEN_ACCOUNT_BALANCE = 2;
	CLIENT_ADYEN_ACCOUNT_DESIRED_DEPOSIT = 3;
	CLIENT_ADYEN_ACCOUNT_ONBOARDING_PASSED_DATE = 4;
	CLIENT_ADYEN_ACCOUNT_ACCOUNT_HOLDER_CODE = 5;
	CLIENT_ADYEN_ACCOUNT_LAST_TRANSFER_FUNDS_EXECUTION_DATE = 6;
	CLIENT_ADYEN_ACCOUNT_LAST_AUTO_DEBIT_DATE = 7;
	CLIENT_ADYEN_ACCOUNT_ACCOUNT_HOLDER_PAYOUT_STATE = 8;
	CLIENT_ADYEN_ACCOUNT_ACCOUNT_HOLDER_PROCESSING_STATE = 9;
	CLIENT_ADYEN_ACCOUNT_OUTSTANDING_TRANSFER_FUNDS = 10;
	CLIENT_ADYEN_ACCOUNT_TRIGGER_PAYOUT_PROCESS = 11;
	CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK = 12;
	CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK_EXPECTED_BALANCE = 1;
	CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK_ACTUAL_BALANCE = 2;
	CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK_ACTUAL_PENDING_BALANCE = 3;
	CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK_ACTUAL_ON_HOLD_BALANCE = 4;
}


@Injectable({
  providedIn: 'root',
})
export class ClientsApiService<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiBase
{
	consts = new Consts();

	constructor(h : HttpClient
			,	router : Router
			,	apiE : ApiErrorService
			,	zone : NgZone
			,	injector : Injector) {
		super(h, router, apiE, zone, injector, 'admin/clients');
	}

	protected version() : string {
		return 'e2952b59288daac1d1d2c123a17c8239,b797d10b0e01922359937fc8e21374e3';
	}

	private dataWrapper = new ClientsApiRoot<ValidationMode>(this, false);

	get data() : ClientsApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected getRootWrapper() : ClientsApiRoot<ValidationMode> {
		return this.dataWrapper;
	}

	protected recreateRootWrapper() : void {
		this.dataWrapper = new ClientsApiRoot<ValidationMode>(this, false);
	}
}

		 export class ClientsApiRoot<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiListWrapper<any>
{
	

	constructor(override readonly api : ClientsApiService<ValidationMode> | null, removeDestroyedItems : boolean) {
		super(api, removeDestroyedItems, '');
	}

	override wrapItem(item : any, _generateMissingData : boolean) : ClientsApiClient<ValidationMode> {
		const newWrapper = new ClientsApiClient<ValidationMode>(this.api);
		newWrapper._updateRawData(item, _generateMissingData);
		return newWrapper;
	}

	protected containsPrimitives() : boolean {
		return false;
	}

	protected containsIds() : boolean {
		return false;
	}

	protected createInstance(removeDestroyedItems : boolean) : ClientsApiRoot<ValidationMode> {
		return new ClientsApiRoot<ValidationMode>(this.api, removeDestroyedItems);
	}

	protected get dni() : string {
		return '1';
	}

	override createNewItem(id : Id | null = null) : ClientsApiClient<ValidationMode> {
		const newItemRaw = Meta.createNewObject(false, !!id ? id.rawData : null);

		const newItem = this.wrapItem(newItemRaw, true);
		this.push(newItem);

		if(this.api)
			this.api.changed('');

		return newItem;
	}

	override attributeInfoThis : ApiAttributeInfo<ClientsApiRoot<ValidationMode>, ClientsApiRoot<ValidationMode>> = new ApiAttributeInfo<ClientsApiRoot<ValidationMode>, ClientsApiRoot<ValidationMode>>({
			apiObjWrapper: this as any as ClientsApiRoot<ValidationMode>,
			name: '',
			id: 'ROOT',
			primitiveType: PApiPrimitiveTypes.ApiList,
			show: function(this : ClientsApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN)) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : ClientsApiRoot<ValidationMode>) {
		if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN)) )))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : ClientsApiRoot<ValidationMode>) {
						if(!(( (this.api!.rightsService.requesterIs(AuthenticatedApiRole.SUPER_ADMIN)) )))
		{
			return true;
		}
				return false;
			},
		});
}

				 
export class ClientsApiClientBase<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	override parent : any = null;

	constructor(override readonly api : ClientsApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, ClientsApiClient as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
		this.adyenAccountWrapper.parent = this as any as ClientsApiClient<ValidationMode>;
		this.billingWrapper.parent = this as any as ClientsApiClient<ValidationMode>;
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<ClientsApiClient<ValidationMode>, ClientsApiClient<ValidationMode>> = new ApiAttributeInfo<ClientsApiClient<ValidationMode>, ClientsApiClient<ValidationMode>>({
			apiObjWrapper: this as any as ClientsApiClient<ValidationMode>,
			name: 'client',
			id: 'CLIENT',
		});
	attributeInfoCompanyName =  new ApiAttributeInfo<ClientsApiClient<ValidationMode>, string>({
			apiObjWrapper: this as any as ClientsApiClient<ValidationMode>,
			name: 'companyName',
			id: 'CLIENT_COMPANY_NAME',
			primitiveType: PApiPrimitiveTypes.string,
		});
	attributeInfoLocationName =  new ApiAttributeInfo<ClientsApiClient<ValidationMode>, string>({
			apiObjWrapper: this as any as ClientsApiClient<ValidationMode>,
			name: 'locationName',
			id: 'CLIENT_LOCATION_NAME',
			primitiveType: PApiPrimitiveTypes.string,
		});
	attributeInfoType =  new ApiAttributeInfo<ClientsApiClient<ValidationMode>, ClientsApiType>({
			apiObjWrapper: this as any as ClientsApiClient<ValidationMode>,
			name: 'type',
			id: 'CLIENT_TYPE',
			primitiveType: PApiPrimitiveTypes.Enum,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoTestAccountDeadline =  new ApiAttributeInfo<ClientsApiClient<ValidationMode>, DateTime>({
			apiObjWrapper: this as any as ClientsApiClient<ValidationMode>,
			name: 'testAccountDeadline',
			id: 'CLIENT_TEST_ACCOUNT_DEADLINE',
			primitiveType: PApiPrimitiveTypes.DateTime,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoTerminationDate =  new ApiAttributeInfo<ClientsApiClient<ValidationMode>, Date>({
			apiObjWrapper: this as any as ClientsApiClient<ValidationMode>,
			name: 'terminationDate',
			id: 'CLIENT_TERMINATION_DATE',
			primitiveType: PApiPrimitiveTypes.Date,
			show: function(this : ClientsApiClient<ValidationMode>) {
		if(!(( (this.type === ClientsApiType.PAID)  || (this.type === ClientsApiType.TERMINATED) )))
		{
			return false;
		}
				return true;
			},
			canEdit: function(this : ClientsApiClient<ValidationMode>) {
		if(!((this.type === ClientsApiType.PAID)))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : ClientsApiClient<ValidationMode>) {
				 
		
				return false;
			},
		});
	attributeInfoLocationCountry =  new ApiAttributeInfo<ClientsApiClient<ValidationMode>, ClientsApiCountry>({
			apiObjWrapper: this as any as ClientsApiClient<ValidationMode>,
			name: 'locationCountry',
			id: 'CLIENT_LOCATION_COUNTRY',
			primitiveType: PApiPrimitiveTypes.Enum,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoTestAccountDuration =  new ApiAttributeInfo<ClientsApiClient<ValidationMode>, Days>({
			apiObjWrapper: this as any as ClientsApiClient<ValidationMode>,
			name: 'testAccountDuration',
			id: 'CLIENT_TEST_ACCOUNT_DURATION',
			primitiveType: PApiPrimitiveTypes.Days,
		});

	/**
     *  Name of the client.
	 *
	 * @type {string}
     */
	get companyName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[1];
	}

	set companyName(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(1, v, 'companyName');
	}

	/**
     *  Location Name of the client.
	 *
	 * @type {string}
     */
	get locationName() : NullableInDraftMode<string, ValidationMode> {
		return this.data[2];
	}

	set locationName(v : NullableInDraftMode<string, ValidationMode>) {
        this.setterImpl(2, v, 'locationName');
	}

	/**
     *  Client type. Read-only
	 *
	 * @type {ClientsApiType}
     */
	get type() : NullableInDraftMode<ClientsApiType, ValidationMode> {
		return this.data[3];
	}

	set typeTestSetter(v : NullableInDraftMode<ClientsApiType, ValidationMode>) {
        this.setterImpl(3, v, 'type');
	}

	/**
     *  Deadline of the test account. Read-only.
	 *
	 * @type {DateTime}
     */
	get testAccountDeadline() : DateTime | null {
		return this.data[4];
	}

	set testAccountDeadlineTestSetter(v : DateTime | null) {
        this.setterImpl(4, v, 'testAccountDeadline');
	}

	/**
     *  Date when the account will get terminated.
	 *
	 * @type {Date}
     */
	get terminationDate() : Date | null {
		return this.data[5];
	}

	set terminationDate(v : Date | null) {
        this.setterImpl(5, v, 'terminationDate');
	}

	/**
     *  The location country of this client. Read-only.
	 *
	 * @type {ClientsApiCountry}
     */
	get locationCountry() : NullableInDraftMode<ClientsApiCountry, ValidationMode> {
		return this.data[6];
	}

	set locationCountryTestSetter(v : NullableInDraftMode<ClientsApiCountry, ValidationMode>) {
        this.setterImpl(6, v, 'locationCountry');
	}

	private adyenAccountWrapper : ClientsApiClientAdyenAccount<ValidationMode> = new ClientsApiClientAdyenAccount<ValidationMode>(this.api);

	/**
     *  Information about Online-Payment.
     */
	get adyenAccount() : ClientsApiClientAdyenAccount<ValidationMode> {
		return this.adyenAccountWrapper;
	}

	set adyenAccountTestSetter(v : ClientsApiClientAdyenAccount<ValidationMode>) {
        this.setterImpl(7, v.rawData, 'adyenAccount', () => {this.adyenAccountWrapper = v;});
	}

	private billingWrapper : ClientsApiClientBilling<ValidationMode> = new ClientsApiClientBilling<ValidationMode>(this.api);

	/**
     *  Information about billing of this client.
     */
	get billing() : ClientsApiClientBilling<ValidationMode> {
		return this.billingWrapper;
	}

	set billingTestSetter(v : ClientsApiClientBilling<ValidationMode>) {
        this.setterImpl(8, v.rawData, 'billing', () => {this.billingWrapper = v;});
	}

	/**
     * (Detail)  Test account duration in days.
	 *
	 * @type {Days}
     */
	get testAccountDuration() : NullableInDraftMode<Days, ValidationMode> {
		return this.data[9];
	}

	set testAccountDuration(v : NullableInDraftMode<Days, ValidationMode>) {
        this.setterImpl(9, v, 'testAccountDuration');
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
		this.adyenAccountWrapper._fixIds(_idReplacements);
		this.billingWrapper._fixIds(_idReplacements);
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 10);

			if(data[7] === null)
				data[7] = Meta.createNewObject(false);
			if(data[8] === null)
				data[8] = Meta.createNewObject(false);
		}

		// propagate new raw data to children
		this.adyenAccountWrapper._updateRawData(data ? data[7] : null, generateMissingData);
		this.billingWrapper._updateRawData(data ? data[8] : null, generateMissingData);
	}

	protected get dni() : string {
		return '2';
	}

	static loadDetailed(	api : ClientsApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '2', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is ClientsApiClient<'validated'> {
		// TODO: PLANO-151346
	}
}

export enum ClientsApiType {
	TEST_NEED_VERIFICATION = 1,
	TEST = 2,
	TEST_EXPIRED = 3,
	PAID = 4,
	TERMINATED = 5,
}
export enum ClientsApiCountry {
	GERMANY = 1,
	AUSTRIA = 2,
	SWITZERLAND = 3,
	NETHERLANDS = 4,
	BELGIUM = 5,
	UNITED_KINGDOM = 6,
	CZECH_REPUBLIC = 7,
	SWEDEN = 8,
	LUXEMBOURG = 9,
}
		 
export class ClientsApiClientAdyenAccount<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	override parent : any = null;

	constructor(override readonly api : ClientsApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, ClientsApiClientAdyenAccount as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
		this.consistencyCheckWrapper.parent = this as any as ClientsApiClientAdyenAccount<ValidationMode>;
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<ClientsApiClientAdyenAccount<ValidationMode>, ClientsApiClientAdyenAccount<ValidationMode>> = new ApiAttributeInfo<ClientsApiClientAdyenAccount<ValidationMode>, ClientsApiClientAdyenAccount<ValidationMode>>({
			apiObjWrapper: this as any as ClientsApiClientAdyenAccount<ValidationMode>,
			name: 'adyenAccount',
			id: 'CLIENT_ADYEN_ACCOUNT',
		});
	attributeInfoAutoDebitEnabled =  new ApiAttributeInfo<ClientsApiClientAdyenAccount<ValidationMode>, boolean>({
			apiObjWrapper: this as any as ClientsApiClientAdyenAccount<ValidationMode>,
			name: 'autoDebitEnabled',
			id: 'CLIENT_ADYEN_ACCOUNT_AUTO_DEBIT_ENABLED',
			primitiveType: PApiPrimitiveTypes.boolean,
		});
	attributeInfoBalance =  new ApiAttributeInfo<ClientsApiClientAdyenAccount<ValidationMode>, Currency>({
			apiObjWrapper: this as any as ClientsApiClientAdyenAccount<ValidationMode>,
			name: 'balance',
			id: 'CLIENT_ADYEN_ACCOUNT_BALANCE',
			primitiveType: PApiPrimitiveTypes.Currency,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoDesiredDeposit =  new ApiAttributeInfo<ClientsApiClientAdyenAccount<ValidationMode>, Currency>({
			apiObjWrapper: this as any as ClientsApiClientAdyenAccount<ValidationMode>,
			name: 'desiredDeposit',
			id: 'CLIENT_ADYEN_ACCOUNT_DESIRED_DEPOSIT',
			primitiveType: PApiPrimitiveTypes.Currency,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoOnboardingPassedDate =  new ApiAttributeInfo<ClientsApiClientAdyenAccount<ValidationMode>, DateTime>({
			apiObjWrapper: this as any as ClientsApiClientAdyenAccount<ValidationMode>,
			name: 'onboardingPassedDate',
			id: 'CLIENT_ADYEN_ACCOUNT_ONBOARDING_PASSED_DATE',
			primitiveType: PApiPrimitiveTypes.DateTime,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoAccountHolderCode =  new ApiAttributeInfo<ClientsApiClientAdyenAccount<ValidationMode>, string>({
			apiObjWrapper: this as any as ClientsApiClientAdyenAccount<ValidationMode>,
			name: 'accountHolderCode',
			id: 'CLIENT_ADYEN_ACCOUNT_ACCOUNT_HOLDER_CODE',
			primitiveType: PApiPrimitiveTypes.string,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoLastTransferFundsExecutionDate =  new ApiAttributeInfo<ClientsApiClientAdyenAccount<ValidationMode>, DateTime>({
			apiObjWrapper: this as any as ClientsApiClientAdyenAccount<ValidationMode>,
			name: 'lastTransferFundsExecutionDate',
			id: 'CLIENT_ADYEN_ACCOUNT_LAST_TRANSFER_FUNDS_EXECUTION_DATE',
			primitiveType: PApiPrimitiveTypes.DateTime,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoLastAutoDebitDate =  new ApiAttributeInfo<ClientsApiClientAdyenAccount<ValidationMode>, DateTime>({
			apiObjWrapper: this as any as ClientsApiClientAdyenAccount<ValidationMode>,
			name: 'lastAutoDebitDate',
			id: 'CLIENT_ADYEN_ACCOUNT_LAST_AUTO_DEBIT_DATE',
			primitiveType: PApiPrimitiveTypes.DateTime,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoAccountHolderPayoutState =  new ApiAttributeInfo<ClientsApiClientAdyenAccount<ValidationMode>, ClientsApiAccountHolderPayoutState>({
			apiObjWrapper: this as any as ClientsApiClientAdyenAccount<ValidationMode>,
			name: 'accountHolderPayoutState',
			id: 'CLIENT_ADYEN_ACCOUNT_ACCOUNT_HOLDER_PAYOUT_STATE',
			primitiveType: PApiPrimitiveTypes.Enum,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoAccountHolderProcessingState =  new ApiAttributeInfo<ClientsApiClientAdyenAccount<ValidationMode>, ClientsApiAccountHolderProcessingState>({
			apiObjWrapper: this as any as ClientsApiClientAdyenAccount<ValidationMode>,
			name: 'accountHolderProcessingState',
			id: 'CLIENT_ADYEN_ACCOUNT_ACCOUNT_HOLDER_PROCESSING_STATE',
			primitiveType: PApiPrimitiveTypes.Enum,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoOutstandingTransferFunds =  new ApiAttributeInfo<ClientsApiClientAdyenAccount<ValidationMode>, Currency>({
			apiObjWrapper: this as any as ClientsApiClientAdyenAccount<ValidationMode>,
			name: 'outstandingTransferFunds',
			id: 'CLIENT_ADYEN_ACCOUNT_OUTSTANDING_TRANSFER_FUNDS',
			primitiveType: PApiPrimitiveTypes.Currency,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoTriggerPayoutProcess =  new ApiAttributeInfo<ClientsApiClientAdyenAccount<ValidationMode>, boolean>({
			apiObjWrapper: this as any as ClientsApiClientAdyenAccount<ValidationMode>,
			name: 'triggerPayoutProcess',
			id: 'CLIENT_ADYEN_ACCOUNT_TRIGGER_PAYOUT_PROCESS',
			primitiveType: PApiPrimitiveTypes.boolean,
		});

	/**
     *  Is adyen auto-debit enabled for this account?
	 *
	 * @type {boolean}
     */
	get autoDebitEnabled() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[1];
	}

	set autoDebitEnabled(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(1, v, 'autoDebitEnabled');
	}

	/**
     *  The current online balance.
	 *
	 * @type {Currency}
     */
	get balance() : NullableInDraftMode<Currency, ValidationMode> {
		return this.data[2];
	}

	set balanceTestSetter(v : NullableInDraftMode<Currency, ValidationMode>) {
        this.setterImpl(2, v, 'balance');
	}

	/**
     * (Detail)  The current deposit level we expect currently for this client.
	 *
	 * @type {Currency}
     */
	get desiredDeposit() : NullableInDraftMode<Currency, ValidationMode> {
		return this.data[3];
	}

	set desiredDepositTestSetter(v : NullableInDraftMode<Currency, ValidationMode>) {
        this.setterImpl(3, v, 'desiredDeposit');
	}

	/**
     * (Detail)  When has this account passed Adyen onboarding?
	 *
	 * @type {DateTime}
     */
	get onboardingPassedDate() : DateTime | null {
		return this.data[4];
	}

	set onboardingPassedDateTestSetter(v : DateTime | null) {
        this.setterImpl(4, v, 'onboardingPassedDate');
	}

	/**
     * (Detail)  Adyens account holder code which uniquely identifies the sub-merchant.
	 *
	 * @type {string}
     */
	get accountHolderCode() : string | null {
		return this.data[5];
	}

	set accountHolderCodeTestSetter(v : string | null) {
        this.setterImpl(5, v, 'accountHolderCode');
	}

	/**
     * (Detail)  When was the last transfer-funds executed. This is the pre-step for payouts (See https://drplano.atlassian.net/l/c/7A3Zd2Kz).
	 *
	 * @type {DateTime}
     */
	get lastTransferFundsExecutionDate() : DateTime | null {
		return this.data[6];
	}

	set lastTransferFundsExecutionDateTestSetter(v : DateTime | null) {
        this.setterImpl(6, v, 'lastTransferFundsExecutionDate');
	}

	/**
     * (Detail)  When was the last auto-debit executed?
	 *
	 * @type {DateTime}
     */
	get lastAutoDebitDate() : DateTime | null {
		return this.data[7];
	}

	set lastAutoDebitDateTestSetter(v : DateTime | null) {
        this.setterImpl(7, v, 'lastAutoDebitDate');
	}

	/**
     * (Detail)  AccountHolder-Payout State for Adyen
	 *
	 * @type {ClientsApiAccountHolderPayoutState}
     */
	get accountHolderPayoutState() : NullableInDraftMode<ClientsApiAccountHolderPayoutState, ValidationMode> {
		return this.data[8];
	}

	set accountHolderPayoutStateTestSetter(v : NullableInDraftMode<ClientsApiAccountHolderPayoutState, ValidationMode>) {
        this.setterImpl(8, v, 'accountHolderPayoutState');
	}

	/**
     * (Detail)  AccountHolder-Processing State for Adyen
	 *
	 * @type {ClientsApiAccountHolderProcessingState}
     */
	get accountHolderProcessingState() : NullableInDraftMode<ClientsApiAccountHolderProcessingState, ValidationMode> {
		return this.data[9];
	}

	set accountHolderProcessingStateTestSetter(v : NullableInDraftMode<ClientsApiAccountHolderProcessingState, ValidationMode>) {
        this.setterImpl(9, v, 'accountHolderProcessingState');
	}

	/**
     * (Detail)  The fees which still need to be transferred by transfer-funds (See https://drplano.atlassian.net/l/c/7A3Zd2Kz). This includes the OUTSTANDING and PENDING state.
	 *
	 * @type {Currency}
     */
	get outstandingTransferFunds() : NullableInDraftMode<Currency, ValidationMode> {
		return this.data[10];
	}

	set outstandingTransferFundsTestSetter(v : NullableInDraftMode<Currency, ValidationMode>) {
        this.setterImpl(10, v, 'outstandingTransferFunds');
	}

	/**
     * (Detail)  Set this to "true" to trigger the whole payout process (See https://drplano.atlassian.net/l/c/7A3Zd2Kz). This ignores all preconditions (last payout/TF, consistency check) and will trigger it again.
	 *
	 * @type {boolean}
     */
	get triggerPayoutProcess() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[11];
	}

	set triggerPayoutProcess(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(11, v, 'triggerPayoutProcess');
	}

	private consistencyCheckWrapper : ClientsApiClientAdyenAccountConsistencyCheck<ValidationMode> = new ClientsApiClientAdyenAccountConsistencyCheck<ValidationMode>(this.api);

	/**
     * (Detail)  Returns information for debugging our Adyen balance consistency check.
     */
	get consistencyCheck() : ClientsApiClientAdyenAccountConsistencyCheck<ValidationMode> {
		return this.consistencyCheckWrapper;
	}

	set consistencyCheckTestSetter(v : ClientsApiClientAdyenAccountConsistencyCheck<ValidationMode>) {
        this.setterImpl(12, v.rawData, 'consistencyCheck', () => {this.consistencyCheckWrapper = v;});
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
		this.consistencyCheckWrapper._fixIds(_idReplacements);
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 13);

			data[1] = false;
			data[11] = false;
			if(data[12] === null)
				data[12] = Meta.createNewObject(false);
		}

		// propagate new raw data to children
		this.consistencyCheckWrapper._updateRawData(data ? data[12] : null, generateMissingData);
	}

	protected get dni() : string {
		return '9';
	}

	static loadDetailed(	api : ClientsApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '9', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is ClientsApiClientAdyenAccount<'validated'> {
		// TODO: PLANO-151346
	}
}

export enum ClientsApiAccountHolderPayoutState {
	PAYOUT_ALLOWED = 1,
	PAYOUT_DISABLED = 2,
}
export enum ClientsApiAccountHolderProcessingState {
	PROCESSING_ALLOWED = 1,
	PROCESSING_DISABLED = 2,
}
		 
export class ClientsApiClientAdyenAccountConsistencyCheck<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	override parent : any = null;

	constructor(override readonly api : ClientsApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, ClientsApiClientAdyenAccountConsistencyCheck as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<ClientsApiClientAdyenAccountConsistencyCheck<ValidationMode>, ClientsApiClientAdyenAccountConsistencyCheck<ValidationMode>> = new ApiAttributeInfo<ClientsApiClientAdyenAccountConsistencyCheck<ValidationMode>, ClientsApiClientAdyenAccountConsistencyCheck<ValidationMode>>({
			apiObjWrapper: this as any as ClientsApiClientAdyenAccountConsistencyCheck<ValidationMode>,
			name: 'consistencyCheck',
			id: 'CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK',
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoExpectedBalance =  new ApiAttributeInfo<ClientsApiClientAdyenAccountConsistencyCheck<ValidationMode>, Currency>({
			apiObjWrapper: this as any as ClientsApiClientAdyenAccountConsistencyCheck<ValidationMode>,
			name: 'expectedBalance',
			id: 'CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK_EXPECTED_BALANCE',
			primitiveType: PApiPrimitiveTypes.Currency,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoActualBalance =  new ApiAttributeInfo<ClientsApiClientAdyenAccountConsistencyCheck<ValidationMode>, Currency>({
			apiObjWrapper: this as any as ClientsApiClientAdyenAccountConsistencyCheck<ValidationMode>,
			name: 'actualBalance',
			id: 'CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK_ACTUAL_BALANCE',
			primitiveType: PApiPrimitiveTypes.Currency,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoActualPendingBalance =  new ApiAttributeInfo<ClientsApiClientAdyenAccountConsistencyCheck<ValidationMode>, Currency>({
			apiObjWrapper: this as any as ClientsApiClientAdyenAccountConsistencyCheck<ValidationMode>,
			name: 'actualPendingBalance',
			id: 'CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK_ACTUAL_PENDING_BALANCE',
			primitiveType: PApiPrimitiveTypes.Currency,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoActualOnHoldBalance =  new ApiAttributeInfo<ClientsApiClientAdyenAccountConsistencyCheck<ValidationMode>, Currency>({
			apiObjWrapper: this as any as ClientsApiClientAdyenAccountConsistencyCheck<ValidationMode>,
			name: 'actualOnHoldBalance',
			id: 'CLIENT_ADYEN_ACCOUNT_CONSISTENCY_CHECK_ACTUAL_ON_HOLD_BALANCE',
			primitiveType: PApiPrimitiveTypes.Currency,
			canEdit: () => false,
			readMode: () => true,
		});

	/**
     *  What Adyen balance the consistency check expects.
	 *
	 * @type {Currency}
     */
	get expectedBalance() : NullableInDraftMode<Currency, ValidationMode> {
		return this.data[1];
	}

	set expectedBalanceTestSetter(v : NullableInDraftMode<Currency, ValidationMode>) {
        this.setterImpl(1, v, 'expectedBalance');
	}

	/**
     *  Actual Adyen balance. This is the value we compare against "expectedBalance" during consistency check.
	 *
	 * @type {Currency}
     */
	get actualBalance() : NullableInDraftMode<Currency, ValidationMode> {
		return this.data[2];
	}

	set actualBalanceTestSetter(v : NullableInDraftMode<Currency, ValidationMode>) {
        this.setterImpl(2, v, 'actualBalance');
	}

	/**
     *  Actual "pending" Adyen balance.
	 *
	 * @type {Currency}
     */
	get actualPendingBalance() : NullableInDraftMode<Currency, ValidationMode> {
		return this.data[3];
	}

	set actualPendingBalanceTestSetter(v : NullableInDraftMode<Currency, ValidationMode>) {
        this.setterImpl(3, v, 'actualPendingBalance');
	}

	/**
     *  Actual "on-hold" Adyen balance.
	 *
	 * @type {Currency}
     */
	get actualOnHoldBalance() : NullableInDraftMode<Currency, ValidationMode> {
		return this.data[4];
	}

	set actualOnHoldBalanceTestSetter(v : NullableInDraftMode<Currency, ValidationMode>) {
        this.setterImpl(4, v, 'actualOnHoldBalance');
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 5);

		}

		// propagate new raw data to children
	}

	protected get dni() : string {
		return '35';
	}

	static loadDetailed(	api : ClientsApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '35', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is ClientsApiClientAdyenAccountConsistencyCheck<'validated'> {
		// TODO: PLANO-151346
	}
}

		 
export class ClientsApiClientBilling<ValidationMode extends 'draft' | 'validated' = 'validated'> extends ApiObjectWrapper<any, any>
{
	override parent : any = null;

	constructor(override readonly api : ClientsApiService<ValidationMode> | null, idRaw : any = null) {
		super(api, ClientsApiClientBilling as any);

		this._updateRawData(Meta.createNewObject(false, idRaw), true);

		// set parent attribute
	}


	private _id : Id | null = null;
	get id() : Id {
		return this._id !== null ? this._id : Id.create(Meta.getNewItemId(this.rawData) as any);
	}

	override attributeInfoThis : ApiAttributeInfo<ClientsApiClientBilling<ValidationMode>, ClientsApiClientBilling<ValidationMode>> = new ApiAttributeInfo<ClientsApiClientBilling<ValidationMode>, ClientsApiClientBilling<ValidationMode>>({
			apiObjWrapper: this as any as ClientsApiClientBilling<ValidationMode>,
			name: 'billing',
			id: 'CLIENT_BILLING',
		});
	attributeInfoCountry =  new ApiAttributeInfo<ClientsApiClientBilling<ValidationMode>, ClientsApiCountry>({
			apiObjWrapper: this as any as ClientsApiClientBilling<ValidationMode>,
			name: 'country',
			id: 'CLIENT_BILLING_COUNTRY',
			primitiveType: PApiPrimitiveTypes.Enum,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoHasToPayVat =  new ApiAttributeInfo<ClientsApiClientBilling<ValidationMode>, boolean>({
			apiObjWrapper: this as any as ClientsApiClientBilling<ValidationMode>,
			name: 'hasToPayVat',
			id: 'CLIENT_BILLING_HAS_TO_PAY_VAT',
			primitiveType: PApiPrimitiveTypes.boolean,
			canEdit: function(this : ClientsApiClientBilling<ValidationMode>) {
		if(!((!this.disableInvoiceCreation)))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : ClientsApiClientBilling<ValidationMode>) {
				 
		
				return false;
			},
		});
	attributeInfoDisableInvoiceCreation =  new ApiAttributeInfo<ClientsApiClientBilling<ValidationMode>, boolean>({
			apiObjWrapper: this as any as ClientsApiClientBilling<ValidationMode>,
			name: 'disableInvoiceCreation',
			id: 'CLIENT_BILLING_DISABLE_INVOICE_CREATION',
			primitiveType: PApiPrimitiveTypes.boolean,
		});
	attributeInfoVatNumber =  new ApiAttributeInfo<ClientsApiClientBilling<ValidationMode>, string>({
			apiObjWrapper: this as any as ClientsApiClientBilling<ValidationMode>,
			name: 'vatNumber',
			id: 'CLIENT_BILLING_VAT_NUMBER',
			primitiveType: PApiPrimitiveTypes.string,
			canEdit: () => false,
			readMode: () => true,
		});
	attributeInfoDiscountValue =  new ApiAttributeInfo<ClientsApiClientBilling<ValidationMode>, Percent|Currency>({
			apiObjWrapper: this as any as ClientsApiClientBilling<ValidationMode>,
			name: 'discountValue',
			id: 'CLIENT_BILLING_DISCOUNT_VALUE',
			primitiveType: () => this.discountType === ClientsApiDiscountType.PERCENT ? PApiPrimitiveTypes.Percent : PApiPrimitiveTypes.Currency,
			canEdit: function(this : ClientsApiClientBilling<ValidationMode>) {
		if(!((!this.disableInvoiceCreation)))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : ClientsApiClientBilling<ValidationMode>) {
				 
		
				return false;
			},
			validations: function(this : ClientsApiClientBilling<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.min(0, true, () => this.discountType === ClientsApiDiscountType.PERCENT ? PApiPrimitiveTypes.Percent : PApiPrimitiveTypes.Currency, undefined, undefined);
							return null;
					},
					() => {
		return this.api!.validators.max(() => this.discountType === ClientsApiDiscountType.PERCENT ? 1 : null, true, () => this.discountType === ClientsApiDiscountType.PERCENT ? PApiPrimitiveTypes.Percent : PApiPrimitiveTypes.Currency, undefined, undefined);
							return null;
					},
					() => {
		return this.api!.validators.required(() => this.discountType === ClientsApiDiscountType.PERCENT ? PApiPrimitiveTypes.Percent : PApiPrimitiveTypes.Currency, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoDiscountType =  new ApiAttributeInfo<ClientsApiClientBilling<ValidationMode>, ClientsApiDiscountType>({
			apiObjWrapper: this as any as ClientsApiClientBilling<ValidationMode>,
			name: 'discountType',
			id: 'CLIENT_BILLING_DISCOUNT_TYPE',
			primitiveType: PApiPrimitiveTypes.Enum,
			canEdit: function(this : ClientsApiClientBilling<ValidationMode>) {
		if(!((!this.disableInvoiceCreation)))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : ClientsApiClientBilling<ValidationMode>) {
				 
		
				return false;
			},
			validations: function(this : ClientsApiClientBilling<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.Enum, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoDiscountStart =  new ApiAttributeInfo<ClientsApiClientBilling<ValidationMode>, Date>({
			apiObjWrapper: this as any as ClientsApiClientBilling<ValidationMode>,
			name: 'discountStart',
			id: 'CLIENT_BILLING_DISCOUNT_START',
			primitiveType: PApiPrimitiveTypes.Date,
			canEdit: function(this : ClientsApiClientBilling<ValidationMode>) {
		if(!((!this.disableInvoiceCreation)))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : ClientsApiClientBilling<ValidationMode>) {
				 
		
				return false;
			},
			validations: function(this : ClientsApiClientBilling<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.max(() => this.discountEnd, false, PApiPrimitiveTypes.Date, 'CLIENT_BILLING_DISCOUNT_END', undefined);
							return null;
					},
				];
			},
		});
	attributeInfoDiscountEnd =  new ApiAttributeInfo<ClientsApiClientBilling<ValidationMode>, DateExclusiveEnd>({
			apiObjWrapper: this as any as ClientsApiClientBilling<ValidationMode>,
			name: 'discountEnd',
			id: 'CLIENT_BILLING_DISCOUNT_END',
			primitiveType: PApiPrimitiveTypes.DateExclusiveEnd,
			canEdit: function(this : ClientsApiClientBilling<ValidationMode>) {
		if(!((!this.disableInvoiceCreation)))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : ClientsApiClientBilling<ValidationMode>) {
				 
		
				return false;
			},
			validations: function(this : ClientsApiClientBilling<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.min(() => this.discountStart, false, PApiPrimitiveTypes.DateExclusiveEnd, 'CLIENT_BILLING_DISCOUNT_START', undefined);
							return null;
					},
				];
			},
		});
	attributeInfoBilledMembersCountMax =  new ApiAttributeInfo<ClientsApiClientBilling<ValidationMode>, Days>({
			apiObjWrapper: this as any as ClientsApiClientBilling<ValidationMode>,
			name: 'billedMembersCountMax',
			id: 'CLIENT_BILLING_BILLED_MEMBERS_COUNT_MAX',
			primitiveType: PApiPrimitiveTypes.Days,
			canEdit: function(this : ClientsApiClientBilling<ValidationMode>) {
		if(!((!this.disableInvoiceCreation)))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : ClientsApiClientBilling<ValidationMode>) {
				 
		
				return false;
			},
			validations: function(this : ClientsApiClientBilling<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.min(0, true, PApiPrimitiveTypes.Days, undefined, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoBilledMembersCountSubtract =  new ApiAttributeInfo<ClientsApiClientBilling<ValidationMode>, Days>({
			apiObjWrapper: this as any as ClientsApiClientBilling<ValidationMode>,
			name: 'billedMembersCountSubtract',
			id: 'CLIENT_BILLING_BILLED_MEMBERS_COUNT_SUBTRACT',
			primitiveType: PApiPrimitiveTypes.Days,
			canEdit: function(this : ClientsApiClientBilling<ValidationMode>) {
		if(!((!this.disableInvoiceCreation)))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : ClientsApiClientBilling<ValidationMode>) {
				 
		
				return false;
			},
			validations: function(this : ClientsApiClientBilling<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.min(0, false, PApiPrimitiveTypes.Days, undefined, undefined);
							return null;
					},
				];
			},
		});
	attributeInfoDiscountComment =  new ApiAttributeInfo<ClientsApiClientBilling<ValidationMode>, string>({
			apiObjWrapper: this as any as ClientsApiClientBilling<ValidationMode>,
			name: 'discountComment',
			id: 'CLIENT_BILLING_DISCOUNT_COMMENT',
			primitiveType: PApiPrimitiveTypes.string,
			canEdit: function(this : ClientsApiClientBilling<ValidationMode>) {
		if(!((!this.disableInvoiceCreation)))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : ClientsApiClientBilling<ValidationMode>) {
				 
		
				return false;
			},
		});
	attributeInfoCredit =  new ApiAttributeInfo<ClientsApiClientBilling<ValidationMode>, Currency>({
			apiObjWrapper: this as any as ClientsApiClientBilling<ValidationMode>,
			name: 'credit',
			id: 'CLIENT_BILLING_CREDIT',
			primitiveType: PApiPrimitiveTypes.Currency,
			canEdit: function(this : ClientsApiClientBilling<ValidationMode>) {
		if(!((!this.disableInvoiceCreation)))
		{
			return false;
		}
				return true;
			},
			readMode: function(this : ClientsApiClientBilling<ValidationMode>) {
				 
		
				return false;
			},
			validations: function(this : ClientsApiClientBilling<ValidationMode>) {
				return [
					() => {
		return this.api!.validators.min(0, true, PApiPrimitiveTypes.Currency, undefined, undefined);
							return null;
					},
					() => {
		return this.api!.validators.required(PApiPrimitiveTypes.Currency, undefined);
							return null;
					},
				];
			},
		});

	/**
     *  The billing country of this client. Read-only.
	 *
	 * @type {ClientsApiCountry}
     */
	get country() : ClientsApiCountry | null {
		return this.data[1];
	}

	set countryTestSetter(v : ClientsApiCountry | null) {
        this.setterImpl(1, v, 'country');
	}

	/**
     *  Does this client need to pay vat for dr-plano fee?
	 *
	 * @type {boolean}
     */
	get hasToPayVat() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[2];
	}

	set hasToPayVat(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(2, v, 'hasToPayVat');
	}

	/**
     *  Should the whole invoice creation be disabled? When "true" no Billomat client and VAT transactions will be created anymore for this client.
	 *
	 * @type {boolean}
     */
	get disableInvoiceCreation() : NullableInDraftMode<boolean, ValidationMode> {
		return this.data[3];
	}

	set disableInvoiceCreation(v : NullableInDraftMode<boolean, ValidationMode>) {
        this.setterImpl(3, v, 'disableInvoiceCreation');
	}

	/**
     * (Detail)  The vat-number of this client. Only being send when client does not have to pay vat. Read-only.
	 *
	 * @type {string}
     */
	get vatNumber() : string | null {
		return this.data[4];
	}

	set vatNumberTestSetter(v : string | null) {
        this.setterImpl(4, v, 'vatNumber');
	}

	/**
     * (Detail)  The discount value to be applied on the final invoice amount. Depending on "discountType" this is either an absolute discount or a percentage discount.
	 *
	 * @type {Percent|Currency}
     */
	get discountValue() : NullableInDraftMode<Percent|Currency, ValidationMode> {
		return this.data[5];
	}

	set discountValue(v : NullableInDraftMode<Percent|Currency, ValidationMode>) {
        this.setterImpl(5, v, 'discountValue');
	}

	/**
     * (Detail)  The current discountType for this account
	 *
	 * @type {ClientsApiDiscountType}
     */
	get discountType() : NullableInDraftMode<ClientsApiDiscountType, ValidationMode> {
		return this.data[6];
	}

	set discountType(v : NullableInDraftMode<ClientsApiDiscountType, ValidationMode>) {
        this.setterImpl(6, v, 'discountType', () => {this.attributeInfoDiscountValue.value = null;});
	}

	/**
     * (Detail)  The start-time from when "discountValue" should be applied. "null" means no such start-limit exists.
	 *
	 * @type {Date}
     */
	get discountStart() : Date | null {
		return this.data[7];
	}

	set discountStart(v : Date | null) {
        this.setterImpl(7, v, 'discountStart');
	}

	/**
     * (Detail)  The end-time from when "discountValue" should be applied. "null" means no such end-limit exists.
	 *
	 * @type {DateExclusiveEnd}
     */
	get discountEnd() : DateExclusiveEnd | null {
		return this.data[8];
	}

	set discountEnd(v : DateExclusiveEnd | null) {
        this.setterImpl(8, v, 'discountEnd');
	}

	/**
     * (Detail)  The upper limit for maximum number of members to be billed for this client. "null" means no such limit exist.
	 *
	 * @type {Days}
     */
	get billedMembersCountMax() : Days | null {
		return this.data[9];
	}

	set billedMembersCountMax(v : Days | null) {
        this.setterImpl(9, v, 'billedMembersCountMax');
	}

	/**
     * (Detail)  The value to be subtract from the maximum number of members to be billed.
	 *
	 * @type {Days}
     */
	get billedMembersCountSubtract() : Days | null {
		return this.data[10];
	}

	set billedMembersCountSubtract(v : Days | null) {
        this.setterImpl(10, v, 'billedMembersCountSubtract');
	}

	/**
     * (Detail)  Internal comment about discounting.
	 *
	 * @type {string}
     */
	get discountComment() : string | null {
		return this.data[11];
	}

	set discountComment(v : string | null) {
        this.setterImpl(11, v, 'discountComment');
	}

	/**
     * (Detail)  A one-time credit which will be subtracted from "misc" invoices.
	 *
	 * @type {Currency}
     */
	get credit() : NullableInDraftMode<Currency, ValidationMode> {
		return this.data[12];
	}

	set credit(v : NullableInDraftMode<Currency, ValidationMode>) {
        this.setterImpl(12, v, 'credit');
	}


	_fixIds(_idReplacements : Map<any, number>) : void {
	}

	override _updateRawData(data : any[] | null, generateMissingData : boolean) : void {
		super._updateRawData(data, generateMissingData);

		this.data = data;

		// update id wrapper
		const idRawData = Meta.getId(data);
		this._id = idRawData === null ? null : Id.create(idRawData as any);

		// create missing/default data
		if(generateMissingData && data) {
			this.fillWithDefaultValues(data, 13);

			data[2] = false;
			data[3] = false;
		}

		// propagate new raw data to children
	}

	protected get dni() : string {
		return '10';
	}

	static loadDetailed(	api : ClientsApiService<any>
						,	id : Id
						,	{success = null, error = null, searchParams = null} : ApiLoadArgs = {}) : Promise<HttpResponse<unknown>> {
		return ApiObjectWrapper.loadDetailedImpl(api, id, '10', { success: success, error: error, searchParams: searchParams});
	}

	protected assumeValidated() : asserts this is ClientsApiClientBilling<'validated'> {
		// TODO: PLANO-151346
	}
}

export enum ClientsApiDiscountType {
	ABSOLUTE = 1,
	PERCENT = 2,
}


