import { Component, Input, ChangeDetectionStrategy } from '@angular/core';
import { PTextColor } from '@plano/client/shared/bootstrap-styles.enum';
import { PTextAlignType } from '@plano/client/shared/p-forms/p-input/p-input.types';
import { PlanoFaIconPoolKeys, PlanoFaIconPoolValues } from '@plano/shared/core/plano-fa-icon-pool.enum';
import { PlanoFaIconPool } from '@plano/shared/core/plano-fa-icon-pool.enum';
import { PFaIcon } from './fa-icon-types';
import { Config } from '../../config';
import { PComponentInterface } from '../../interfaces/component.interface';
import { LogService } from '../../log.service';

@Component({
	// eslint-disable-next-line @angular-eslint/component-selector
	selector: 'fa-icon',
	templateUrl: './fa-icon.component.html',
	styleUrls: ['./fa-icon.component.scss'],
	changeDetection: ChangeDetectionStrategy.OnPush,
})
export class FaIconComponent implements PComponentInterface {

	/**
	 * When set to true, the component will have a fixed width instead of one that orientates on the width of the icon.
	 * Note that some icons are wider, and some are vertically shorter.
	 * @default true
	 */
	@Input() private fixedWidth : boolean = true;

	@Input() private textAlign : PTextAlignType | null = null;

	@Input('spin') private _spin : boolean = false;
	@Input() private flip : boolean = false;
	@Input() private size : 'xs' | 'sm' | 'lg' | '2x' | '3x' | '4x' | '5x' | '6x' | '7x' | '8x' | '9x' | '10x' | null = null;
	@Input() private rotate : '90' | '180' | '270' | null = null;
	@Input() public isLoading : PComponentInterface['isLoading'] = false;
	@Input() private theme : PTextColor | null = null;

	// TODO: Get rid of type PFaIcon here and use PlanoFaIconPoolValues only.
	@Input('icon') private _icon : PlanoFaIconPoolValues | PFaIcon | null = null;

	constructor(
		private console : LogService,
	) {
	}

	private get spin() : boolean {
		if (this.isLoading) return false;
		return this._spin;
	}

	private get icon() : FaIconComponent['_icon'] {
		if (this.isLoading) return 'circle';
		if (Config.DEBUG) {
			const possibleEnumKey = (Object.keys(PlanoFaIconPool)).find(
				(x : string) => PlanoFaIconPool[x as PlanoFaIconPoolKeys] === this._icon,
			);

			if (!possibleEnumKey) {
				this.console.debug(`\`${this._icon}\` is missing in PlanoFaIconPool`);
			}
		}
		return this._icon;
	}

	private get isTextIcon() : boolean | null {
		if (this.isLoading) return null;
		if (this.icon === 'czk-sign') return true;
		if (this.icon === 'kr') return true;
		return false;
	}

	/**
	 * Some icons are not available in FontAwesome, like Kč for Czech koruna.
	 * In these cases we show simple ascii chars.
	 */
	public get iconText() : string | undefined {
		if (this.isLoading) return undefined;
		if (this.icon === 'czk-sign') return 'Kč';
		if (this.icon === 'kr') return 'kr';
		return undefined;
	}

	/**
	 * A list of fontawesome classes. Generated by component properties.
	 */
	public get iconClasses() : string[] {
		const result = [];

		if (this.isLoading) {
			result.push('fa-loading');
			result.push('text-skeleton-animated');
		}

		if (this.theme !== null) result.push(`text-${this.theme}`);

		if (this.isTextIcon === true) result.push(`fa-text-icon`);

		if (this.fixedWidth) result.push('fa-fw');

		if (this.textAlign === 'left') result.push('text-left');
		if (this.textAlign === 'center') result.push('text-center');
		if (this.textAlign === 'right') result.push('text-right');

		if (this.spin) result.push('fa-spin');

		if (this.size) result.push(`fa-${this.size}`);
		if (this.rotate) result.push(`fa-rotate-${this.rotate}`);

		if (this.flip) result.push('fa-flip-horizontal');

		if (Array.isArray(this.icon)) {
			result.push(this.icon[0]);
			result.push(`fa-${this.icon[1]}`);
		} else {
			result.push(`fas`);
			result.push(`fa-${this.icon}`);
		}

		return result;
	}
}
