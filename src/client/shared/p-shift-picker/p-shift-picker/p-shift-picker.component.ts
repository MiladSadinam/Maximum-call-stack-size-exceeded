import { OnInit, AfterContentChecked, AfterContentInit} from '@angular/core';
import { Component, TemplateRef, ChangeDetectionStrategy, Output, EventEmitter, ViewChild, ChangeDetectorRef } from '@angular/core';
import { Input } from '@angular/core';
import { forwardRef } from '@angular/core';
import { ControlValueAccessor, UntypedFormArray } from '@angular/forms';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { PMomentService } from '@plano/client/shared/p-moment.service';
import { SectionWhitespace } from '@plano/client/shared/page/section/section.component';
import { SchedulingApiShift} from '@plano/shared/api';
import { SchedulingApiBooking } from '@plano/shared/api';
import { SchedulingApiShiftExchangeCommunicationSwapOfferShiftRefs } from '@plano/shared/api';
import { ShiftId } from '@plano/shared/api';
import { SchedulingApiShiftExchangeSwappedShiftRef, SchedulingApiShiftExchangeCommunicationSwapOfferShiftRef } from '@plano/shared/api';
import { SchedulingApiShiftExchange, SchedulingApiShiftExchangeCommunicationSwapOffers, SchedulingApiShiftExchangeShiftRefs } from '@plano/shared/api';
import { SchedulingApiShifts, SchedulingApiService, SchedulingApiMembers } from '@plano/shared/api';
import { SchedulingApiShiftExchangeShiftRef, SchedulingApiShiftExchangeCommunicationSwapOffer, SchedulingApiShiftExchangeSwappedShiftRefs } from '@plano/shared/api';
import { MeService } from '@plano/shared/api';
import { Config } from '@plano/shared/core/config';
import { PDictionarySourceString } from '@plano/shared/core/pipe/localize.dictionary';
import { LocalizePipe } from '@plano/shared/core/pipe/localize.pipe';
import { PPossibleErrorNames } from '@plano/shared/core/validators.types';
import { PThemeEnum } from '../../bootstrap-styles.enum';
import { HighlightService } from '../../highlight.service';
import { PFormControl } from '../../p-forms/p-form-control';
import { PShiftExchangeService } from '../../p-shift-exchange/shift-exchange.service';
import { ErrorArray, ErrorItem } from '../../p-shift-module/shift-member-exchange.service';
import { PShiftPickerService } from '../p-shift-picker.service';
import { PShiftPickerCalendarComponent } from '../shift-picker-calendar/shift-picker-calendar.component';
import { PossibleShiftPickerValueType } from '../shift-picker-picked-offers/shift-picker-picked-offers.component';

export type PossibleShiftPickerValueItemType = (
	SchedulingApiShiftExchangeShiftRef |
	SchedulingApiShiftExchangeCommunicationSwapOffer |
	SchedulingApiShiftExchangeSwappedShiftRef |
	SchedulingApiShiftExchangeShiftRefs
);

type ValueType = PossibleShiftPickerValueType;

@Component({
	selector: 'p-shift-picker[availableShifts][offersRef]',
	templateUrl: './p-shift-picker.component.html',
	styleUrls: ['./p-shift-picker.component.scss'],
	changeDetection: ChangeDetectionStrategy.Default,
	providers: [
		{
			provide: NG_VALUE_ACCESSOR,
			useExisting: forwardRef(() => PShiftPickerComponent),
			multi: true,
		},
	],
})
export class PShiftPickerComponent implements ControlValueAccessor, OnInit, AfterContentChecked, AfterContentInit {
	@Input() public hideAddToOffersBtn : boolean = false;
	@Input() public loadDetailedItem : SchedulingApiBooking | SchedulingApiShiftExchange | SchedulingApiShift | null = null;

	@Input('availableShifts') private _availableShifts ! : SchedulingApiShifts;

	@Input() public shiftTemplate : TemplateRef<unknown> | null = null;
	@Input() public offerTemplate : TemplateRef<unknown> | null = null;

	/**
	 * This can be a list of shiftRef or a list OF LISTS of shiftRef.
	 * Its the same as shiftRefs, but shiftRefs is generated by the formArray, and offersRef is bound like
	 * [offersRef]="shiftExchange.swapOffers"
	 */
	@Input() public offersRef ! : PossibleShiftPickerValueType;

	@Output() private addItem : EventEmitter<PossibleShiftPickerValueItemType> =
		new EventEmitter<PossibleShiftPickerValueItemType>();
	@Output() private onAddShifts : EventEmitter<SchedulingApiShifts> =
		new EventEmitter<SchedulingApiShifts>();

	@ViewChild('shiftPickerCalendarRef') private shiftPickerCalendarRef ! : PShiftPickerCalendarComponent;

	/**
	 * This is the minimum code that is required for a custom control in Angular.
	 * Its necessary to make [(ngModel)] and [formControl] work.
	 */
	@Input() public disabled : boolean = false;
	// eslint-disable-next-line @typescript-eslint/ban-types
	@Input() public formArray : UntypedFormArray | null = null;
	/* eslint-disable-next-line jsdoc/require-jsdoc */
	public get isValid() : boolean {
		return !this.formArray?.invalid;
	}

	@Input('required') private _required : boolean = false;

	public readonly CONFIG : typeof Config = Config;
	public showList : boolean = true;
	public now ! : number;

	/* eslint-disable-next-line jsdoc/require-jsdoc */
	public get availableShifts() : SchedulingApiShifts {
		const date = this.pShiftPickerService.date;
		const start = (+this.pMoment.m(date).startOf(this.pShiftPickerService.mode));
		const end = (+this.pMoment.m(date).startOf(this.pShiftPickerService.mode).add(1, this.pShiftPickerService.mode));

		return this._availableShifts.filterBy(item => {
			if (start > item.end) return false;
			if (end < item.start) return false;
			return true;
		});
	}

	public showAsList : boolean = false;

	constructor(
		// TODO: Obsolete?
		private api : SchedulingApiService,
		// TODO: Obsolete?
		private highlightService : HighlightService,
		// TODO: Obsolete?
		public pShiftPickerService : PShiftPickerService,
		public pShiftExchangeService : PShiftExchangeService,
		public meService : MeService,
		private localize : LocalizePipe,
		private pMoment : PMomentService,
		private changeDetectorRef : ChangeDetectorRef,
	) {
		this.now = +this.pMoment.m();
	}

	public PThemeEnum = PThemeEnum;
	public SectionWhitespace = SectionWhitespace;

	/* eslint-disable-next-line jsdoc/require-jsdoc */
	public loadNewData() : void {
		this.shiftPickerCalendarRef.loadNewData();
	}

	/**
	 * A list of all assignable members for this ShiftRef
	 * Assignable are members that are assignable to each and every of the provided shiftRefs
	 */
	private get assignableMembersForShiftRefs() : SchedulingApiMembers | undefined {
		if (!(this.loadDetailedItem instanceof SchedulingApiShiftExchange)) return undefined;
		const members = new SchedulingApiMembers(null, false);
		for (const assignableMember of this.loadDetailedItem.shiftRefs.assignableMembers.iterable()) {
			// Is this the indisposed member?
			if (this.loadDetailedItem.indisposedMemberId.equals(assignableMember.memberId)) continue;
			const member = this.api.data.members.get(assignableMember.memberId);
			if (!member) throw new Error('Could not find assignable member');
			members.push(member);
		}

		return members;
	}

	/* eslint-disable-next-line jsdoc/require-jsdoc */
	public get noMemberAvailableForTheseShiftRefs() : boolean | undefined {
		if (!(this.loadDetailedItem instanceof SchedulingApiShiftExchange)) return undefined;
		if (!this.loadDetailedItem.shiftRefs.length) return undefined;
		if (!(this.loadDetailedItem instanceof SchedulingApiShiftExchange)) return undefined;
		if (!this.assignableMembersForShiftRefs) throw new Error('can not get length of null');
		return !this.assignableMembersForShiftRefs.length;
	}

	/* eslint-disable-next-line jsdoc/require-jsdoc */
	public get showCommunicationResetAlert() : boolean | undefined {
		if (!(this.loadDetailedItem instanceof SchedulingApiShiftExchange)) return undefined;

		if (!this.pShiftExchangeService.iAmTheResponsiblePersonForThisIllness(this.loadDetailedItem)) return undefined;

		const communications = this.loadDetailedItem.communications;
		const reactionsLength = communications.reactionsForList.filterBy((item) => {
			if (
				communications.managerResponseCommunication?.id.equals(item.id)
			) return false;
			return true;
		}).length;
		return !!reactionsLength;
	}

	/* eslint-disable-next-line jsdoc/require-jsdoc */
	public get showBoundShiftOfferSetBtn() : boolean {
		return this.isPickerForCommunication;
	}

	private get isPickerForCommunication() : boolean {
		return (this.offersRef instanceof SchedulingApiShiftExchangeCommunicationSwapOffers);
	}

	// private isSamePacketAsShiftRefs(itemId : ShiftId) : boolean {
	// 	for (const shiftRef of this.shiftRefs.iterable()) {
	// 		if (shiftRef instanceof SchedulingApiShiftExchangeCommunicationSwapOffer) {
	// 			for (const offerRef of shiftRef.shiftRefs.iterable()) {
	// 				if (offerRef.id.isSamePacket(itemId)) continue;
	// 				return false;
	// 			}
	// 		} else if (shiftRef.id.isSamePacket(itemId)) {
	// 			continue;
	// 		}
	// 		return false;
	// 	}
	// 	return true;
	// }

	/* eslint-disable-next-line jsdoc/require-jsdoc */
	public get shiftRefs() : PossibleShiftPickerValueType {
		if (!this.formArray!.controls.length) return new SchedulingApiShiftExchangeShiftRefs(null, false);

		let array : PossibleShiftPickerValueType;
		if (this.offersRef instanceof SchedulingApiShiftExchangeCommunicationSwapOffers) {
			array = new SchedulingApiShiftExchangeCommunicationSwapOffers(null, false);
		} else if (this.offersRef instanceof SchedulingApiShiftExchangeShiftRefs) {
			array = new SchedulingApiShiftExchangeShiftRefs(null, false);
		} else if (this.offersRef instanceof SchedulingApiShiftExchangeSwappedShiftRefs) {
			array = new SchedulingApiShiftExchangeSwappedShiftRefs(null, false);
		} else {
			throw new TypeError('Unexpected shiftRefs type.');
		}

		for (const control of this.formArray!.controls) {
			array.push(control.value);
		}
		return array;
	}

	/**
	 * Check if the bound ngModel/formControl.value already contains the provided id
	 */
	public valueContainsShiftId(shiftId : ShiftId) : boolean {
		for (const offer of this.offersRef.iterable()) {
			if (offer instanceof SchedulingApiShiftExchangeCommunicationSwapOffer) {
				for (const shiftRef of offer.shiftRefs.iterable()) {
					if (shiftRef.id.equals(shiftId)) return true;
				}
			}
			// eslint-disable-next-line sonarjs/no-collapsible-if
			if (offer instanceof SchedulingApiShiftExchangeShiftRef) {
				if (offer.id.equals(shiftId)) return true;
			}
		}
		return false;
	}

	/* eslint-disable-next-line jsdoc/require-jsdoc */
	public onRemoveOffer(offer : PossibleShiftPickerValueItemType | SchedulingApiShiftExchangeShiftRefs) : void {
		this.pShiftPickerService.onRemoveOffer(this.formArray!, this.offersRef, offer);
	}

	/* eslint-disable-next-line jsdoc/require-jsdoc */
	public onRemoveShiftRefFromOffer(input : {
		shiftRef : SchedulingApiShiftExchangeCommunicationSwapOfferShiftRef | SchedulingApiShiftExchangeShiftRef,
		offer : (
			SchedulingApiShiftExchangeCommunicationSwapOffer |
			SchedulingApiShiftExchangeSwappedShiftRef |
			SchedulingApiShiftExchangeShiftRefs
		),
	}) : void {
		if (input.shiftRef instanceof SchedulingApiShiftExchangeShiftRef) {
			this.onRemoveOffer(input.shiftRef);
		} else if (input.offer instanceof SchedulingApiShiftExchangeCommunicationSwapOffer) {
			input.offer.shiftRefs.removeItem(input.shiftRef);
			this.formArray!.updateValueAndValidity();

		}
	}

	/* eslint-disable-next-line jsdoc/require-jsdoc */
	public onAddSelectedShifts() : void {
		const selectedShifts = this.api.data.shifts.filterBy(item => item.selected);
		if (this.someHint) this.someHint = null;
		this.onAddShifts.emit(selectedShifts);
	}

	/* eslint-disable-next-line jsdoc/require-jsdoc */
	public addSelectedShiftsToRefs(refs : (
		SchedulingApiShiftExchangeCommunicationSwapOfferShiftRefs | SchedulingApiShiftExchangeShiftRefs
	)) : void {
		// We show shiftExchangeShiftRefs as a package, but in code we treat them like a non-bundled offer
		if (this.offersRef instanceof SchedulingApiShiftExchangeShiftRefs) {
			this.onAddSelectedShifts();
			return;
		}

		for (const selectedShift of this.api.data.shifts.filterBy(item => item.selected).iterable()) {
			selectedShift.selected = false;
			if (refs.contains(selectedShift.id)) continue;
			refs.createNewItem(selectedShift.id);
			this.formArray!.updateValueAndValidity();
		}
	}

	/* eslint-disable-next-line jsdoc/require-jsdoc */
	public addSelectedShiftsAsPacket() : void {
		const newOfferPaket = (this.offersRef as SchedulingApiShiftExchangeCommunicationSwapOffers).createNewItem();

		this.addSelectedShiftsToRefs(newOfferPaket.shiftRefs);

		this.formArray!.push(new PFormControl({ formState: {value : newOfferPaket, disabled: false} }));
	}

	public someHint : string | null = null;

	public ngAfterContentChecked() : void {
		this.initAlertDefaults();
		this.refreshAlertsArray();
	}

	public ngAfterContentInit() : void {
		this.someHint = this.initialSomeHintText;
	}

	/* eslint-disable-next-line jsdoc/require-jsdoc */
	public get pickedOffersHeadline() : string {
		if (this.offersRef instanceof SchedulingApiShiftExchangeCommunicationSwapOffers) {
			return this.localize.transform('Schichten für den Tausch');
		}
		if (
			this.offersRef instanceof SchedulingApiShiftExchangeShiftRefs &&
			this.loadDetailedItem instanceof SchedulingApiShiftExchange
		) {
			if (this.loadDetailedItem.isIllness) return this.localize.transform('Schichten für Krankmeldung');
			return this.localize.transform('Schichten für Ersatzsuche');
		}
		return this.localize.transform('Schicht-Auswahl');
	}

	private get initialSomeHintText() : string | null {
		if (this.shiftRefs.length) return null;
		if (
			this.offersRef instanceof SchedulingApiShiftExchangeCommunicationSwapOffers &&
			this.loadDetailedItem instanceof SchedulingApiShiftExchange &&
			!this.pShiftExchangeService.iAmTheIndisposedMember(this.loadDetailedItem)
		) {
			return this.localize.transform('Wähle im Kalender die Schichten, die du ${firstName} zum Tausch anbieten möchtest, und füge sie anschließend hier hinzu.', { firstName: this.loadDetailedItem.indisposedMember!.firstName });
		} else if (
			this.offersRef instanceof SchedulingApiShiftExchangeShiftRefs &&
			this.loadDetailedItem instanceof SchedulingApiShiftExchange
		) {
			if (this.loadDetailedItem.isIllness) {
				const I_AM_THE_INDISPOSED_MEMBER = this.pShiftExchangeService.iAmTheIndisposedMember(this.loadDetailedItem);
				const recipient = I_AM_THE_INDISPOSED_MEMBER ? this.localize.transform('dich') : this.loadDetailedItem.indisposedMember!.firstName;
				return this.localize.transform('Wähle im Kalender diejenigen Schichten, für die du ${recipient} krank melden möchtest, und füge sie anschließend hier hinzu.', { recipient: recipient });
			}
			return this.localize.transform('Wähle im Kalender die Schichten, für die du Ersatz suchen möchtest, und füge sie anschließend hier hinzu.');
		}
		return null;
	}

	/* eslint-disable-next-line jsdoc/require-jsdoc */
	public get addToOffersBtnLabel() : string {
		const selectedShifts = this.api.data.shifts.filterBy(item => item.selected);

		let result : PDictionarySourceString;
		if (this.offersRef instanceof SchedulingApiShiftExchangeCommunicationSwapOffers) {
			if (selectedShifts.length <= 1) return this.localize.transform('Schicht hinzufügen');
			result = '${counter} Schichten einzeln hinzufügen';
		} else if (
			this.offersRef instanceof SchedulingApiShiftExchangeShiftRefs &&
			this.loadDetailedItem instanceof SchedulingApiShiftExchange
		) {
			if (this.loadDetailedItem.isIllness) {
				result = '${counter} Schichten der Krankmeldung hinzufügen';
			} else {
				result = '${counter} Schichten der Suche hinzufügen';
			}
		} else {
			result = '${counter} Schichten der Auswahl hinzufügen';
		}
		return this.localize.transform(result, { counter: selectedShifts.length.toString() }, false);
	}

	public ngOnInit() : void {
		this.highlightService.clear();
	}

	/**
	 * Is this a required field?
	 * This can be set as Input() but if there is a formControl binding,
	 * then it takes the info from the formControl’s validators.
	 */
	public get required() : boolean {
		if (this._required) return this._required;
		if (this.formArray) {
			const validator = this.formArray.validator?.(this.formArray);
			if (!validator) return false;
			return !!validator[PPossibleErrorNames.REQUIRED] || !!validator[PPossibleErrorNames.ID_DEFINED] || !!validator[PPossibleErrorNames.NOT_UNDEFINED];
		}
		return false;
	}

	private _value : ValueType | null = null;
	public onChange : (value : ValueType | null) => void = () => {};

	/** onTouched */
	public onTouched = () : void => {};

	/** the value of this control */
	public get value() : ValueType | null { return this._value; }
	public set value(value : ValueType | null) {
		if (value === this._value) return;

		this._value = value;
		this.onChange(value);
	}

	/** Write a new value to the element. */
	public writeValue(value : ValueType) : void {
		if (this._value === value) return;
		this._value = value;
		this.changeDetectorRef.detectChanges();
	}

	/**
	 * @see ControlValueAccessor['registerOnChange']
	 *
	 * Note that registerOnChange() only gets called if a formControl is bound.
	 * @param fn Accepts a callback function which you can call when changes happen so that you can notify the outside world that
	 * the data model has changed.
	 * Note that you call it with the changed data model value.
	 */
	public registerOnChange(fn : (value : ValueType | null) => void) : ReturnType<ControlValueAccessor['registerOnChange']> { this.onChange = fn; }

	/** Set the function to be called when the control receives a touch event. */
	public registerOnTouched(fn : () => void) : void { this.onTouched = fn; }

	/** setDisabledState */
	public setDisabledState(isDisabled : boolean) : void {
		if (this.disabled === isDisabled) return;
		// Set internal attribute which gets used in the template.
		this.disabled = isDisabled;
		// Refresh the formArray. #two-way-binding
		this.disabled ? this.formArray?.disable() : this.formArray?.enable();
	}

	/* eslint-disable-next-line jsdoc/require-jsdoc */
	public get showHasBundleWarning() : boolean | undefined {

		// For info about this, see initAlertForHasBundle
		if (!this.alertForHasBundle) return false;

		if (!(this.loadDetailedItem instanceof SchedulingApiShiftExchange)) return undefined;
		if (this.loadDetailedItem.isIllness) return false;

		if (this.offersRef instanceof SchedulingApiShiftExchangeShiftRefs) return this.offersRef.length > 1;
		if (!(this.offersRef instanceof SchedulingApiShiftExchangeCommunicationSwapOffers)) return undefined;
		if (this.offersRef.findBy(item => item.shiftRefs.length > 1)) return true;
		return false;
	}

	public alerts : ErrorArray = [];
	public alertForHasBundle : ErrorItem | null = null;
	public alertForEqualoffers : ErrorItem | null = null;
	public alertForCommunicationReset : ErrorItem | null = null;
	public alertForNoMember : ErrorItem | null = null;

	private initAlertForHasBundle() : void {

		// If there are already multiple shiftRefs when user opened the modal, we assume, that we don’t need to remind him
		// again, so we leave .alertForHasBundle undefined
		if (this.shiftRefs.length > 1) return;

		let textForAlertForHasBundle : string;
		if (this.offersRef instanceof SchedulingApiShiftExchangeShiftRefs) {
			textForAlertForHasBundle = this.localize.transform('Du hast mehrere Schichten hinzugefügt. Sie alle müssen von einer Person komplett übernommen werden. Möchtest du das nicht, solltest du die Schichten einzeln in die Tauschbörse stellen.');
		} else {
			textForAlertForHasBundle = this.localize.transform('Bedenke, dass dein Verhandlungspartner ein gebündeltes Schicht-Angebot komplett übernehmen muss und sich nicht einzelne Schichten rauspicken kann.');
		}
		this.alertForHasBundle = {
			type: PThemeEnum.WARNING,
			text: textForAlertForHasBundle,
		};
	}

	private initAlertDefaults() : void {
		this.initAlertForHasBundle();

		this.alertForEqualoffers = {
			type: PThemeEnum.DANGER,
			text: this.localize.transform('Zwei Angebote gleichen sich.'),
		};

		this.alertForCommunicationReset = {
			type: PThemeEnum.WARNING,
			text: this.localize.transform('Es gibt Mitarbeitende, die schon auf die bisherige Schicht-Auswahl geantwortet haben. Änderst du die Auswahl, müssen sie erneut antworten.'),
		};

		this.alertForNoMember = {
			type: PThemeEnum.DANGER,
			text: this.localize.transform('Niemand aus dem Team kann deine aktuelle Schicht-Auswahl übernehmen. Du solltest deine Auswahl ändern.'),
		};
	}

	private pushItToAlertsIfPossible(error : ErrorItem) : void {
		const isAlreadyAdded = this.alerts.find(item => item.text === error.text && item.type === error.type);
		if (!isAlreadyAdded) this.alerts.push(error);
	}

	/* eslint-disable-next-line jsdoc/require-jsdoc */
	public refreshAlertsArray() : ErrorArray {
		this.alerts = [];

		if (this.formArray!.hasError('equaloffers'.toLowerCase())) this.pushItToAlertsIfPossible(this.alertForEqualoffers!);
		if (this.showCommunicationResetAlert) this.pushItToAlertsIfPossible(this.alertForCommunicationReset!);
		if (this.noMemberAvailableForTheseShiftRefs) this.pushItToAlertsIfPossible(this.alertForNoMember!);

		return this.alerts;
	}

	/* eslint-disable-next-line jsdoc/require-jsdoc */
	public requesterIsAssigned(shift : SchedulingApiShift) : boolean {
		if (!this.meService.isLoaded()) return false;
		return shift.assignedMemberIds.contains(this.meService.data.id);
	}

	/* eslint-disable-next-line jsdoc/require-jsdoc */
	public onShiftClick(shift : SchedulingApiShift) : void {
		if (!this.requesterIsAssigned(shift)) return;
		if (this.valueContainsShiftId(shift.id)) return;
		if (this.pShiftExchangeService.shiftExchangeExistsForShiftAndRequester(shift.id)) return;
		shift.selected = !shift.selected;
	}
}
